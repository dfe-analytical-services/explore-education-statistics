using System;
using System.Threading.Tasks;
using GovUk.Education.ExploreEducationStatistics.Admin.Services.Interfaces.Methodologies;
using GovUk.Education.ExploreEducationStatistics.Admin.ViewModels;
using GovUk.Education.ExploreEducationStatistics.Common.Extensions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace GovUk.Education.ExploreEducationStatistics.Admin.Controllers.Api.Methodologies
{
    [Route("api")]
    [Authorize]
    [ApiController]
    public class MethodologyImageController : ControllerBase
    {
        private readonly IMethodologyImageService _methodologyImageService;

        public MethodologyImageController(IMethodologyImageService methodologyImageService)
        {
            _methodologyImageService = methodologyImageService;
        }

        [HttpPost("methodologies/{methodologyId:guid}/images")]
        [RequestSizeLimit(int.MaxValue)]
        [RequestFormLimits(ValueLengthLimit = int.MaxValue, MultipartBodyLengthLimit = int.MaxValue)]
        public async Task<ActionResult<ImageFileViewModel>> Upload(Guid methodologyId, IFormFile file)
        {
            return await _methodologyImageService
                .Upload(methodologyId, file)
                .HandleFailuresOrOk();
        }

        /// <summary>
        /// Stream a methodology image.
        /// Image tags exist within HTML generated by the content editor.
        /// Anonymous access is allowed here since these requests have no authentication token.
        /// Adding one would require parsing the HTML into React DOM nodes.
        /// </summary>
        /// <param name="methodologyId"></param>
        /// <param name="fileId"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpGet("methodologies/{methodologyId:guid}/images/{fileId:guid}")]
        public async Task<ActionResult> Stream(Guid methodologyId, Guid fileId)
        {
            return await _methodologyImageService
                .Stream(methodologyId, fileId)
                .HandleFailures();
        }
    }
}
