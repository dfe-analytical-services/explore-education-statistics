// <auto-generated />
using System;
using GovUk.Education.ExploreEducationStatistics.Admin.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GovUk.Education.ExploreEducationStatistics.Admin.Migrations.UsersAndRolesMigrations
{
    [DbContext(typeof(UsersAndRolesDbContext))]
    [Migration("20210705150613_EES2156_AddDeleteAnyMethodologyAmendmentClaimToBauRole")]
    partial class EES2156_AddDeleteAnyMethodologyAmendmentClaimToBauRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GovUk.Education.ExploreEducationStatistics.Admin.Areas.Identity.Data.Models.UserInvite", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.HasIndex("RoleId");

                    b.ToTable("UserInvites");
                });

            modelBuilder.Entity("GovUk.Education.ExploreEducationStatistics.Admin.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cf67b697-bddd-41bd-86e0-11b7e11d99b3",
                            ConcurrencyStamp = "85d6c75e-a6c8-4c7e-b4d0-8ee70a4879d3",
                            Name = "BAU User",
                            NormalizedName = "BAU USER"
                        },
                        new
                        {
                            Id = "f9ddb43e-aa9e-41ed-837d-3062e130c425",
                            ConcurrencyStamp = "85d6c75e-a6c8-4c7e-b4d0-8ee70a4879d3",
                            Name = "Analyst",
                            NormalizedName = "ANALYST"
                        },
                        new
                        {
                            Id = "17e634f4-7a2b-4a23-8636-b079877b4232",
                            ConcurrencyStamp = "85d6c75e-a6c8-4c7e-b4d0-8ee70a4879d3",
                            Name = "Prerelease User",
                            NormalizedName = "PRERELEASE USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            ClaimType = "ApplicationAccessGranted",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "AccessAllReleases",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -5,
                            ClaimType = "MarkAllReleasesAsDraft",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -6,
                            ClaimType = "SubmitAllReleasesToHigherReview",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -7,
                            ClaimType = "ApproveAllReleases",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -8,
                            ClaimType = "UpdateAllReleases",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -9,
                            ClaimType = "CreateAnyPublication",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -10,
                            ClaimType = "CreateAnyRelease",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -11,
                            ClaimType = "ManageAnyUser",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -12,
                            ClaimType = "ManageAnyMethodology",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -13,
                            ClaimType = "ApplicationAccessGranted",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -14,
                            ClaimType = "AnalystPagesAccessGranted",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -15,
                            ClaimType = "ApplicationAccessGranted",
                            ClaimValue = "",
                            RoleId = "17e634f4-7a2b-4a23-8636-b079877b4232"
                        },
                        new
                        {
                            Id = -16,
                            ClaimType = "PrereleasePagesAccessGranted",
                            ClaimValue = "",
                            RoleId = "17e634f4-7a2b-4a23-8636-b079877b4232"
                        },
                        new
                        {
                            Id = -17,
                            ClaimType = "PrereleasePagesAccessGranted",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -18,
                            ClaimType = "AnalystPagesAccessGranted",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -19,
                            ClaimType = "PrereleasePagesAccessGranted",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -20,
                            ClaimType = "CanViewPrereleaseContacts",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -21,
                            ClaimType = "CanViewPrereleaseContacts",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -22,
                            ClaimType = "CreateAnyMethodology",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -23,
                            ClaimType = "UpdateAllMethodologies",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -24,
                            ClaimType = "AccessAllMethodologies",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -25,
                            ClaimType = "CreateAnyMethodology",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -26,
                            ClaimType = "UpdateAllMethodologies",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -27,
                            ClaimType = "AccessAllMethodologies",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -28,
                            ClaimType = "ApproveAllMethodologies",
                            ClaimValue = "",
                            RoleId = "f9ddb43e-aa9e-41ed-837d-3062e130c425"
                        },
                        new
                        {
                            Id = -29,
                            ClaimType = "ApproveAllMethodologies",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -30,
                            ClaimType = "PublishAllReleases",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -31,
                            ClaimType = "MakeAmendmentsOfAllReleases",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -32,
                            ClaimType = "DeleteAllReleaseAmendments",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -33,
                            ClaimType = "ManageAllTaxonomy",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -34,
                            ClaimType = "UpdateAllPublications",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -35,
                            ClaimType = "MarkAllMethodologiesDraft",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -36,
                            ClaimType = "AccessAllImports",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -37,
                            ClaimType = "CancelAllFileImports",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -38,
                            ClaimType = "MakeAmendmentsOfAllMethodologies",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        },
                        new
                        {
                            Id = -39,
                            ClaimType = "DeleteAllMethodologyAmendments",
                            ClaimValue = "",
                            RoleId = "cf67b697-bddd-41bd-86e0-11b7e11d99b3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GovUk.Education.ExploreEducationStatistics.Admin.Areas.Identity.Data.Models.UserInvite", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GovUk.Education.ExploreEducationStatistics.Admin.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GovUk.Education.ExploreEducationStatistics.Admin.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GovUk.Education.ExploreEducationStatistics.Admin.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GovUk.Education.ExploreEducationStatistics.Admin.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
