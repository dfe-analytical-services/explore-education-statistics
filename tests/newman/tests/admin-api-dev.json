{
	"info": {
		"_postman_id": "53ea3d7c-0061-4ba7-89d5-6542f7215004",
		"name": "DfE Admin API - Dev tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test data",
			"item": [
				{
					"name": "Create theme",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69faf190-7089-4a2a-95c1-431796612327",
								"exec": [
									"pm.globals.clear();",
									"",
									"var chars = 'abcdefghijklmnopqrstuvwxyz0123456789';",
									"var unique_identifier = '';",
									"",
									"for(var i = 0; i < 16; i++) {",
									"    var pos = Math.floor(Math.random() * chars.length);",
									"    unique_identifier += chars.substring(pos, pos+1);",
									"}",
									"",
									"pm.globals.set('RUN_IDENTIFIER', unique_identifier);",
									"console.log('RUN_IDENTIFIER: ', pm.globals.get('RUN_IDENTIFIER'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea84e9e-ed65-4855-b06e-7babec990d7e",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('theme_id', respJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"summary\": \"API test theme {{RUN_IDENTIFIER}} summary\",\n\t\"title\": \"API test theme {{RUN_IDENTIFIER}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/theme/",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"theme",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create topic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "14bff5f4-f0dd-4c23-9759-901830f065b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e56a2165-62ec-490a-8219-ea2946c5293c",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('topic_id', respJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test topic {{RUN_IDENTIFIER}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/theme/{{theme_id}}/topics",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"theme",
								"{{theme_id}}",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create methodology",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce534719-a30a-4eb3-8980-af13b51d077a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab980082-b3fe-4495-a290-d693d1bf0a0a",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('methodology_id', respJson.id);",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody('id'));",
									"    pm.expect(pm.response.to.have.jsonBody('publishScheduled'));",
									"    pm.expect(pm.response.to.have.jsonBody('status'));",
									"    pm.expect(pm.response.to.have.jsonBody('title'));",
									"});",
									"",
									"pm.test(\"publishScheduled should be correct\", function () {",
									"    pm.expect(respJson.publishScheduled).to.equal('2026-01-01');",
									"});",
									"",
									"pm.test(\"status should be Draft\", function () {",
									"    pm.expect(respJson.status).to.equal('Draft');",
									"});",
									"",
									"pm.test(\"title should be correct\", function () {",
									"    pm.expect(respJson.title).to.equal(`API test methodology ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test methodology {{RUN_IDENTIFIER}}\",\n\t\"publishScheduled\": \"2026-01-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/methodologies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"methodologies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create publication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b604d868-30bf-4127-9ecc-6a42231a9864",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "61a51413-c18d-47a9-bfea-c86a017bc908",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('publication_id', pm.response.json().id);",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"title should be correct\", function () {",
									"    pm.expect(respJson.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"methodology should be correct\", function () {",
									"    pm.expect(respJson.methodology.id).to.equal(`${pm.globals.get('methodology_id')}`);",
									"    pm.expect(respJson.methodology.title).to.equal(`API test methodology ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"releases should be an empty array\", function () {",
									"    pm.expect(respJson.releases).to.be.an('array').that.is.empty;",
									"});",
									"",
									"pm.test(\"topicId should be correct\", function () {",
									"    pm.expect(respJson.topicId).to.equal(pm.globals.get('topic_id'));",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"contact should be correct\", function () {",
									"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(respJson.contact.contactName).to.equal(\"Sean Gibson\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test publication {{RUN_IDENTIFIER}}\",\n\t\"contactId\": \"d246c696-4b3a-4aeb-842c-c1318ee334e8\",\n\t\"methodologyId\": \"{{methodology_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/topic/{{topic_id}}/publications",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"{{topic_id}}",
								"publications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35ab0fdd-e0a4-4725-9eb6-d667386ce6a1",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.globals.set('release_id', respJson.id);",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publicationId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publicationTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releaseName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`yearTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`typeId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`nextReleaseDate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publishScheduled`));",
									"    pm.expect(pm.response.to.have.jsonBody(`live`));",
									"    pm.expect(pm.response.to.have.jsonBody(`timePeriodCoverage`));",
									"    pm.expect(pm.response.to.have.jsonBody(`latestRelease`));",
									"    pm.expect(pm.response.to.have.jsonBody(`type`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"    pm.expect(pm.response.to.have.jsonBody(`status`));",
									"});",
									"",
									"pm.test(\"title should should be correct\", function () { ",
									"    pm.expect(respJson.title).to.equal(\"Calendar Year 2025\");",
									"});",
									"",
									"pm.test(\"publicationId should be correct\", function () {",
									"    pm.expect(respJson.publicationId).to.equal(pm.globals.get('publication_id')); ",
									"});",
									"",
									"pm.test(\"publicationTitle should be correct\", function () {",
									"    pm.expect(respJson.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"releaseName, yearTitle should be correct\", function () {",
									"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
									"    pm.expect(respJson.yearTitle).to.equal(\"2025\"); ",
									"});",
									"",
									"pm.test(\"typeId should be correct\", function () {",
									"    pm.expect(respJson.typeId).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\"); ",
									"});",
									"",
									"pm.test(\"nextReleaseDate should be correct\", function () {",
									"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\"); ",
									"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
									"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
									"});",
									"",
									"pm.test(\"publishScheduled should be correct\", function () {",
									"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01\");  ",
									"});",
									"",
									"pm.test(\"live should be correct\", function () {",
									"    pm.expect(respJson.live).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7279ac4c-2097-41b5-9339-e40b2374c437",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"publicationId\": \"{{publication_id}}\",\n\t\"templateReleaseId\": \"\",\n\t\"timePeriodCoverage\": { \"value\":\"CY\" },\n\t\"releaseName\": 2025,\n\t\"publishScheduled\": \"2026-01-01\",\n\t\"nextReleaseDate\": {\n\t\t\"day\": 1,\n\t\t\"month\": 1,\n\t\t\"year\": 2027\n\t},\n\t\"typeId\": \"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/publications/{{publication_id}}/releases",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"{{publication_id}}",
								"releases"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import subject (SUB1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2e637b9-08c3-442e-a611-d10f593e43d1",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return array of correct length\", function () {",
									"    pm.expect(respJson.length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Meta file details should be correct\", function () { ",
									"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
									"    pm.expect(respJson[0].name).to.equal(\"\");",
									"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
									"    pm.expect(respJson[0].size).to.equal(\"157 B\");",
									"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
									"    pm.expect(respJson[0].rows).to.equal(2);",
									"",
									"    var createdDate = respJson[1].created.substring(0, respJson[1].created.indexOf('T'));",
									"    var now = new Date();",
									"    var nowDate = `${now.getFullYear()}-${('0' + (now.getMonth()+1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;",
									"    pm.expect(createdDate).to.equal(nowDate);",
									"    ",
									"    pm.expect(respJson[0].userName).to.equal(\"bau1@example.com\");",
									"});",
									"",
									"pm.test(\"Data file details should be correct\", function () { ",
									"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
									"    pm.expect(respJson[1].name).to.equal(\"API test subject\");",
									"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
									"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
									"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
									"    pm.expect(respJson[1].rows).to.equal(161);",
									"",
									"    var createdDate = respJson[1].created.substring(0, respJson[1].created.indexOf('T'));",
									"    var now = new Date();",
									"    var nowDate = `${now.getFullYear()}-${('0' + (now.getMonth()+1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;",
									"    pm.expect(createdDate).to.equal(nowDate);",
									"    ",
									"    pm.expect(respJson[1].userName).to.equal(\"bau1@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "198c73f8-44bb-4510-a0b6-56e8fbac92af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "files/admin-api-test.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "files/admin-api-test.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=API%20test%20subject",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "API%20test%20subject"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Release Meta - API test release",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "482d0dbb-b029-4ccf-9775-e249902c081e",
								"exec": [
									"// Wait for subject to be imported from \"Import subject (SUB1)\" request",
									"if(pm.environment.get('env') === 'local') {",
									"    setTimeout(function () {}, 100000);",
									"} else {",
									"    setTimeout(function () {}, 100000);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4693cff-4018-4a07-b6e5-319e720d118f",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"    ",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
									"});",
									"",
									"pm.test(\"releaseId matches the release requested\", function () { ",
									"    pm.expect(respJson.releaseId).to.equal(pm.globals.get('release_id')); ",
									"});",
									"",
									"pm.test(\"Number of subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Subject 'API test subject' should exist\", function () {",
									"    var subject = respJson.subjects.find(subject => subject.label === \"API test subject\");",
									"    pm.expect(subject, 'Couldn\\'t find subject \"API test subject\"!').to.not.be.undefined;",
									"    pm.globals.set('sub1_id', subject.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/data/meta/release/{{release_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"meta",
								"release",
								"{{release_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subject Meta - API test subject (SUB1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c68807b-eaae-487e-b2f1-d61b40d9817a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77f240db-7ccf-46d1-b899-74becbd44836",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.opportunityArea\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.ward\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.parliamentaryConstituency\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localEnterprisePartnership\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.rscRegion\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
									"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
									"});",
									"",
									"pm.test(\"filters should be correct\", function () {",
									"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
									"});",
									"",
									"pm.test(\"indicators should be correct\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
									"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
									"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
									"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
									"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
									"});",
									"",
									"pm.test(\"localAuthorityDistricts should be correct\", function () {",
									"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(4);",
									"    ladLabels = respJson.locations.localAuthorityDistrict.options.map(lad => lad.label);",
									"    pm.expect(ladLabels)",
									"        .to.have.members([",
									"            \"Hartlepool\",",
									"            \"Stockton-on-Tees\",",
									"            \"Middlesbrough\",",
									"            \"Redcar and Cleveland\",",
									"        ]);   ",
									"});",
									"",
									"pm.test(\"opportunityAreas should be correct\", function () {",
									"    pm.expect(respJson.locations.opportunityArea.options.length).to.equal(8);",
									"    oaLabels = respJson.locations.opportunityArea.options.map(oa => oa.label);",
									"    pm.expect(oaLabels)",
									"        .to.have.members([",
									"            \"Bolton 001 (E02000984)\",",
									"            \"Bolton 001 (E05000364)\",",
									"            \"Bolton 002 (E02000985)\",",
									"            \"Bolton 002 (E05006937)\",",
									"            \"Bolton 003 (E02000986)\",",
									"            \"Bolton 003 (E05010291)\",",
									"            \"Bolton 004 (E02000987)\",",
									"            \"Bolton 004 (E05010450)\",",
									"        ]);  ",
									"});",
									"",
									"pm.test(\"wards should be correct\", function () {",
									"    pm.expect(respJson.locations.ward.options.length).to.equal(4);",
									"    wardLabels = respJson.locations.ward.options.map(ward => ward.label);",
									"    pm.expect(wardLabels)",
									"        .to.have.members([",
									"            \"Syon\",",
									"            \"Yoxall\",",
									"            \"Rural West York\",",
									"            \"Nailsea Youngwood\",",
									"        ]);   ",
									"});",
									"",
									"pm.test(\"parliamentaryConstituency should be correct\", function () {",
									"    pm.expect(respJson.locations.parliamentaryConstituency.options.length).to.equal(4);",
									"    pcLabels = respJson.locations.parliamentaryConstituency.options.map(pc => pc.label);",
									"    pm.expect(pcLabels)",
									"        .to.have.members([",
									"            \"East Yorkshire\",",
									"            \"Richmond (Yorks)\",",
									"            \"York Central\",",
									"            \"York Outer\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"localEnterprisePartnership should be correct\", function () {",
									"    pm.expect(respJson.locations.localEnterprisePartnership.options.length).to.equal(4);",
									"    lepLabels = respJson.locations.localEnterprisePartnership.options.map(lep => lep.label);",
									"    pm.expect(lepLabels)",
									"        .to.have.members([",
									"            \"Black Country\",",
									"            \"Chesire and Warrington\",",
									"            \"Cornwall and Isles of Scilly\",",
									"            \"Coventry and Warwickshire\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"rscRegion should be correct\", function () {",
									"    pm.expect(respJson.locations.rscRegion.options.length).to.equal(4);",
									"    rscrLabels = respJson.locations.rscRegion.options.map(rscr => rscr.label);",
									"    pm.expect(rscrLabels)",
									"        .to.have.members([",
									"            \"East of England and North-East London\",",
									"            \"East Midlands and the Humber\",",
									"            \"Lancashire and West Yorkshire\",",
									"            \"North of England\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"region should be correct\", function () {",
									"    pm.expect(respJson.locations.region.options.length).to.equal(4);",
									"    regionLabels = respJson.locations.region.options.map(region => region.label);",
									"    pm.expect(regionLabels)",
									"        .to.have.members([",
									"            \"Yorkshire and the Humber\",",
									"            \"North East\",",
									"            \"North West\",",
									"            \"West Midlands\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"localAuthority should be correct\", function () {",
									"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(4);",
									"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
									"    pm.expect(laLabels)",
									"        .to.have.members([",
									"            \"Birmingham\",",
									"            \"Barnsley\",",
									"            \"Greenwich\",",
									"            \"Camden\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"timePeriod should be correct\", function () {",
									"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
									"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
									"    ",
									"    pm.expect(respJson.timePeriod.options.length).to.equal(16);",
									"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(16);",
									"    ",
									"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
									"    pm.expect(years)",
									"        .to.have.members([",
									"            \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",",
									"            \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",",
									"            \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",",
									"            \"2020\",",
									"        ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/data/meta/subject/{{sub1_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"meta",
								"subject",
								"{{sub1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Footnote for SUB1 subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bed1e6f6-ca38-41bc-8638-e1a1ce059e80",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
									"});",
									"",
									"pm.globals.set(\"sub1_footnote_subject_id\", respJson.id);",
									"",
									"pm.test(\"content should should be correct\", function () { ",
									"    pm.expect(respJson.content).to.equal(\"SUB1 test footnote subject\"); ",
									"});",
									"",
									"pm.test(\"subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].selected).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e049219f-58d3-4ca5-9609-61dc1c9f9190",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"SUB1 test footnote subject\",\n    \"indicators\": [],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": [\"{{sub1_id}}\"]\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"footnote",
								"release",
								"{{release_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Footnote for SUB1 Admission Numbers indicator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99e2767e-09ac-4fe7-aa61-90c3c6ce3c3b",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
									"});",
									"",
									"pm.globals.set(\"sub1_footnote_indicator_id\", respJson.id);",
									"",
									"pm.test(\"content should should be correct\", function () { ",
									"    pm.expect(respJson.content).to.equal(\"SUB1 test footnote indicator\"); ",
									"});",
									"",
									"pm.test(\"subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].selected).to.be.false;",
									"    ",
									"    var indicatorGroups = Object.keys(respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups);",
									"    pm.expect(indicatorGroups.length).to.equal(1);",
									"    pm.globals.set('SUB1_INDGROUP_Default', indicatorGroups[0]);",
									"    ",
									"    var indicators = respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups[pm.globals.get('SUB1_INDGROUP_Default')].indicators",
									"    pm.expect(indicators.length).to.equal(1);",
									"    pm.expect(indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "71c3f53a-00e8-4380-91d6-78d62f7679ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"SUB1 test footnote indicator\",\n    \"indicators\": [\"{{SUB1_IND_Admission_Numbers}}\"],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": []\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"footnote",
								"release",
								"{{release_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create data block 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "451ee35b-889b-42ce-ac19-7a85a631006e",
								"exec": [
									"const respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Store environment variables\", function () {",
									"    pm.expect(respJson.id).to.not.be.null;",
									"    pm.globals.set(\"sub1_datablock1_id\", respJson.id);",
									"});",
									"",
									"pm.test(\"heading should be correct\", function () {",
									"    pm.expect(respJson.heading).to.equal(`Admin API test title`);",
									"});",
									"",
									"pm.test(\"name should be correct\", function () {",
									"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\"); ",
									"});",
									"",
									"pm.test(\"source should be correct\", function () {",
									"    pm.expect(respJson.source).to.equal(\"Admin API test source\"); ",
									"});",
									"",
									"pm.test(\"query should be correct\", function () {",
									"    const dbReq = respJson.query;",
									"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
									"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
									"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
									"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
									"    pm.expect(dbReq.indicators.length).to.equal(1);",
									"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
									"        \"E08000016\",",
									"        \"E08000025\"",
									"    ]);",
									"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
									"        \"E06000001\",",
									"        \"E06000002\"",
									"    ]);",
									"});",
									"",
									"pm.test(\"charts should be correct\", function () {",
									"    pm.expect(respJson.charts).to.be.an('array').that.is.empty; ",
									"});",
									"",
									"pm.test(\"table should be correct\", function () {",
									"    const table = respJson.table;",
									"    pm.expect(table.indicators).to.equal(undefined);",
									"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
									"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
									"    ",
									"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
									"    pm.expect(column).to.have.members([",
									"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
									"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
									"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
									"    ",
									"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
									"    pm.expect(row).to.have.members([",
									"        \"E06000002\",",
									"        \"E06000001\",",
									"        \"E08000016\",",
									"        \"E08000025\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
									"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"charts\": [],\n  \"heading\": \"Admin API test title\",\n  \"name\": \"Admin API data block 1\",\n  \"source\": \"Admin API test source\",\n  \"query\": {\n    \"subjectId\": \"{{sub1_id}}\",\n    \"indicators\": [\"{{SUB1_IND_Admission_Numbers}}\"],\n    \"filters\": [],\n    \"locations\": {\n      \"localAuthorityDistrict\": [\"E06000001\", \"E06000002\"],\n      \"localAuthority\": [\"E08000016\", \"E08000025\"]\n    },\n    \"timePeriod\": {\n      \"startYear\": 2007,\n      \"startCode\": \"CY\",\n      \"endYear\": 2017,\n      \"endCode\": \"CY\"\n    }\n  },\n  \"table\": {\n    \"tableHeaders\": {\n      \"columnGroups\": [],\n      \"columns\": [\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2007_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2008_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2009_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2010_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2011_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2012_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2013_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2014_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2015_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2016_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2017_CY\"\n        }\n      ],\n      \"rowGroups\": [\n        [\n          {\n            \"type\": \"Location\",\n            \"value\": \"E06000002\",\n            \"level\": \"localAuthorityDistrict\"\n          },\n          {\n            \"type\": \"Location\",\n            \"value\": \"E06000001\",\n            \"level\": \"localAuthorityDistrict\"\n          },\n          {\n            \"type\": \"Location\",\n            \"value\": \"E08000016\",\n            \"level\": \"localAuthority\"\n          },\n          {\n            \"type\": \"Location\",\n            \"value\": \"E08000025\",\n            \"level\": \"localAuthority\"\n          }\n        ]\n      ],\n      \"rows\": [\n        {\n          \"type\": \"Indicator\",\n          \"value\": \"{{SUB1_IND_Admission_Numbers}}\"\n        }\n      ]\n    },\n    \"indicators\": []\n  }\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"datablocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create data block 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3902ddd-6f5f-4271-9d49-cc0ff95af360",
								"exec": [
									"const respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Store environment variables\", function () {",
									"    pm.expect(respJson.id).to.not.be.null;",
									"    pm.globals.set(\"sub1_datablock2_id\", respJson.id);",
									"});",
									"",
									"pm.test(\"heading should be correct\", function () {",
									"    pm.expect(respJson.heading).to.equal(`Admin API test title 2`);",
									"});",
									"",
									"pm.test(\"name should be correct\", function () {",
									"    pm.expect(respJson.name).to.equal(\"Admin API data block 2\"); ",
									"});",
									"",
									"pm.test(\"source should be correct\", function () {",
									"    pm.expect(respJson.source).to.equal(\"Admin API test source 2\");",
									"});",
									"",
									"pm.test(\"query should be correct\", function () {",
									"    const dbReq = respJson.query;",
									"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
									"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
									"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
									"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
									"    pm.expect(dbReq.indicators.length).to.equal(1);",
									"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"    pm.expect(dbReq.locations.ward).to.have.members([",
									"        \"E05010291\",",
									"        \"E05010450\"",
									"    ]);",
									"});",
									"",
									"pm.test(\"charts should be correct\", function () {",
									"    pm.expect(respJson.charts).to.be.an('array').that.is.empty; ",
									"});",
									"",
									"pm.test(\"table should be correct\", function () {",
									"    const table = respJson.table;",
									"    pm.expect(table.indicators).to.equal(undefined);",
									"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
									"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
									"    ",
									"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
									"    pm.expect(column).to.have.members([",
									"        \"2005_CY\", \"2006_CY\", ",
									"        \"2007_CY\", \"2008_CY\", ",
									"        \"2009_CY\", \"2010_CY\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
									"    ",
									"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
									"    pm.expect(row).to.have.members([",
									"        \"E05010450\",",
									"        \"E05010291\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
									"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"charts\": [],\n  \"id\": \"5f2613a7-c883-4be9-9d15-73af506a50a3\",\n  \"heading\": \"Admin API test title 2\",\n  \"name\": \"Admin API data block 2\",\n  \"source\": \"Admin API test source 2\",\n  \"query\": {\n    \"subjectId\": \"{{sub1_id}}\",\n    \"timePeriod\": {\n      \"startYear\": 2005,\n      \"startCode\": \"CY\",\n      \"endYear\": 2010,\n      \"endCode\": \"CY\"\n    },\n    \"filters\": [],\n    \"indicators\": [\"{{SUB1_IND_Admission_Numbers}}\"],\n    \"locations\": {\n      \"ward\": [\"E05010291\", \"E05010450\"]\n    },\n    \"includeGeoJson\": false\n  },\n  \"table\": {\n    \"tableHeaders\": {\n      \"columnGroups\": [],\n      \"columns\": [\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2005_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2006_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2007_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2008_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2009_CY\"\n        },\n        {\n          \"type\": \"TimePeriod\",\n          \"value\": \"2010_CY\"\n        }\n      ],\n      \"rowGroups\": [\n        [\n          {\n            \"type\": \"Location\",\n            \"value\": \"E05010450\",\n            \"level\": \"ward\"\n          },\n          {\n            \"type\": \"Location\",\n            \"value\": \"E05010291\",\n            \"level\": \"ward\"\n          }\n        ]\n      ],\n      \"rows\": [\n        {\n          \"type\": \"Indicator\",\n          \"value\": \"{{SUB1_IND_Admission_Numbers}}\"\n        }\n      ]\n    },\n    \"indicators\": []\n  }\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"datablocks"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Topic",
			"item": [
				{
					"name": "Try to create same publication twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e858ec8-0c53-424c-8754-d210e48f36b3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea41dd63-0098-47f3-ae91-27b92cfa67aa",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(400); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"errors\"));",
									"});",
									"",
									"pm.test(\"errors should be correct\", function () {",
									"    pm.expect(respJson.errors[''][0]).to.equal('SLUG_NOT_UNIQUE'); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test publication {{RUN_IDENTIFIER}}\",\n\t\"contactId\": \"d246c696-4b3a-4aeb-842c-c1318ee334e8\",\n\t\"methodologyId\": \"b4886b45-53c2-4d6f-e6bc-08d77d76f342\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/topic/{{topic_id}}/publications",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"{{topic_id}}",
								"publications"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Import Status - admin-api-test.csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a079bd5-749a-4da2-a311-ee661458aa19",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Status should be complete\", function () {",
									"    pm.expect(respJson.status).to.equal(\"COMPLETE\");",
									"    //pm.expect(respJson.percentageComplete).to.equal(100);",
									"    pm.expect(respJson.percentageComplete).to.equal(0);",
									"});",
									"",
									"pm.test(\"There should be no errors\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"errors\", \"\"));",
									"});",
									"",
									"pm.test(\"numberOfRows should be correct\", function() {",
									"    pm.expect(respJson.numberOfRows).to.equal(161) ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c45ef27-d306-4371-853d-7298e8b9357b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"data",
								"admin-api-test.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Status - invalid release id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f8dac6e-9f41-4aaf-81c4-15e3d253493d",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(404); });",
									"",
									"pm.test(\"Status should be not found\", function () {",
									"    pm.expect(respJson.title).to.equal(\"Not Found\");",
									"});",
									"",
									"pm.test(\"There should be no errors field\", function () {",
									"pm.expect(pm.response.to.not.have.jsonBody(\"errors\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2c39df1-329e-4e0a-9419-677a0befecad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/release/228f8aaf-e438-4155-8912-983943a88989/data/expected_not_found.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"228f8aaf-e438-4155-8912-983943a88989",
								"data",
								"expected_not_found.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Contacts @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68850528-8efc-4bd5-aaf5-cb2f5b09732b",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamEmail\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactTelNo\"));",
									"});",
									"",
									"pm.test(\"School absence and exclusions team details should be correct\", function () {",
									"    var team = respJson.filter(function (team) { return team.teamName === \"School absence and exclusions team\" });",
									"    pm.expect(team.length).to.equal(1);",
									"    var team = team[0];",
									"    pm.expect(team.teamEmail).to.equal(\"schools.statistics@education.gov.uk\");",
									"    pm.expect(team.contactName).to.equal(\"Sean Gibson\");",
									"    pm.expect(team.contactTelNo).to.equal(\"0370 000 2288\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/contacts",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"contacts"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Meta",
			"item": [
				{
					"name": "Time identifiers @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "123cf8ca-2226-4ef6-9dc4-2175ba5040c2",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect the correct number of results\", function () {",
									"    pm.expect(respJson.length).to.equal(8);",
									"});",
									"",
									"pm.test(\"Expect the correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.label`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.label`));",
									"    }",
									"});",
									"",
									"pm.test(\"Expect AcademicYear results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"AcademicYear\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Academic year\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(5);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect Month results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"Month\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Month\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(12);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/meta/timeidentifiers",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"timeidentifiers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Release types @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e62021ee-081a-4da9-9b18-b05b029dfc1b",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should correct number of results\", function () { pm.expect(respJson.length).to.equal(3); });",
									"",
									"pm.test(\"Results titles should be correct\", function () {",
									"    var foundAdHoc = false;",
									"    var foundNationalStatistics = false;",
									"    var foundOfficialStatistics = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Ad Hoc\") { foundAdHoc = true; }",
									"        if(respJson[i].title === \"National Statistics\") { foundNationalStatistics = true; }",
									"        if(respJson[i].title === \"Official Statistics\") { foundOfficialStatistics = true; }",
									"    }",
									"    pm.expect(foundAdHoc).to.equal(true, \"No Ad Hoc type found!\");",
									"    pm.expect(foundNationalStatistics).to.equal(true, \"No National Statistics type found!\")",
									"    pm.expect(foundOfficialStatistics).to.equal(true, \"No Official Statistics type found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/meta/releasetypes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"releasetypes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Methodologies",
			"item": [
				{
					"name": "Methodologies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0deff1d-1414-4b97-9171-9167ee60f098",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.be.above(1);",
									"});",
									"",
									"pm.test(\"Title for methodology should be correct\", function () {",
									"    var foundExclusion = false;",
									"    for(var i = 0; i < respJson.length && !foundExclusion; i++) {",
									"        if(respJson[i].id === pm.globals.get('methodology_id')) {",
									"            foundExclusion = true;",
									"            pm.expect(respJson[i].title).to.equal(`API test methodology ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"        }",
									"    }",
									"    pm.expect(foundExclusion).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/methodologies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"methodologies"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Theme",
			"item": [
				{
					"name": "Get user's themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8419973f-8d99-4b13-bccf-701e0cb3834e",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First result should have correct fields\", function () {",
									"    pm.expect(respJson.length).to.be.above(0);",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].topics\"));",
									"});",
									"",
									"pm.test(\"Created theme and topic should exist\", function () {",
									"   var testTheme = respJson.find(theme => theme.title === `API test theme ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"   pm.expect(testTheme, `Couldn\\'t find \"API test theme ${pm.globals.get('RUN_IDENTIFIER')}\"`).to.not.be.undefined;",
									"",
									"   var testTopic = testTheme.topics.find(topic => topic.title === `API test topic ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"   pm.expect(testTopic, `Couldn't find \"API test topic ${pm.globals.get('RUN_IDENTIFIER')}\"`).to.not.be.undefined;",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"Number of themes should be correct\", function () {",
									"    pm.expect(respJson.length).to.be.above(8);",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"Number of topics and fields of first topic under Pupils and schools should be correct\", function () {",
									"    var foundPupilsAndSchools = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Pupils and schools\") {",
									"            foundPupilsAndSchools = true;",
									"            pm.expect(respJson[i].topics.length).to.equal(9);",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].title`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].themeId`));",
									"        }",
									"    }",
									"    pm.expect(foundPupilsAndSchools).to.equal(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/me/themes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"themes"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publication",
			"item": [
				{
					"name": "Get user's topic - topic_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf88349-8ccd-4a48-9787-af94eb3cd265",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return correct number of results\", function () {",
									"    pm.expect(respJson.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Single result publication should be correct\", function () {",
									"    var testPub = respJson.find(publication => publication.id === pm.globals.get('publication_id'));",
									"    pm.expect(testPub.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"",
									"    pm.expect(testPub.methodology.id).to.equal(`${pm.globals.get('methodology_id')}`);",
									"    pm.expect(testPub.methodology.title).to.equal(`API test methodology ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"",
									"    pm.expect(testPub.releases.length).to.equal(1);",
									"    pm.expect(testPub.releases[0].id).to.equal(pm.globals.get('release_id'));",
									"    pm.expect(testPub.releases[0].publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"",
									"    pm.expect(testPub.topicId).to.equal(pm.globals.get('topic_id'));",
									"",
									"    // @NotCreatedData",
									"    pm.expect(testPub.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(testPub.contact.contactName).to.equal(\"Sean Gibson\");",
									"",
									"    var testRelease = testPub.releases.find(release => release.id === pm.globals.get('release_id'));",
									"    pm.expect(testRelease).to.not.be.undefined;",
									"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
									"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2027\");",
									"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
									"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
									"    pm.expect(testRelease.publishScheduled).to.equal(\"2026-01-01\");",
									"    pm.expect(testRelease.live).to.equal(false);",
									"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"CY\");",
									"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
									"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
									"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
									"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(testRelease.status).to.equal(\"Draft\");",
									"    pm.expect(testRelease.internalReleaseNote).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d67e868f-5390-48a8-9fb6-819f6567e1ee",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/me/publications?topicId={{topic_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"publications"
							],
							"query": [
								{
									"key": "topicId",
									"value": "{{topic_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get publication - API test publication",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11061b77-a3ca-4a7b-ac0e-faa6bb1e5467",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    //pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"id and title should be correct\", function () {",
									"    pm.expect(respJson.id).to.equal(pm.globals.get('publication_id'));",
									"    pm.expect(respJson.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"methodology should be correct\", function () {",
									"    pm.expect(respJson.methodology.id).to.equal(`${pm.globals.get('methodology_id')}`);",
									"    pm.expect(respJson.methodology.title).to.equal(`API test methodology ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"releases should be correct\", function () {",
									"    pm.expect(respJson.releases.length).to.equal(1);",
									"    pm.expect(respJson.releases[0].id).to.equal(pm.globals.get('release_id'));",
									"    pm.expect(respJson.releases[0].title).to.equal(\"Calendar Year 2025\");",
									"    pm.expect(respJson.releases[0].publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"topicId should be correct\", function () {",
									"    pm.expect(respJson.topicId).to.equal(pm.globals.get('topic_id'));",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"contact should be correct\", function () {",
									"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(respJson.contact.contactName).to.equal(\"Sean Gibson\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c15a7dd-a039-4e43-afee-218e56df0f78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/publications/{{publication_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"{{publication_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get publication - Pupil absence in schools in England @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1109fda0-603c-487e-9a51-4b23d2121846",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    //pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"Response id and title should be correct\", function () {",
									"    pm.expect(respJson.id).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"    pm.expect(respJson.title).to.equal(\"Pupil absence in schools in England\"); ",
									"});",
									"",
									"",
									"pm.test(\"Methodology title should be correct\", function () {",
									"    pm.expect(respJson.methodology.title).to.equal(\"Pupil absence statistics: methodology\"); ",
									"});",
									"",
									"pm.test(\"Should be at least one release\", function () {",
									"    pm.expect(respJson.releases.length).to.be.above(0); ",
									"});",
									"",
									"pm.test(\"First release should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].releaseName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].yearTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].typeId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.year`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.month`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.day`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publishScheduled`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].published`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.value`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.label`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].latestRelease`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamEmail`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactTelNo`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].status`));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8405a5b3-c01a-4db2-b992-5e94dbb1f244",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/publications/cbbd299f-8297-44bc-92ac-558bcf51f8ad",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"cbbd299f-8297-44bc-92ac-558bcf51f8ad"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Meta",
					"item": [
						{
							"name": "Release",
							"item": [
								{
									"name": "Release Meta - API test release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2d39505-f39c-4bda-a2b3-5ce343537958",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"releaseId\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
													"});",
													"",
													"pm.test(\"releaseId matches the release requested\", function () { ",
													"    pm.expect(respJson.releaseId).to.equal(pm.globals.get('release_id')); ",
													"});",
													"",
													"pm.test(\"Number of subjects should be correct\", function () {",
													"    pm.expect(respJson.subjects.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Subject 'API test subject' should exist\", function () {",
													"    var subject = respJson.subjects.find(subject => subject.label === \"API test subject\");",
													"    pm.expect(subject, 'Couldn\\'t find subject \"API test subject\"!').to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10c69bc6-7ba2-453d-a4fa-f18e3406c77e",
												"exec": [
													"// Wait for subject to be imported from \"Import subject (SUB1)\" request",
													"setTimeout(function () {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/release/{{release_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"release",
												"{{release_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subject",
							"item": [
								{
									"name": "Subject Meta - SUB1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8da9968-762d-4af1-ad93-9961d383e3e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2bdb7285-f004-47da-bde4-253ea69ade44",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.opportunityArea\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.ward\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.parliamentaryConstituency\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localEnterprisePartnership\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.rscRegion\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"filters should be correct\", function () {",
													"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
													"});",
													"",
													"pm.test(\"indicators should be correct\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
													"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
													"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
													"});",
													"",
													"pm.test(\"localAuthorityDistricts should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(4);",
													"    ladLabels = respJson.locations.localAuthorityDistrict.options.map(lad => lad.label);",
													"    pm.expect(ladLabels)",
													"        .to.have.members([",
													"            \"Hartlepool\",",
													"            \"Stockton-on-Tees\",",
													"            \"Middlesbrough\",",
													"            \"Redcar and Cleveland\",",
													"        ]);   ",
													"});",
													"",
													"pm.test(\"opportunityAreas should be correct\", function () {",
													"    pm.expect(respJson.locations.opportunityArea.options.length).to.equal(8);",
													"    oaLabels = respJson.locations.opportunityArea.options.map(oa => oa.label);",
													"    pm.expect(oaLabels)",
													"        .to.have.members([",
													"            \"Bolton 001 (E02000984)\",",
													"            \"Bolton 001 (E05000364)\",",
													"            \"Bolton 002 (E02000985)\",",
													"            \"Bolton 002 (E05006937)\",",
													"            \"Bolton 003 (E02000986)\",",
													"            \"Bolton 003 (E05010291)\",",
													"            \"Bolton 004 (E02000987)\",",
													"            \"Bolton 004 (E05010450)\",",
													"        ]);  ",
													"});",
													"",
													"pm.test(\"wards should be correct\", function () {",
													"    pm.expect(respJson.locations.ward.options.length).to.equal(4);",
													"    wardLabels = respJson.locations.ward.options.map(ward => ward.label);",
													"    pm.expect(wardLabels)",
													"        .to.have.members([",
													"            \"Syon\",",
													"            \"Yoxall\",",
													"            \"Rural West York\",",
													"            \"Nailsea Youngwood\",",
													"        ]);   ",
													"});",
													"",
													"pm.test(\"parliamentaryConstituency should be correct\", function () {",
													"    pm.expect(respJson.locations.parliamentaryConstituency.options.length).to.equal(4);",
													"    pcLabels = respJson.locations.parliamentaryConstituency.options.map(pc => pc.label);",
													"    pm.expect(pcLabels)",
													"        .to.have.members([",
													"            \"East Yorkshire\",",
													"            \"Richmond (Yorks)\",",
													"            \"York Central\",",
													"            \"York Outer\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"localEnterprisePartnership should be correct\", function () {",
													"    pm.expect(respJson.locations.localEnterprisePartnership.options.length).to.equal(4);",
													"    lepLabels = respJson.locations.localEnterprisePartnership.options.map(lep => lep.label);",
													"    pm.expect(lepLabels)",
													"        .to.have.members([",
													"            \"Black Country\",",
													"            \"Chesire and Warrington\",",
													"            \"Cornwall and Isles of Scilly\",",
													"            \"Coventry and Warwickshire\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"rscRegion should be correct\", function () {",
													"    pm.expect(respJson.locations.rscRegion.options.length).to.equal(4);",
													"    rscrLabels = respJson.locations.rscRegion.options.map(rscr => rscr.label);",
													"    pm.expect(rscrLabels)",
													"        .to.have.members([",
													"            \"East of England and North-East London\",",
													"            \"East Midlands and the Humber\",",
													"            \"Lancashire and West Yorkshire\",",
													"            \"North of England\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"region should be correct\", function () {",
													"    pm.expect(respJson.locations.region.options.length).to.equal(4);",
													"    regionLabels = respJson.locations.region.options.map(region => region.label);",
													"    pm.expect(regionLabels)",
													"        .to.have.members([",
													"            \"Yorkshire and the Humber\",",
													"            \"North East\",",
													"            \"North West\",",
													"            \"West Midlands\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"localAuthority should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(4);",
													"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
													"    pm.expect(laLabels)",
													"        .to.have.members([",
													"            \"Birmingham\",",
													"            \"Barnsley\",",
													"            \"Greenwich\",",
													"            \"Camden\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"timePeriod should be correct\", function () {",
													"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
													"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
													"    ",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(16);",
													"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(16);",
													"    ",
													"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
													"    pm.expect(years)",
													"        .to.have.members([",
													"            \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",",
													"            \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",",
													"            \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",",
													"            \"2020\",",
													"        ]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject/{{sub1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject",
												"{{sub1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - SUB1 - Birmingham",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0405ef9b-034a-4fe2-ae31-1e541a764473",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.opportunityArea\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.ward\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.parliamentaryConstituency\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localEnterprisePartnership\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.rscRegion\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"filters should be correct\", function () {",
													"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
													"});",
													"",
													"pm.test(\"indicators should be correct\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
													"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
													"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
													"});",
													"",
													"pm.test(\"localAuthority should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(1);",
													"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
													"    pm.expect(laLabels).to.have.members([\"Birmingham\"]);",
													"});",
													"",
													"pm.test(\"timePeriod should be correct\", function () {",
													"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
													"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
													"    ",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5);",
													"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(5);",
													"    ",
													"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
													"    pm.expect(years)",
													"        .to.have.members([",
													"            \"2014\", \"2015\", \"2016\", \"2017\", \"2018\",",
													"        ]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "775ad9ca-c28f-4550-a43e-84ae66664693",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": \"{{sub1_id}}\",\n\t\"locations\": {\n\t\t\"localAuthority\": [\"E08000025\"]\n\t}\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tablebuilder",
					"item": [
						{
							"name": "Tablebuilder - SUB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332b6cd1-e3e8-4c08-8658-18d18f0af1d0",
										"exec": [
											"respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});",
											"",
											"pm.test(\"subjectMeta.filters should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.filters).to.be.an('object').that.is.empty;",
											"});",
											"",
											"pm.test(\"subjectMeta.footnotes should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.footnotes).to.have.deep.members([",
											"        { \"id\": pm.globals.get('sub1_footnote_subject_id'), \"label\": \"SUB1 test footnote subject\" },",
											"        { \"id\": pm.globals.get('sub1_footnote_indicator_id'), \"label\": \"SUB1 test footnote indicator\" },",
											"    ]);",
											"});",
											"",
											"pm.test(\"subjectMeta.indicators should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.indicators.length).to.equal(1);",
											"    pm.expect(respJson.subjectMeta.indicators[0].label).to.equal(\"Admission Numbers\");",
											"    pm.expect(respJson.subjectMeta.indicators[0].unit).to.equal(\"\");",
											"    pm.expect(respJson.subjectMeta.indicators[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
											"});",
											"",
											"pm.test(\"subjectMeta.locations should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.locations.length).to.equal(2);",
											"    var metaLocations = respJson.subjectMeta.locations.map(loc => [loc.label, loc.value]);",
											"    pm.expect(respJson.subjectMeta.locations)",
											"        .to.have.deep.members([",
											"            { \"label\": \"Greenwich\", \"value\": \"E09000011\", \"level\": \"localAuthority\" },",
											"            { \"label\": \"Camden\", \"value\": \"E09000007\", \"level\": \"localAuthority\" },",
											"        ]);",
											"});",
											"",
											"pm.test(\"subjectMeta.publicationName should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.publicationName).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`); ",
											"});",
											"",
											"pm.test(\"subjectMeta.subjectName should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.subjectName).to.equal(\"API test subject\"); ",
											"});",
											"",
											"pm.test(\"subjectMeta.timePeriodRange should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.timePeriodRange)",
											"        .to.have.deep.members([",
											"            { \"code\": \"CY\", \"label\": \"2014\", \"year\": 2014 },",
											"            { \"code\": \"CY\", \"label\": \"2015\", \"year\": 2015 },",
											"            { \"code\": \"CY\", \"label\": \"2016\", \"year\": 2016 },",
											"            { \"code\": \"CY\", \"label\": \"2017\", \"year\": 2017 },",
											"        ]);",
											"});",
											"",
											"pm.test(\"Number of results should be correct\", function () { ",
											"    pm.expect(respJson.results.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"results geographicLevel, filters, and country should be correct\", function () {",
											"    for(var i = 0; i < respJson.results.length; i++) {",
											"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
											"        pm.expect(respJson.results[i].filters).to.be.an('array').that.is.empty;",
											"        pm.expect(respJson.results[i].location.country.name).to.equal(\"England\");",
											"    }",
											"});",
											"",
											"pm.test(\"results Admission Numbers should be correct\", function () {",
											"    var results = respJson.results.map(res => [res.location.localAuthority.name, res.timePeriod, res.measures[pm.globals.get('SUB1_IND_Admission_Numbers')]]);",
											"    pm.expect(results)",
											"            .to.have.deep.members([",
											"                [\"Greenwich\", \"2014_CY\", \"8247\"],",
											"                [\"Camden\", \"2014_CY\", \"1054\"],",
											"                [\"Greenwich\", \"2015_CY\", \"6114\"],",
											"                [\"Camden\", \"2015_CY\", \"9790\"],",
											"                [\"Greenwich\", \"2016_CY\", \"8427\"],",
											"                [\"Camden\", \"2016_CY\", \"3548\"],",
											"                [\"Greenwich\", \"2017_CY\", \"6981\"],",
											"                [\"Camden\", \"2017_CY\", \"4180\"],",
											"            ]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54b1f49d-d601-4379-a055-d695a08828ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subjectId\": \"{{sub1_id}}\",\n    \"locations\": {\n    \t\"localAuthority\": [\n    \t\t\"E09000007\",\n    \t\t\"E09000011\"\n    \t]\n    },\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"CY\",\n    \t\"endYear\": 2017,\n    \t\"endCode\": \"CY\"\n    },\n    \"filters\" : [],\n    \"indicators\": [\n    \t\"{{SUB1_IND_Admission_Numbers}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/tablebuilder/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"tablebuilder",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Footnotes",
					"item": [
						{
							"name": "Get Footnotes - SUB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f18d6a9f-6b66-4d20-b47a-b5fb3039f67a",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"footnotes should be correct\", function () {",
											"    pm.expect(respJson.footnotes.length).to.equal(2);",
											"    var ftnoteSubject = respJson.footnotes.find(ftnote => ftnote.id === pm.globals.get('sub1_footnote_subject_id'));",
											"    pm.expect(ftnoteSubject).to.not.be.undefined;",
											"    pm.expect(ftnoteSubject.content).to.equal(\"SUB1 test footnote subject\");",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].indicatorGroups).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].selected).to.be.true;",
											"    ",
											"    var ftnoteIndicator = respJson.footnotes.find(ftnote => ftnote.id === pm.globals.get('sub1_footnote_indicator_id'));",
											"    pm.expect(ftnoteIndicator).to.not.be.undefined;",
											"    pm.expect(ftnoteIndicator.content).to.equal(\"SUB1 test footnote indicator\");",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].indicatorGroups[pm.globals.get('SUB1_INDGROUP_Default')].indicators[0])",
											"        .to.equal(pm.globals.get('SUB1_IND_Admission_Numbers').toString());",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].selected).to.be.false;",
											"});",
											"",
											"pm.test(\"meta should be correct\", function () {",
											"    pm.expect(Object.keys(respJson.meta)).to.have.members([pm.globals.get('sub1_id').toString()]);",
											"    ",
											"    var sub1_meta = respJson.meta[pm.globals.get('sub1_id')];",
											"    pm.expect(sub1_meta.filters).to.be.an('object').that.is.empty;",
											"    pm.expect(sub1_meta.subjectId).to.equal(pm.globals.get('sub1_id'));",
											"    pm.expect(sub1_meta.subjectName).to.equal(\"API test subject\");",
											"    pm.expect(Object.keys(sub1_meta.indicators)).to.have.members([pm.globals.get('SUB1_INDGROUP_Default').toString()]);",
											"",
											"    var sub1_indgroup = sub1_meta.indicators[pm.globals.get('SUB1_INDGROUP_Default')];",
											"    pm.expect(sub1_indgroup.label).to.equal(\"Default\");",
											"    pm.expect(Object.keys(sub1_indgroup.options)).to.have.members([pm.globals.get('SUB1_IND_Admission_Numbers')]);",
											"    ",
											"    var sub1_ind = sub1_indgroup.options[pm.globals.get('SUB1_IND_Admission_Numbers')];",
											"    pm.expect(sub1_ind.label).to.equal(\"Admission Numbers\");",
											"    pm.expect(sub1_ind.unit).to.equal(\"\");",
											"    pm.expect(sub1_ind.value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2270e83-b0b4-4119-8d6e-8d2c2434257d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filters @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1740052-6f1d-4bac-8327-97ec33e6d585",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 1\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "96b89af9-b31f-4812-acb5-0e03814dd020",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 1\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [\n    \t\"{{7F_AbsenceRatePercentBands_SchoolType}}\"\n    \t],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filters @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "972b6ba2-c6d1-4ed5-91d2-c7fe3b89cf93",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d1f7299-11aa-4ac4-87cc-7efe227fe872",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}/{{create_footnote_filter_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}",
										"{{create_footnote_filter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filter Groups @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4da63ef-114a-4660-b06c-d5be2ac52df9",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_groups_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 2\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b72e990-f5ed-4cb0-af6f-2bd4da25f98a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 2\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [\n    \t\"{{7FG_AbsenceRatePercentBands_SchoolType_Default}}\"\n    ],\n    \"filterItems\": [],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filter Groups @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b373f705-96d0-4a28-9987-783681e2a4dc",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27ee7e51-0136-4773-a37a-e607adbc6153",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}/{{create_footnote_filter_groups_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}",
										"{{create_footnote_filter_groups_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73ced412-9fad-43a4-a8a0-50eb4e58c129",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_items_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 3\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a69c7c5-7115-48db-8dd9-df9dcf246d89",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 3\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_Total}}\"\n    \t],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Footnote Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3338ac03-7fb1-451a-88ed-389a4f353b2f",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"create_footnote_filter_items_id\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 3 - Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc5733a9-571b-4841-b33b-e01f1cde74b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 3 - Updated\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfOverallAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_Special}}\",\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedSecondary}}\",\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedPrimary}}\"\n    ],\n    subjects: [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}/{{create_footnote_filter_items_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}",
										"{{create_footnote_filter_items_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ba798ae-9b7e-4c42-b069-fcd8abf36d87",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0dcb86f3-67b1-4274-b9ab-7e1126ae9d3b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}/{{create_footnote_filter_items_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}",
										"{{create_footnote_filter_items_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e02fad24-1ff6-41e6-b8bb-3b1f0ec392b1",
										"exec": [
											"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "385fad51-dde9-4c98-844d-e504d37a5f89",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}/911c3d2a-8aff-4149-a688-f6455e6db47c",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}",
										"911c3d2a-8aff-4149-a688-f6455e6db47c"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3eb655cc-c04b-47b1-8d3c-cf0ff806827d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "594e2685-22cc-4bdc-9836-96a686534328",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Manage Content",
			"item": [
				{
					"name": "Manage Content Page",
					"item": [
						{
							"name": "Get Manage Content Page data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0adc9846-f0cd-4d42-9bdd-f5cc14bf0be0",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Response should return correct fields\", function () {",
											"    pm.expect(respJson.release).to.exist;",
											"    pm.expect(pm.response.to.have.jsonBody('release.summarySection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.headlinesSection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.keyStatisticsSection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.keyStatisticsSecondarySection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.downloadFiles'));",
											"});",
											"",
											"pm.test(\"release general details should be correct\", function () {",
											"    var release = respJson.release;",
											"    pm.expect(release.id).to.equal(pm.globals.get('release_id'));",
											"    pm.expect(release.title).to.equal(\"Calendar Year 2025\");",
											"    pm.expect(release.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(release.updates).to.exist;",
											"    pm.expect(release.content, 'release.content should be an empty array').to.be.an('array').that.is.empty;",
											"    pm.expect(release.publishScheduled).to.equal(\"2026-01-01\");",
											"    ",
											"    pm.expect(release.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(release.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(release.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test('release.publication details should be correct', function () {",
											"    pm.expect(respJson.release.publication.id).to.equal(pm.globals.get('publication_id'));  ",
											"    pm.expect(respJson.release.publication.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"});",
											"",
											"pm.test(\"release.summarySection should be correct\", function () {",
											"    pm.expect(respJson.release.summarySection.content).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"release.headlinesSection should be correct\", function () {",
											"    pm.expect(respJson.release.headlinesSection.content).to.be.an('array').that.is.empty; ",
											"});",
											"",
											"pm.test(\"release.relatedInformation should be correct\", function () {",
											"    pm.expect(respJson.release.relatedInformation).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Release Note",
					"item": [
						{
							"name": "Add Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49b38545-34fd-47b8-bc53-c3fcf123c621",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () { ",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Number of results to be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Release Note entry should contain the correct details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.id).to.not.be.empty;",
											"    pm.expect(lastItem.id).to.not.equal(\"00000000-0000-0000-0000-000000000000\");",
											"    pm.expect(lastItem.on).to.not.be.empty;",
											"    pm.expect(lastItem.reason).to.equal(\"Update from Postman\");",
											"    ",
											"    pm.globals.set('release_note_id', lastItem.id)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"Update from Postman\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e0dbb6e-d8b5-421a-87df-4de5aa552388",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Number of release notes to be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Release Note entry should contain the correct details\", function () {",
											"    const updatedItem = respJson.find(item => item.id === pm.globals.get(\"release_note_id\"));",
											"    pm.expect(updatedItem).to.not.be.empty;",
											"    pm.expect(updatedItem.on).to.equal(\"2019-07-25T00:00:00\");",
											"    pm.expect(updatedItem.reason).to.equal(\"Release Note updated by Postman\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"on\": \"2019-07-25T00:00:00\",\n    \"reason\": \"Release Note updated by Postman\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note/{{release_note_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note",
										"{{release_note_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0170b40f-8d65-4b28-aaf3-fd77cb862409",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Release Notes array contains one less value than before\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"Release Notes array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"release_note_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note/{{release_note_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note",
										"{{release_note_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Related Information",
					"item": [
						{
							"name": "Add Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6827e98-68b6-4c51-b143-e98505c48bab",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () { ",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the correct details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information 1\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/1\");",
											"    pm.expect(lastItem.id).to.not.be.empty;",
											"    pm.expect(lastItem.id).to.not.equal(\"00000000-0000-0000-0000-000000000000\");",
											"});",
											"",
											"pm.test(\"Store variables for upcoming tests\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.globals.set(\"latest_related_information_id\", lastItem.id);",
											"    pm.globals.set(\"number_of_related_information_items\", respJson.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"http://example.com/1\",\n    \"description\": \"Related Information 1\",\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c61cfba3-a0ed-471c-a5ef-9eb9e4d13880",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the latest details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information 1\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/1\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39fcb40a-829f-4fd0-b678-9ed098f904a2",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the updated details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information updated\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/updated\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"http://example.com/updated\",\n    \"description\": \"Related Information updated\"\n}\n"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information/{{latest_related_information_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information",
										"{{latest_related_information_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef1341ec-99ed-4cbf-b47c-74098a9cda42",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the latest details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information updated\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/updated\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3e9511d-a01f-460c-ad93-c0ec5dceec58",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains one less value than before\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\") - 1);",
											"});",
											"",
											"pm.test(\"Related Information array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"latest_related_information_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information/{{latest_related_information_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information",
										"{{latest_related_information_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6974137c-212b-4aae-9ccc-c12cfb8ea0c4",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains one less value than before\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\") - 1);",
											"});",
											"",
											"pm.test(\"Related Information array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"latest_related_information_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Content",
					"item": [
						{
							"name": "Content Sections",
							"item": [
								{
									"name": "Get Content Sections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9742b4e1-6e64-4e2a-819b-ffb1906f4216",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418d14db-526a-4e63-bda2-f3a58855f1a3",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section1_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new Content Sections 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3ebf7-7cf2-47d5-91a7-b44c64e7224a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should contain single content section\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"    pm.expect(respJson[0].id).to.equal(pm.globals.get('added_content_section1_id'));",
													"    pm.expect(respJson[0].order).to.equal(2);",
													"    pm.expect(respJson[0].heading).to.equal(\"New section\");",
													"    pm.expect(respJson[0].content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58927e0a-8c74-461e-8aa2-052220e9bda3",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section2_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fae99a24-bb17-4aad-85fa-174036be3e94",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section3_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new Content Sections 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bb84c45-07c7-4db0-986a-cd5a0809c97a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(4);",
													"    pm.expect(section1.heading).to.equal(\"New section\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(3);",
													"    pm.expect(section2.heading).to.equal(\"New section\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"New section\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 1 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6a24f5b-3b11-4b3d-a427-f2ba8aa99c87",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section1 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section1 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section1_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section1_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 2 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2308269b-01c2-4c2c-9840-f738cfe3f88d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section2 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section2 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section2_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section2_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 3 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3158d55-7da8-4fa0-82b9-46a3a7f006c8",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section3 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section3 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section3_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section3_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Sections 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c34b3ecf-da7a-4c1e-a32a-6b94437c7d5d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(2);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_content_section2_id}}': 0,\n    '{{added_content_section3_id}}': 1,\n    '{{added_content_section1_id}}': 2,\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Sections Order updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "609dc514-bdc7-4156-ba82-093021a2a75d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(2);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Sections 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af573d13-5329-4a2e-b401-67b6684e3369",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(0);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(1);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_content_section2_id}}': 1,\n    '{{added_content_section3_id}}': 2,\n    '{{added_content_section1_id}}': 0,\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Sections Order updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b549c5f2-0cfb-45e2-bbb9-d639044f0598",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(0);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(1);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Content Section 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7118dba7-7465-4266-82e8-8e7bbeab1275",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78be25ee-630d-4097-9a7a-402c4ebc775b",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section without specifying order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce5d8964-658a-4bac-8be9-c6850e39b53d",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section4_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Content Section added without order specified",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c294519-ff59-4fd5-86f3-2b17a0da9838",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section4_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section4_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Content Blocks",
							"item": [
								{
									"name": "Add Content Section to test Content Blocks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca4b08c4-e0eb-41df-ac22-ec8dd58a4aa2",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"content_section_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HTMLBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c432987-e9ed-421e-958a-a7eef39116d4",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New HTMLBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    ",
													"    pm.globals.set(\"added_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add MarkDown Block",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c64a780b-fc7f-4817-9017-fd87c578ca15",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New MarkDownBlock should be present\", function () {",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    // MarkDownBlocks are deprecated, and so an HtmlBlock is created",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"added_markdownblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'MarkDownBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks added",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "964756bf-715c-4bc9-88c3-e7c7224ec2c2",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content; ",
													"    pm.expect(content.length).to.equal(2);",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(1);",
													"    pm.expect(markDownBlock.heading).to.be.undefined;",
													"    pm.expect(markDownBlock.body).to.be.undefined;",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(2);",
													"    pm.expect(htmlBlock.heading).to.be.undefined;",
													"    pm.expect(htmlBlock.body).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46bf48a1-40be-46f9-acb0-0e3fb6ff6fc8",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The HtmlBlock should be updated\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"added_htmlblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(2);",
													"    pm.expect(respJson.body).to.equal(\"<h1>Update!></h1><p>This is the new body for the HTML Block.<p>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '<h1>Update!></h1><p>This is the new body for the HTML Block.<p>'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update MarkDownBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f29c9329-db0e-4b8f-9b5c-21947d2de619",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The MarkDown Block should show the updated details\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"added_markdownblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '*Update!*\\n\\nThis is the new body for the _MarkDown Block._'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_markdownblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_markdownblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ccceebf-0098-41e2-9562-acd64177f3e9",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content; ",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated, and so HtmlBlocks are created instead",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(1);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Blocks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f74f710e-a201-4e2e-b885-6eb98fa07d9e",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Results should be correct\", function () {",
													"    const markDownBlock = respJson.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated and so create HtmlBlocks",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(2);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = respJson.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_htmlblock_id}}': 1,\n\t'{{added_markdownblock_id}}': 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks order updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418fea35-138a-4ed6-b00a-0fa9c5a438f8",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content;",
													"    pm.expect(content.length).to.equal(2);",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlock is deprecated",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(2);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch MarkDownBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07ce7de3-fad4-4c21-bd1a-62326ebba54b",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Results should be correct\", function () {",
													"    const insetTextBlock = respJson.find(block => block.id === pm.globals.get('added_insettextblock_id'));",
													"    pm.expect(insetTextBlock, 'InsetTextBlock should exist').to.be.undefined;",
													"    ",
													"    const markDownBlock = respJson.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.be.undefined;",
													"    ",
													"    const htmlBlock = respJson.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_markdownblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_markdownblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dd3b422-6fc8-4827-93ab-37daa5263038",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_htmlblock_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Fixed sections",
							"item": [
								{
									"name": "Get fixed sections ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1753abe-c728-440e-8f9c-f80fc98ffe71",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.globals.set('release_summary_section_id', respJson.release.summarySection.id);",
													"pm.globals.set('release_headlines_section_id', respJson.release.headlinesSection.id);",
													"pm.globals.set('release_key_statistics_section_id', respJson.release.keyStatisticsSection.id);",
													"pm.globals.set('release_key_statistics_secondary_section_id', respJson.release.keyStatisticsSecondarySection.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HtmlBlock to summarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daaa7292-cadc-4cb6-9a76-69ded5c5af9b",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New HTMLBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"summary_section_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HtmlBlock to headlinesSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12fecc86-9632-40f6-84ef-d5d08f2f2183",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New MarkDownBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"headlines_section_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_headlines_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_headlines_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update summarySection HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e34be8d-61ca-4d1f-a9e0-33233c52cccd",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The HtmlBlock should be updated\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"summary_section_htmlblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.body).to.equal(\"<b>Html Block HTML!!!!</b>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '<b>Html Block HTML!!!!</b>'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/block/{{summary_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"block",
												"{{summary_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach DataBlock to keyStatisticsSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68a18c67-c016-4666-b651-f6b1c16624e6",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New DataBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.type).to.equal(\"DataBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"key_statistics_section_datablock_id\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentBlockId\": \"{{sub1_datablock1_id}}\",\n    \"order\": 0\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach DataBlock to keyStatisticsSecondarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68c48228-d496-4cee-9317-f61edd9be417",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New DataBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.type).to.equal(\"DataBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"key_statistics_secondary_section_datablock_id\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentBlockId\": \"{{sub1_datablock2_id}}\",\n    \"order\": 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_secondary_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_secondary_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate that blocks were added",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd448276-1b8e-449b-b97b-15a16db2020e",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"summarySection should be correct\", function () {",
													"    const summarySection = respJson.release.summarySection;",
													"    pm.expect(summarySection.id).to.equal(pm.globals.get('release_summary_section_id'));",
													"    pm.expect(summarySection.order).to.equal(0);",
													"    pm.expect(summarySection.content.length).to.equal(1);",
													"    pm.expect(summarySection.content[0].body).to.equal(\"<b>Html Block HTML!!!!</b>\");",
													"    pm.expect(summarySection.content[0].type).to.equal(\"HtmlBlock\");",
													"    pm.expect(summarySection.content[0].id).to.equal(pm.globals.get('summary_section_htmlblock_id'));",
													"    pm.expect(summarySection.content[0].order).to.equal(1);",
													"});",
													"",
													"pm.test(\"headlinesSection should be correct\", function () {",
													"    const headlinesSection = respJson.release.headlinesSection;",
													"    pm.expect(headlinesSection.id).to.equal(pm.globals.get('release_headlines_section_id'));",
													"    pm.expect(headlinesSection.order).to.equal(0);",
													"    pm.expect(headlinesSection.content.length).to.equal(1);",
													"    pm.expect(headlinesSection.content[0].type).to.equal(\"HtmlBlock\");",
													"    pm.expect(headlinesSection.content[0].id).to.equal(pm.globals.get('headlines_section_htmlblock_id'));",
													"    pm.expect(headlinesSection.content[0].order).to.equal(1);",
													"});",
													"",
													"pm.test(\"keyStatisticsSection should be correct\", function () {",
													"    const keyStatsSection = respJson.release.keyStatisticsSection;",
													"    pm.expect(keyStatsSection.id).to.equal(pm.globals.get('release_key_statistics_section_id'));",
													"    pm.expect(keyStatsSection.order).to.equal(0);",
													"    pm.expect(keyStatsSection.content.length).to.equal(1);",
													"    pm.expect(keyStatsSection.content[0].type).to.equal(\"DataBlock\");",
													"    pm.expect(keyStatsSection.content[0].id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(keyStatsSection.content[0].order).to.equal(0);",
													"});",
													"",
													"pm.test(\"keyStatisticsSecondarySection should be correct\", function () {",
													"    const keyStatsSecondarySection = respJson.release.keyStatisticsSecondarySection;",
													"    pm.expect(keyStatsSecondarySection.id).to.equal(pm.globals.get('release_key_statistics_secondary_section_id'));",
													"    pm.expect(keyStatsSecondarySection.order).to.equal(0);",
													"    pm.expect(keyStatsSecondarySection.content.length).to.equal(1);",
													"    pm.expect(keyStatsSecondarySection.content[0].type).to.equal(\"DataBlock\");",
													"    pm.expect(keyStatsSecondarySection.content[0].id).to.equal(pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(keyStatsSecondarySection.content[0].order).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HtmlBlock from summarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a21299e8-ad6d-4314-9f17-e651c5be7668",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/block/{{summary_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"block",
												"{{summary_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HtmlBlock from headlinesSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53508838-86a7-4682-8df5-516001040593",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_headlines_section_id}}/block/{{headlines_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_headlines_section_id}}",
												"block",
												"{{headlines_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch DataBlock from keyStatisticsSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c74e0332-145c-4e0c-9868-e4926c062a84",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_section_id}}/block/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_section_id}}",
												"block",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch DataBlock from keyStatisticsSecondarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56f33c91-b354-4c37-b364-6e21019f7745",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_secondary_section_id}}/block/{{sub1_datablock2_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_secondary_section_id}}",
												"block",
												"{{sub1_datablock2_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate that blocks has been removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22337094-627d-4508-b9a7-2f6159263088",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"summarySection should be correct\", function () {",
													"    const summarySection = respJson.release.summarySection;",
													"    pm.expect(summarySection.id).to.equal(pm.globals.get('release_summary_section_id'));",
													"    pm.expect(summarySection.order).to.equal(0);",
													"    pm.expect(summarySection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"headlinesSection should be correct\", function () {",
													"    const headlinesSection = respJson.release.headlinesSection;",
													"    pm.expect(headlinesSection.id).to.equal(pm.globals.get('release_headlines_section_id'));",
													"    pm.expect(headlinesSection.order).to.equal(0);",
													"    pm.expect(headlinesSection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"keyStatisticsSection should be correct\", function () {",
													"    const keyStatsSection = respJson.release.keyStatisticsSection;",
													"    pm.expect(keyStatsSection.id).to.equal(pm.globals.get('release_key_statistics_section_id'));",
													"    pm.expect(keyStatsSection.order).to.equal(0);",
													"    pm.expect(keyStatsSection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"keyStatisticsSecondarySection should be correct\", function () {",
													"    const keyStatsSecondarySection = respJson.release.keyStatisticsSecondarySection;",
													"    pm.expect(keyStatsSecondarySection.id).to.equal(pm.globals.get('release_key_statistics_secondary_section_id'));",
													"    pm.expect(keyStatsSecondarySection.order).to.equal(0);",
													"    pm.expect(keyStatsSecondarySection.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Data Blocks",
							"item": [
								{
									"name": "Get available data blocks 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad9093d1-54c8-4f07-89ed-8c3ee4a56e54",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"const datablock1 = respJson.find(db => db.id === pm.globals.get('sub1_datablock1_id'));",
													"pm.test(\"datablock1 should be within results\", function () {",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"});",
													"",
													"const datablock2 = respJson.find(db => db.id === pm.globals.get('sub1_datablock2_id'));",
													"pm.test(\"datablock2 should be within results\", function () {",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"datablock1 heading should be correct\", function () {",
													"    pm.expect(datablock1.heading).to.equal(`Admin API test title`);",
													"});",
													"",
													"pm.test(\"datablock1 name should be correct\", function () {",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\"); ",
													"});",
													"",
													"pm.test(\"datablock1 source should be correct\", function () {",
													"    pm.expect(datablock1.source).to.equal(\"Admin API test source\"); ",
													"});",
													"",
													"pm.test(\"datablock1 query should be correct\", function () {",
													"    const dbReq = datablock1.query;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
													"        \"E06000001\",",
													"        \"E06000002\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock1 charts should be correct\", function () {",
													"    pm.expect(datablock1.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock1 table should be correct\", function () {",
													"    const table = datablock1.table;",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    ",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
													"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
													"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E06000002\",",
													"        \"E06000001\",",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});",
													"",
													"pm.test(\"datablock2 heading should be correct\", function () {",
													"    pm.expect(datablock2.heading).to.equal(`Admin API test title 2`);",
													"});",
													"",
													"pm.test(\"datablock2 name should be correct\", function () {",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 source should be correct\", function () {",
													"    pm.expect(datablock2.source).to.equal(\"Admin API test source 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 query should be correct\", function () {",
													"    const dbReq = datablock2.query;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.ward).to.have.members([",
													"        \"E05010291\",",
													"        \"E05010450\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock2 charts should be correct\", function () {",
													"    pm.expect(datablock2.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock2 table should be correct\", function () {",
													"    const table = datablock2.table;",
													"    pm.expect(table.indicators).to.equal(undefined);",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2005_CY\", \"2006_CY\", ",
													"        \"2007_CY\", \"2008_CY\", ",
													"        \"2009_CY\", \"2010_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E05010450\",",
													"        \"E05010291\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a Content Section to attach an available Data Block to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de98fe64-40f9-4971-976c-9e4329b502cd",
												"exec": [
													"pm.test(\"Store environment variables\", function() {",
													"    const respJson = pm.response.json();",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.globals.set(\"datablock_content_section_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach datablock1 to new content section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba4209a5-c828-48af-8b3f-c9e5cdf4e447",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to attach same data block twice 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83703be7-49ec-4a9f-8cbc-3a5f5a29a765",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code should be correct\", function () { ",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error should be correct\", function () {",
													"    pm.expect(respJson.errors[''][0]).to.equal(\"CONTENT_BLOCK_ALREADY_ATTACHED_TO_CONTENT_SECTION\"); ",
													"    pm.expect(respJson.title).to.equal(\"One or more validation errors occurred.\");",
													"    pm.expect(respJson.status).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faf7f009-ab71-4779-a13e-458e5dde464e",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Response should contain unattached datablocks\", function () {",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.exist;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56399413-fa79-48cd-a89a-5303eef227f9",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Content Section should contain the newly attached Data Block\", function () { ",
													"    const datablock = respJson.content[0];",
													"    ",
													"    pm.expect(datablock.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock.type).to.equal(\"DataBlock\");",
													"    pm.expect(datablock.order).to.equal(1);",
													"    pm.expect(datablock.name).to.equal(\"Admin API data block 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach datablock2 to new content section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f918801-5adb-47d9-ad5e-9e4c0778cb03",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(respJson.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock2_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to attach same data block twice 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fe4e00e-06ed-4f5a-b89a-4aeaa54ce27e",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code should be correct\", function () { ",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error should be correct\", function () {",
													"    pm.expect(respJson.errors[''][0]).to.equal(\"CONTENT_BLOCK_ALREADY_ATTACHED_TO_CONTENT_SECTION\"); ",
													"    pm.expect(respJson.title).to.equal(\"One or more validation errors occurred.\");",
													"    pm.expect(respJson.status).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock2_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad133b4c-62c5-427d-a56c-41a9b7d2d527",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"    ",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block  Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18483515-7fbe-4210-8cb7-c1302a751035",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"content should contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(datablock1.order).to.equal(1);",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(datablock2.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach a Data Block from the Content Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c9f1f02-6a72-46fa-bc53-a2cc2573744d",
												"exec": [
													"var respJson;",
													"",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    respJson = pm.response.json();",
													"});",
													"",
													"pm.test(\"Response shouldn't contain datablock1\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Response should contain datablock2\", function () { ",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/block/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"block",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "650f17fb-aaeb-45df-8006-83df730a7035",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Response should contain unattached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.exist;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section attached data blocks are correct",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f41bf876-d306-42c1-8d6e-3aa5aec23189",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"content shouldn't contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach the newly available Data Block to the Content Section with explicit order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb89824-64a8-4a1c-a0aa-e8f301fbb037",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}',\n\t\torder: 1\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "549f8a48-1935-4178-b1d3-56fcdcde5240",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6859cb9-b11f-40ef-a6eb-46dcab857881",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"content should contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(datablock1.order).to.equal(1);",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(datablock2.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove the Content Section to verify Data Blocks aren't deleted as well",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2afaec5-ff42-405c-b630-be3975c94cec",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"New Content Section should be removed\", function () { ",
													"    const section = respJson.find(section => section.id === pm.globals.get('datablock_content_section_id'));",
													"    pm.expect(section).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify that the Data Blocks are available again after deleting the Content Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "658b52cd-1923-4df5-9470-9882d14670f7",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"const datablock1 = respJson.find(db => db.id === pm.globals.get('sub1_datablock1_id'));",
													"pm.test(\"datablock1 should be within results\", function () {",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"});",
													"",
													"const datablock2 = respJson.find(db => db.id === pm.globals.get('sub1_datablock2_id'));",
													"pm.test(\"datablock2 should be within results\", function () {",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"datablock1 heading should be correct\", function () {",
													"    pm.expect(datablock1.heading).to.equal(`Admin API test title`);",
													"});",
													"",
													"pm.test(\"datablock1 name should be correct\", function () {",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\"); ",
													"});",
													"",
													"pm.test(\"datablock1 source should be correct\", function () {",
													"    pm.expect(datablock1.source).to.equal(\"Admin API test source\"); ",
													"});",
													"",
													"pm.test(\"datablock1 query should be correct\", function () {",
													"    const dbReq = datablock1.query;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
													"        \"E06000001\",",
													"        \"E06000002\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock1 charts should be correct\", function () {",
													"    pm.expect(datablock1.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock1 table should be correct\", function () {",
													"    const table = datablock1.table;",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
													"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
													"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E06000002\",",
													"        \"E06000001\",",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});",
													"",
													"pm.test(\"datablock2 heading should be correct\", function () {",
													"    pm.expect(datablock2.heading).to.equal(`Admin API test title 2`);",
													"});",
													"",
													"pm.test(\"datablock2 name should be correct\", function () {",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 source should be correct\", function () {",
													"    pm.expect(datablock2.source).to.equal(\"Admin API test source 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 query should be correct\", function () {",
													"    const dbReq = datablock2.query;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.ward).to.have.members([",
													"        \"E05010291\",",
													"        \"E05010450\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock2 charts should be correct\", function () {",
													"    pm.expect(datablock2.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock2 table should be correct\", function () {",
													"    const table = datablock2.table;",
													"    pm.expect(table.indicators).to.equal(undefined);",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2005_CY\", \"2006_CY\", ",
													"        \"2007_CY\", \"2008_CY\", ",
													"        \"2009_CY\", \"2010_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E05010450\",",
													"        \"E05010291\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete data block 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45bdaf1a-54ce-4793-a9d4-2bbc5ae9cfe8",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"datablocks",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete data block 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c09cac8c-6766-4700-b576-ce14bbd2d0f5",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/{{sub1_datablock2_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"datablocks",
												"{{sub1_datablock2_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release",
			"item": [
				{
					"name": "Check status updates",
					"item": [
						{
							"name": "Update Release - API test publication - 2025",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1124af38-d829-4cfc-97c8-31bd117fee88",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"HigherLevelReview\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Higher review\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8201bfe-e111-4ea9-96dc-5dea664b6f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"typeId\": \"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\",\n\t\"releaseName\": \"2025\",\n\t\"timePeriodCoverage\": {\n\t\t\"value\": \"AY\"\n\t},\n\t\"publishScheduled\": \"2027-01-01\",\n\t\"nextReleaseDate\": {\n\t\t\"day\": 1,\n\t\t\"month\": 1,\n\t\t\"year\": 2028\n\t},\n\t\"status\": \"HigherLevelReview\",\n\t\"internalReleaseNote\": \"API test note - Higher review\"\n\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release - API test publication - 2025 - Check 1st change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d3f85bd-2488-4872-b2f7-82e852eb0a06",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"HigherLevelReview\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Higher review\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2313df96-f1aa-40b6-8edc-c3bb4661a4a4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecf8be7e-553d-465e-b307-afee974ca618",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    })",
											"});",
											"",
											"pm.test(\"Should contain API test release\", function() {",
											"    var testRelease = respJson.find(release => release.id === pm.globals.get('release_id'));",
											"    pm.expect(testRelease).to.not.be.undefined;",
											"    pm.expect(testRelease.title).to.equal(\"Academic Year 2025/26\");",
											"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
											"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
											"    pm.expect(testRelease.publishScheduled).to.equal(\"2027-01-01\");",
											"    pm.expect(testRelease.live).to.equal(false);",
											"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"AY\");",
											"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
											"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(testRelease.status).to.equal(\"HigherLevelReview\");",
											"    pm.expect(testRelease.internalReleaseNote).to.equal(\"API test note - Higher review\");",
											"    //pm.expect(testRelease.draftComments.length).to.equal(3); // Not implemented!",
											"    //pm.expect(testRelease.higherReviewComments.length).to.equal(1); // Not implemented!",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4af4d498-aedc-4033-9e9e-28e000458423",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd2c0c3b-3efd-4ed3-ba28-ba0cf9aa22d7",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Shouldn't contain API test publication - 2025 release\", function() {",
											"    pm.expect(",
											"        respJson.find(release => release.id === pm.globals.get('release_id')))",
											"        .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.equal(\"Approved\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "445d127e-3a70-4911-9761-272c2b50ac1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release status - API test publication - 2025 - Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3225f522-f165-4552-8dc7-eadd1d834887",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed64337e-2390-4e0d-8155-c1cc199e6536",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n\t\"typeId\": \"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\",\n\t\"releaseName\": \"2025\",\n\t\"timePeriodCoverage\": {\n\t\t\"value\": \"AY\"\n\t},\n\t\"publishScheduled\": \"2027-01-01\",\n\t\"nextReleaseDate\": {\n\t\t\"day\": 1,\n\t\t\"month\": 1,\n\t\t\"year\": 2028\n\t},\n\t\"status\": \"Draft\",\n\t\"internalReleaseNote\": \"API test note - Draft\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release - API test publication - 2025 - Check 2nd change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0ec6aa2-defb-4ba2-be63-d5108429fe48",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0c1ceaf-1835-4a9f-bece-48d73310a851",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release status - API test publication - 2025 - Approved",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3df43787-e863-4dd9-8ba0-6284640b630c",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Approved\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Approved\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a20ace6-3120-4283-bf64-39db4815273a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n\t\"typeId\": \"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\",\n\t\"releaseName\": \"2025\",\n\t\"timePeriodCoverage\": {\n\t\t\"value\": \"AY\"\n\t},\n\t\"publishScheduled\": \"2027-01-01\",\n\t\"nextReleaseDate\": {\n\t\t\"day\": 1,\n\t\t\"month\": 1,\n\t\t\"year\": 2028\n\t},\n\t\"status\": \"Approved\",\n\t\"internalReleaseNote\": \"API test note - Approved\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release - API test publication - 2025 - Check 3rd change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15291af7-9799-4656-8058-ee773d3c3636",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should be correct\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('release_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"AY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2027-01-01\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Approved\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Approved\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97c7b648-ab72-4e47-b875-2ef9c70a8268",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d85ade59-203a-494a-b1de-274dcbcd9d4b",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    })",
											"});",
											"",
											"pm.test(\"Shouldn't contain API test publication - 2025 release\", function() {",
											"    pm.expect(",
											"        respJson.find(release => release.id === pm.globals.get('release_id')))",
											"        .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "002d7d67-ff2c-4378-8e7a-cb6d8b7a54d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 2 - TESTS STOP HERE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19ca12eb-385c-4cb2-9407-3e0c843834eb",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.equal(\"Approved\");",
											"    });",
											"});",
											"",
											"pm.test(\"Should contain API test release\", function() {",
											"    var testRelease = respJson.find(release => release.id === pm.globals.get('release_id'));",
											"    pm.expect(testRelease).to.not.be.undefined;",
											"    pm.expect(testRelease.title).to.equal(\"Academic Year 2025/26\");",
											"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
											"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2028\");",
											"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
											"    pm.expect(testRelease.publishScheduled).to.equal(\"2027-01-01\");",
											"    pm.expect(testRelease.live).to.equal(false);",
											"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"AY\");",
											"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Academic Year\");",
											"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
											"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(testRelease.status).to.equal(\"Approved\");",
											"    pm.expect(testRelease.internalReleaseNote).to.equal(\"API test note - Approved\");",
											"    //pm.expect(testRelease.draftComments.length).to.equal(3); // Not implemented!",
											"    //pm.expect(testRelease.higherReviewComments.length).to.equal(1); // Not implemented!",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6173d93b-6acf-4318-bfa0-2452bb70fd24",
										"exec": [
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data files upload - API test release - 2025",
					"item": [
						{
							"name": "Upload data file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85e54282-ddbf-46dd-9282-41e4a72ca60c",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should return some results\", function () {",
											"    pm.expect(respJson.length).to.equal(2);    ",
											"});",
											"",
											"pm.test(\"Metadata file response should be correct\", function () {",
											"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
											"    pm.expect(respJson[0].size).to.equal(\"143 B\");",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"    pm.expect(respJson[0].rows).to.equal(2);",
											"    //pm.expect(respJson[0].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});",
											"",
											"pm.test(\"Data file response should be correct\", function () {",
											"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[1].name).to.equal(\"Admin API test data upload\");",
											"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
											"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
											"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
											"    pm.expect(respJson[1].rows).to.equal(161);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "files/admin-api-test.csv"
										},
										{
											"key": "metaFile",
											"type": "file",
											"src": "files/admin-api-test.meta.csv"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20data%20upload"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload data file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61a5cf24-fb62-434b-94b4-c75ed3bd2fa6",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal('CANNOT_OVERWRITE_DATA_FILE');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "files/admin-api-test.csv"
										},
										{
											"key": "metaFile",
											"type": "file",
											"src": "files/admin-api-test.meta.csv"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20data%20upload"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get data files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e05881e-f61d-472e-afb8-48404e0b9a3a",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should return some results\", function () {",
											"    pm.expect(respJson.length).to.equal(2);    ",
											"});",
											"",
											"pm.test(\"Metadata file response should be correct\", function () {",
											"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
											"    pm.expect(respJson[0].size).to.equal(\"143 B\");",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"    pm.expect(respJson[0].rows).to.equal(2);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});",
											"",
											"pm.test(\"Data file response should be correct\", function () {",
											"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[1].name).to.equal(\"Admin API test data upload\");",
											"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
											"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
											"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
											"    pm.expect(respJson[1].rows).to.equal(161);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete data file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eea03385-9185-431a-86b2-34fdc6aab611",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data",
										"admin-api-test.csv",
										"Admin%20API%20test%20data%20upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete data file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d1536fd-54bd-4744-9925-359c15eee912",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data",
										"admin-api-test.csv",
										"Admin%20API%20test%20data%20upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get data files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d49764c7-bdc6-4182-869c-1f6111246c65",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7b569ca-8d95-4176-9b16-612a79909f54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15975886-fb59-4896-b69a-cfd7c2944302",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7432b000-e436-44b8-82ee-72812e84b5d8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ancillary files - API test publicaiton - 2025",
					"item": [
						{
							"name": "Upload ancillary file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b03a9d8c-16b1-4875-8c93-d409d76cdc9a",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"doc\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test ancillary file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/ancillary/admin-api-test-ancillary.doc`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"28 B\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-ancillary.doc"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary?name=Admin%20API%20test%20ancillary%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20ancillary%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload ancillary file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ef6ecf0-8878-4fae-a1db-b3608352479d",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"errors should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"CANNOT_OVERWRITE_FILE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-ancillary.doc"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary?name=Admin%20API%20test%20ancillary%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20ancillary%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ancillary files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "692c61fb-1244-4418-b3c3-5410a0f23a9a",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"doc\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test ancillary file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/ancillary/admin-api-test-ancillary.doc`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"28 B\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ancillary file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c998408c-66b8-47c7-a918-9857e886fc30",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary/admin-api-test-ancillary.doc",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary",
										"admin-api-test-ancillary.doc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ancillary file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64d4daa8-69c1-4aec-9999-ed713b667e8b",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary/admin-api-test-ancillary.doc",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary",
										"admin-api-test-ancillary.doc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ancillary files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d10f3d0-b447-4b16-9a1d-7f8e863c0aae",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a050c4a-093e-404d-8285-8fa208a87e11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcc45b56-f454-4520-90ad-ddcf4b79788a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b17307dd-fd50-4a71-b644-949770de609b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Chart files - API test publicaiton - 2025",
					"item": [
						{
							"name": "Upload chart file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1b1f4d5-738d-4c38-8cd2-0a76bedbfbb0",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"png\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test chart file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/chart/admin-api-test-chart.png`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"823 Kb\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-chart.png"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart?name=Admin%20API%20test%20chart%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20chart%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload chart file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2644c1b-6d76-4564-b7b5-cc2856d4aaea",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"errors should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"CANNOT_OVERWRITE_FILE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-chart.png"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart?name=Admin%20API%20test%20chart%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20chart%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get chart files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8148237c-fafd-4674-bab8-7132db27c489",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"png\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test chart file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/chart/admin-api-test-chart.png`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"823 Kb\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete chart file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a31689-6f8c-41f5-8d6d-c8d43cb7e424",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart/admin-api-test-chart.png",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart",
										"admin-api-test-chart.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete chart file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cec5bdd0-2760-40a4-b3f4-941fdbd708da",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart/admin-api-test-chart.png",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart",
										"admin-api-test-chart.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get chart files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a7eab37-9efb-4dcd-9e6f-7eab097265f0",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2214381f-eafb-4cab-ac57-96bcb20c794c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "151f2a2a-7f76-490c-8dde-bd86c832bd7b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "507d60cd-0f2e-46ad-99b8-141761a71b4c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DataBlock - API test publication - 2025",
					"item": [
						{
							"name": "Create DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53255d70-3895-4d7d-a213-911aa07f9979",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.globals.set(\"datablock_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"table\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});",
											"",
											"pm.test(\"query should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.subjectId\"));",
											"    pm.expect(respJson.query.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.timePeriod\"));",
											"    pm.expect(respJson.query.timePeriod.startYear).to.equal(\"2013\");",
											"    pm.expect(respJson.query.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.query.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.query.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.filters\"));",
											"    pm.expect(respJson.query.filters.length).to.equal(1);",
											"    pm.expect(respJson.query.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.indicators\"));",
											"    pm.expect(respJson.query.indicators.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.country\"));",
											"    pm.expect(respJson.query.country[0]).to.equal(\"E92000001\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.localAuthority\"));",
											"    pm.expect(respJson.query.localAuthority.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"query.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"table should be correct\", function () {",
											"    pm.expect(respJson.table.length).to.equal(1);",
											"    pm.expect(respJson.table.indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columns\"));",
											"    pm.expect(respJson.table.tableHeaders.columns.length).to.equal(2);",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.rowGroups[0].length).to.equal(4);",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rows\"));",
											"    pm.expect(respJson.table.tableHeaders.rows.length).to.equal(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2af2ba8e-726f-42be-8d6c-8fe1223965fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"query\": {\n\t\t\"localAuthority\": [\n\t\t\t\"E09000002\",\n\t\t\t\"E09000003\",\n\t\t\t\"E08000016\"\n\t\t],\n\t\t\"country\": [\"E92000001\"],\n\t\t\"subjectId\":\"8\",\n\t\t\"indicators\": [\n\t\t\t\"164\",\n\t\t\t\"165\",\n\t\t\t\"163\"\n\t\t],\n\t\t\"filters\": [\"210\"],\n\t\t\"timePeriod\": {\n\t\t\t\"startYear\":2013,\n\t\t\t\"startCode\":\"HT6\",\n\t\t\t\"endYear\":2014,\n\t\t\t\"endCode\":\"HT6\"\n\t\t}\n\t},\n\t\"heading\":\"Admin API Create Datablock test\",\n\t\"table\": [\n\t\t{ \n\t\t\t\"indicators\":[],\n\t\t\t\"tableHeaders\": {\n\t\t\t\t\"columnGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"210\",\n\t\t\t\t\t\t\t\"label\":\"Pupil Referral Unit\",\n\t\t\t\t\t\t\t\"isTotal\":false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"rowGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E92000001\",\n\t\t\t\t\t\t\t\"label\":\"England\",\n\t\t\t\t\t\t\t\"level\":\"country\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000002\",\n\t\t\t\t\t\t\t\"label\":\"Barking and Dagenham\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000003\",\n\t\t\t\t\t\t\t\"label\":\"Barnet\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E08000016\",\n\t\t\t\t\t\t\t\"label\":\"Barnsley\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"columns\":[ \n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2013_HT6\",\n\t\t\t\t\t\t\"label\":\"2013/14\",\n\t\t\t\t\t\t\"year\":2013,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2014_HT6\",\n\t\t\t\t\t\t\"label\":\"2014/15\",\n\t\t\t\t\t\t\"year\":2014,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"rows\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"163\",\n\t\t\t\t\t\t\"label\":\"Unauthorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"164\",\n\t\t\t\t\t\t\"label\":\"Authorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"165\",\n\t\t\t\t\t\t\"label\":\"Overall absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlock by created Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "733800b9-6a1c-466b-8ced-d8bca4ef9fad",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"table\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});",
											"",
											"pm.test(\"query should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.subjectId\"));",
											"    pm.expect(respJson.query.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.timePeriod\"));",
											"    pm.expect(respJson.query.timePeriod.startYear).to.equal(\"2013\");",
											"    pm.expect(respJson.query.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.query.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.query.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.filters\"));",
											"    pm.expect(respJson.query.filters.length).to.equal(1);",
											"    pm.expect(respJson.query.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.indicators\"));",
											"    pm.expect(respJson.query.indicators.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.country\"));",
											"    pm.expect(respJson.query.country[0]).to.equal(\"E92000001\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.localAuthority\"));",
											"    pm.expect(respJson.query.localAuthority.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"query.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"table should be correct\", function () {",
											"    pm.expect(respJson.table.length).to.equal(1);",
											"    pm.expect(respJson.table.indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columns\"));",
											"    pm.expect(respJson.table.tableHeaders.columns.length).to.equal(2);",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.rowGroups[0].length).to.equal(4);",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rows\"));",
											"    pm.expect(respJson.table.tableHeaders.rows.length).to.equal(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ee28ccf-f620-456f-9a83-1e679198f2d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlocks by Release 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5eecd39c-1eda-44b8-b244-1d2ba7d26a18",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Number of results should be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1); ",
											"});",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson[0].id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson[0].heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c454b655-bd98-4c85-af6e-4b8553cae6d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04f1b21d-6f2f-4551-8e0e-040e4a265d76",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"query\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"table\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test renamed!\"); ",
											"});",
											"",
											"pm.test(\"query should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.subjectId\"));",
											"    pm.expect(respJson.query.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.timePeriod\"));",
											"    pm.expect(respJson.query.timePeriod.startYear).to.equal(\"2014\");",
											"    pm.expect(respJson.query.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.query.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.query.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.filters\"));",
											"    pm.expect(respJson.query.filters.length).to.equal(1);",
											"    pm.expect(respJson.query.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.indicators\"));",
											"    pm.expect(respJson.query.indicators.length).to.equal(1);",
											"    pm.expect(respJson.query.indicators[0]).to.equal(\"164\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"query.localAuthority\"));",
											"    pm.expect(respJson.query.localAuthority.length).to.equal(1);",
											"    pm.expect(respJson.query.localAuthority[0]).to.equal(\"E09000002\");",
											"",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"query.country\"));",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"query.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"table should be correct\", function () {",
											"    pm.expect(respJson.table.length).to.equal(1);",
											"    pm.expect(respJson.table.indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.columns\"));",
											"    pm.expect(respJson.table.tableHeaders.columns.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.columns[0].label).to.equal(\"2014/15\");",
											"    pm.expect(respJson.table.tableHeaders.columns[0].value).to.equal(\"2014_HT6\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.table.tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.rowGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.rowGroups[0][0].label).to.equal(\"Barking and Dagenham\");",
											"    pm.expect(respJson.table.tableHeaders.rowGroups[0][0].value).to.equal(\"E09000002\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"table.tableHeaders.rows\"));",
											"    pm.expect(respJson.table.tableHeaders.rows.length).to.equal(1);",
											"    pm.expect(respJson.table.tableHeaders.rows[0].label).to.equal(\"Authorised absence rate\");",
											"    pm.expect(respJson.table.tableHeaders.rows[0].value).to.equal(\"164\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19df0c91-5366-4ac0-909a-740a791e4445",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"query\": {\n\t\t\"localAuthority\": [\n\t\t\t\"E09000002\",\n\t\t],\n\t\t\"subjectId\":\"8\",\n\t\t\"indicators\": [\n\t\t\t\"164\"\n\t\t],\n\t\t\"filters\": [\"210\"],\n\t\t\"timePeriod\": {\n\t\t\t\"startYear\":2014,\n\t\t\t\"startCode\":\"HT6\",\n\t\t\t\"endYear\":2014,\n\t\t\t\"endCode\":\"HT6\"\n\t\t}\n\t},\n\t\"heading\":\"Admin API Create Datablock test renamed!\",\n\t\"table\": [\n\t\t{ \n\t\t\t\"indicators\":[],\n\t\t\t\"tableHeaders\": {\n\t\t\t\t\"columnGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"210\",\n\t\t\t\t\t\t\t\"label\":\"Pupil Referral Unit\",\n\t\t\t\t\t\t\t\"isTotal\":false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"rowGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000002\",\n\t\t\t\t\t\t\t\"label\":\"Barking and Dagenham\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"columns\":[ \n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2014_HT6\",\n\t\t\t\t\t\t\"label\":\"2014/15\",\n\t\t\t\t\t\t\"year\":2014,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"rows\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"164\",\n\t\t\t\t\t\t\"label\":\"Authorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlocks by Release 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67ac642f-81d7-4a4c-912d-7b051bd06d51",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Number of results should be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1); ",
											"});",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson[0].id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson[0].heading).to.equal(\"Admin API Create Datablock test renamed!\"); ",
											"});",
											"",
											"pm.test(\"query should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query.subjectId\"));",
											"    pm.expect(respJson[0].query.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query.timePeriod\"));",
											"    pm.expect(respJson[0].query.timePeriod.startYear).to.equal(\"2014\");",
											"    pm.expect(respJson[0].query.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson[0].query.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson[0].query.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query.filters\"));",
											"    pm.expect(respJson[0].query.filters.length).to.equal(1);",
											"    pm.expect(respJson[0].query.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query.indicators\"));",
											"    pm.expect(respJson[0].query.indicators.length).to.equal(1);",
											"    pm.expect(respJson[0].query.indicators[0]).to.equal(\"164\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].query.localAuthority\"));",
											"    pm.expect(respJson[0].query.localAuthority.length).to.equal(1);",
											"    pm.expect(respJson[0].query.localAuthority[0]).to.equal(\"E09000002\");",
											"",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"[0].query.country\"));",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"[0].query.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson[0].charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"table should be correct\", function () {",
											"    pm.expect(respJson[0].table.length).to.equal(1);",
											"    pm.expect(respJson[0].table.indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table.tableHeaders.columnGroups\"));",
											"    pm.expect(respJson[0].table.tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table.tableHeaders.columns\"));",
											"    pm.expect(respJson[0].table.tableHeaders.columns.length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.columns[0].label).to.equal(\"2014/15\");",
											"    pm.expect(respJson[0].table.tableHeaders.columns[0].value).to.equal(\"2014_HT6\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table.tableHeaders.rowGroups\"));",
											"    pm.expect(respJson[0].table.tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.rowGroups[0].length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.rowGroups[0][0].label).to.equal(\"Barking and Dagenham\");",
											"    pm.expect(respJson[0].table.tableHeaders.rowGroups[0][0].value).to.equal(\"E09000002\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].table.tableHeaders.rows\"));",
											"    pm.expect(respJson[0].table.tableHeaders.rows.length).to.equal(1);",
											"    pm.expect(respJson[0].table.tableHeaders.rows[0].label).to.equal(\"Authorised absence rate\");",
											"    pm.expect(respJson[0].table.tableHeaders.rows[0].value).to.equal(\"164\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61a28fa5-0923-45b4-9c41-1b98643852d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e5edf39-8744-431a-81ed-2a181d10075e",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58a47b02-ed1f-4e37-925a-a61d3b2d1704",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete DataBlock invalid id - TESTS STOP HERE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71c07508-95c7-402a-a1eb-593a230de921",
										"exec": [
											"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40480127-274c-44de-a897-3323b62b5d96",
										"exec": [
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/815c6a6d-fbad-4f76-a226-13b7e1602f7e",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"815c6a6d-fbad-4f76-a226-13b7e1602f7e"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "522434d2-0939-4670-9f84-4ac2e91538dc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "168dc12f-c482-496d-a69a-bf207c79d9b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create release",
					"item": [
						{
							"name": "Create new release",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f04b7961-a86e-440e-aa1b-d965b47ba2e5",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.globals.set(\"create_new_release_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"coverageTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"yearTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"typeId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"nextReleaseDate.year\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publishScheduled\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"live\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"latestRelease\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"contact.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"draftComments\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"higherReviewComments\"));",
											"});",
											"",
											"pm.test(\"title / releaseName / coverageTitle should should be correct\", function () { ",
											"    pm.expect(respJson.title).to.equal(\"January 2040\");",
											"    pm.expect(respJson.releaseName).to.equal(\"2040\");",
											"    pm.expect(respJson.coverageTitle).to.equal(\"January\");",
											"});",
											"",
											"pm.test(\"publicationId and publicationTitle should be correct\", function () {",
											"    pm.expect(respJson.publicationId).to.equal('01447b0c-791c-4526-8a6c-8451cbcd4465');",
											"    pm.expect(respJson.publicationTitle).to.equal('Admin API test publication');",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2042\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"3\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"3\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2041-03-03\");",
											"});",
											"",
											"pm.test(\"live should be correct\", function () {",
											"    pm.expect(respJson.live).to.equal(false); ",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"M1\");",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"January\");",
											"});",
											"",
											"pm.test(\"latestRelease should be correct\", function () {",
											"    pm.expect(respJson.latestRelease).to.equal(false);  ",
											"})",
											"",
											"pm.test(\"type should be correct\", function () {",
											"    pm.expect(respJson.type.id).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"    pm.expect(respJson.type.title).to.equal(\"Official Statistics\");",
											"})",
											"",
											"pm.test(\"contact should be correct\", function () {",
											"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(respJson.contact.teamName).to.equal(\"School absence and exclusions team\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function () {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "580831f9-c22f-4cd4-90da-bfa124887194",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"publicationId\": \"01447b0c-791c-4526-8a6c-8451cbcd4465\",\n\t\"templateReleaseId\": \"\",\n\t\"timePeriodCoverage\": {\n\t\t\"value\": \"M1\"\n\t},\n\t\"releaseName\":2040,\n\t\"publishScheduled\":\"2041-03-03\",\n\t\"nextReleaseDate\":{\n\t\t\"day\":3,\n\t\t\"month\":3,\n\t\t\"year\":2042\n\t},\n\t\"typeId\":\"9d333457-9132-4e55-ae78-c55cb3673d7c\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/publications/{{publication_id}}/releases",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"publications",
										"{{publication_id}}",
										"releases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7278f9e-eeac-41df-8f9c-6980ff76b275",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        pm.expect(respJson[i].status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    }",
											"});",
											"",
											"pm.test(\"Should contain API test publication - January 2040 release\", function() {",
											"    var foundApiTestRelease = false;",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        if(respJson[i].id == pm.globals.get('create_new_release_id')) {",
											"            foundApiTestRelease = true;",
											"            pm.expect(respJson[i].publicationTitle).to.equal(\"Admin API test publication\");",
											"            pm.expect(respJson[i].title).to.equal(\"January 2040\");",
											"            pm.expect(respJson[i].publicationId).to.equal(\"01447b0c-791c-4526-8a6c-8451cbcd4465\");",
											"            pm.expect(respJson[i].coverageTitle).to.equal(\"January\");",
											"            pm.expect(respJson[i].yearTitle).to.equal(\"2040\");",
											"            pm.expect(respJson[i].typeId).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"            pm.expect(respJson[i].nextReleaseDate.year).to.equal(\"2042\");",
											"            pm.expect(respJson[i].publishScheduled).to.equal(\"2041-03-03\");",
											"            pm.expect(respJson[i].live).to.equal(false);",
											"            pm.expect(respJson[i].timePeriodCoverage.value).to.equal(\"M1\");",
											"            pm.expect(respJson[i].latestRelease).to.equal(false);",
											"            pm.expect(respJson[i].type.id).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"            pm.expect(respJson[i].type.title).to.equal(\"Official Statistics\");",
											"            pm.expect(respJson[i].contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"            pm.expect(respJson[i].status).to.equal(\"Draft\");",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].draftComments`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].higherReviewComments`));",
											"        }",
											"    }",
											"    pm.expect(foundApiTestRelease).to.equal(true, \"Couldn't find API test publication - January 2040\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c115c7da-46b5-438b-9b38-800bf8a9d540",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c857d5e-1c5f-4302-b03e-ee132fdce074",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Shouldn't contain API test publication - January 2040 release\", function() {",
											"    var foundApiTestRelease = false;",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        if(respJson[i].id == pm.globals.get('create_new_release_id')) {",
											"            foundApiTestRelease = true;",
											"        }",
											"    }",
											"    pm.expect(foundApiTestRelease).to.equal(false, \"Response shouldn't contain API test publication - January 2040!\");",
											"});",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        pm.expect(respJson[i].status).to.equal(\"Approved\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "633210ee-ce95-45d8-8cb4-b0fefe66bfb1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release - Data File uploads",
			"item": [
				{
					"name": "Upload data file - invalid (meta header includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3469a42f-360d-4e33-9001-75ccac784a23",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file_headings.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file_headings.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_metadata_header",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_metadata_header"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta header includes quotes) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d420c6a2-679e-4b27-8038-63a935e43b01",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_metadata_file_headings.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_metadata_file_headings.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta incorrect values)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "655f49f4-d79e-454e-9a7f-b01da5826e67",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_data_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_data_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_values_in_metadata_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_values_in_metadata_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta incorrect values) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bc2a746-cc59-439f-be7c-52d6e689af28",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_data_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_data_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta row includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6791a460-7a4c-483f-b60e-402805cb9420",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_metadata_row",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_metadata_row"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta row includes quotes) - check status Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5edbadbd-6c17-4b07-8a9a-d839e48bdfe0",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "332cddd7-91a2-4b57-b572-c95c5d4d2818",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_data_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_data_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file includes quotes) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02f72273-c680-4d82-bfed-2882c14cfe4d",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected metadata)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "123f100e-8c68-4a29-9436-af8c6b02c12e",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_metadata_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_metadata_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_metadata",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_metadata"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected metadata) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b03e27ce-3f40-437e-9df7-ced7e5257028",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_colums_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_colums_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f98d6e78-3c38-4fc7-aa2d-bc334fec6489",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_columns_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_columns_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8af75a8b-37e2-48d5-bbe8-92f1bddd411c",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_columns_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_columns_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected number of columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43027d56-207c-40f8-b65b-e0e321ed78f5",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_number_of_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_number_of_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected number of columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "946494e1-c8d3-481f-91fa-79b3a0925c12",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_number_of_columns_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_number_of_columns_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has unexpected number of columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe0e9f77-7aac-4df1-bbae-15860f06fc00",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_unexpected_number_of_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_unexpected_number_of_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has unexpected number of columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a83e8df-f7ef-4b82-a97d-01ab69fac713",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_number_of_columns_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_number_of_columns_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid geographic level)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99c3331a-0421-474e-9729-f4d2a1667904",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_geographic_level_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_geographic_level_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_invalid_geographic_level",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_invalid_geographic_level"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid geographic level) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a2932fa-fc5f-46c7-a46b-831f15531350",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_geographic_level_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_geographic_level_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid time identifier)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43bc9a4a-35d4-48b4-9eea-ad41b85b004f",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_time_identifier_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_time_identifier_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_invalid_time_identifier",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_invalid_time_identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid time identifier) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afe2fdc9-f57a-47c0-a662-2cc3fa7cce3f",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_time_identifier_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_time_identifier_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time period column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "165fc178-701b-4d1c-a168-a63f899b8730",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_period_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_period_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_time_period_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_time_period_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time period column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b0c148a-b069-492d-aeec-fb1f4716c2a6",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_time_identifier_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_time_identifier_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time identifier column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b33e687e-6989-4598-999c-f3baa09b4032",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_time_identifier_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_time_identifier_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time identifier column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c92a62f7-5160-4d3e-9c0a-aa94713c19a7",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_time_identifier_column_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_time_identifier_column_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing geographic level column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1deba36-6986-4a8e-b533-c01dbfdd4639",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_geographic_level_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_geographic_level_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing geographic level column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe1f9819-68a6-4a0d-a22f-adc44cff846f",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_geographic_level_column_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_geographic_level_column_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing observational unit column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62b08da6-a5cf-4694-9f4b-c9211a7599c3",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_observational_units_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_observational_units_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_observational_unit_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_observational_unit_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing observational unit column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b11f5648-9d6b-4f57-8af9-4da096edd8c5",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_observational_units_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_observational_units_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing columns as specified in the metadata file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c5dffd5-4fc2-49e4-b74b-614eb0e55d15",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_columns_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_columns_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_columns_from_the_metadata_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_columns_from_the_metadata_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing columns as specified in the metadata file) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2aed85b7-28db-42a9-a9ce-c1551ceaa3ee",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_columns_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_columns_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release - Small File uploads",
			"item": [
				{
					"name": "Upload small file - 3digit_illegal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/3digit_illegal.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/3digit_illegal.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=3digit_illegal",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "3digit_illegal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 3digit_illegal - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/3digit_illegal.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"3digit_illegal.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_overlapping",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_overlapping.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_overlapping.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4and6digit_overlapping",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4and6digit_overlapping"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_overlapping - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4and6digit_overlapping.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4and6digit_overlapping.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4and6digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4and6digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4and6digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4and6digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_duplicate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_duplicate.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_duplicate.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_duplicate",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_duplicate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_duplicate - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_duplicate.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_duplicate.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_extreme_gaps",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_extreme_gaps.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_extreme_gaps.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_extreme_gaps",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_extreme_gaps"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_extreme_gaps - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_extreme_gaps.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_extreme_gaps.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_dodgy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_dodgy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_dodgy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=6digit_dodgy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "6digit_dodgy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_dodgy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/6digit_dodgy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"6digit_dodgy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=6digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "6digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/6digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"6digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 7digit_iffy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/7digit_iffy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/7digit_iffy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=7digit_iffy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "7digit_iffy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 7digit_iffy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/7digit_iffy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"7digit_iffy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_geographies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_geographies"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_geographies.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_geographies.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies_messy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies_messy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies_messy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_geographies_messy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_geographies_messy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies_messy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_geographies_messy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_geographies_messy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_empty",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_empty.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_empty.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_year_empty",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_year_empty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_empty - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_year_empty.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_year_empty.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_identifier_blank",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_identifier_blank.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_identifier_blank.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_year_identifier_blank",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_year_identifier_blank"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_identifier_blank - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_year_identifier_blank.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_year_identifier_blank.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=combined_terms",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "combined_terms"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/combined_terms.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"combined_terms.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms_duplicates",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms_duplicates.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms_duplicates.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=combined_terms_duplicates",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "combined_terms_duplicates"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms_duplicates - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/combined_terms_duplicates.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"combined_terms_duplicates.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - different_time_years",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/different_time_years.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/different_time_years.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=different_time_years",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "different_time_years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - different_time_years - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/different_time_years.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"different_time_years.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_duplicate_gaps",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_duplicate_gaps.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_duplicate_gaps.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=financial_year_duplicate_gaps",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "financial_year_duplicate_gaps"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_duplicate_gaps - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/financial_year_duplicate_gaps.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"financial_year_duplicate_gaps.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=financial_year_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "financial_year_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/financial_year_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"financial_year_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LAD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LAD.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LAD.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LAD",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LAD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LAD - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LAD.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LAD.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA_with_SOME_regional_columns",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA_with_SOME_regional_columns.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA_with_SOME_regional_columns.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LA_with_SOME_regional_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LA_with_SOME_regional_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA_with_SOME_regional_columns - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LA_with_SOME_regional_columns.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LA_with_SOME_regional_columns.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LEP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LEP.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LEP.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LEP",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LEP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LEP - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LEP.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LEP.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MCA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/MCA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/MCA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=MCA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "MCA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MCA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/MCA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"MCA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - mixed_digits",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/mixed_digits.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/mixed_digits.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=mixed_digits",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "mixed_digits"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - mixed_digits - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/mixed_digits.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"mixed_digits.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=monthly_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "monthly_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/monthly_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"monthly_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=monthly_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "monthly_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/monthly_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"monthly_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MSOA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/MSOA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/MSOA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=MSOA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "MSOA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MSOA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/MSOA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"MSOA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - one_row_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/one_row_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/one_row_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=one_row_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "one_row_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - one_row_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/one_row_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"one_row_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - overlapping_terms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/overlapping_terms.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/overlapping_terms.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=overlapping_terms",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "overlapping_terms"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - overlapping_terms - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/overlapping_terms.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"overlapping_terms.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - PCon",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/PCon.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/PCon.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=PCon",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "PCon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - PCon - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/PCon.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"PCon.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=regional",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "regional"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/regional.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"regional.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional_different_years",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional_different_years.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional_different_years.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=regional_different_years",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "regional_different_years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional_different_years - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/regional_different_years.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"regional_different_years.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - RSC",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/RSC.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/RSC.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=RSC",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "RSC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - RSC - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/RSC.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"RSC.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_identifier_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_identifier_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_identifier_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=some_identifier_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "some_identifier_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_identifier_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/some_identifier_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"some_identifier_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_year_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_year_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_year_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=some_year_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "some_year_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_year_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/some_year_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"some_year_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - string_digits",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/string_digits.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/string_digits.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=string_digits",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "string_digits"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - string_digits - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/string_digits.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"string_digits.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - tax_year_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/tax_year_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/tax_year_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=tax_year_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "tax_year_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - tax_year_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/tax_year_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"tax_year_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=termly_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "termly_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/termly_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"termly_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=termly_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "termly_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/termly_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"termly_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=up_until_31st_march",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "up_until_31st_march"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/up_until_31st_march.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"up_until_31st_march.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march_iffy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march_iffy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march_iffy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=up_until_31st_march_iffy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "up_until_31st_march_iffy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march_iffy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/up_until_31st_march_iffy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"up_until_31st_march_iffy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - ward",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/ward.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/ward.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=ward",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "ward"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - ward - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/ward.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"ward.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - year_identifier_missing_columns",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/year_identifier_missing_columns.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/year_identifier_missing_columns.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=year_identifier_missing_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "year_identifier_missing_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - year_identifier_missing_columns - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/year_identifier_missing_columns.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"year_identifier_missing_columns.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Queue",
			"item": [
				{
					"name": "Queue release for publication",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/releases/3b7532b9-df54-4d9c-ade4-08d782fd031e/queue",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"3b7532b9-df54-4d9c-ade4-08d782fd031e",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publishing",
			"item": [
				{
					"name": "Retry Content and Publishing - Release not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9673f832-e37c-415c-8932-e5f5c72e4710",
								"exec": [
									"var respJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/bau/release/49ffa72c-646e-4263-b597-82e32f8cfe35/publish/content",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"bau",
								"release",
								"49ffa72c-646e-4263-b597-82e32f8cfe35",
								"publish",
								"content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retry Data - Release not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bf72e3d-d201-4276-a26e-c2d797521df5",
								"exec": [
									"var respJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/bau/release/49ffa72c-646e-4263-b597-82e32f8cfe35/publish/data",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"bau",
								"release",
								"49ffa72c-646e-4263-b597-82e32f8cfe35",
								"publish",
								"data"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b23fa1e3-c567-4472-8933-f5b2382a6fca",
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"7F_AbsenceRatePercentBands_SchoolType\", \"51e645c1-4a37-4938-8b20-1244b15048f9\");",
					"pm.globals.set(\"7FG_AbsenceRatePercentBands_SchoolType_Default\", \"c93635d2-83ad-4199-bd0d-0e740775c4ed\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_Total\", \"0af225c6-c70b-4053-b7e7-4e719e2b751f\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_Special\", \"a7a7a691-a49e-422e-839e-53f1f545fa76\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedSecondary\", \"c306ff42-ddea-4cd0-82af-770df078fd94\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedPrimary\", \"26db426f-fb4f-439c-9e37-360451305013\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfOverallAbsenceSessions\", \"fe313349-0438-41b7-8944-109690ee5158\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions\", \"f3014e60-534a-4667-b90f-80b1fee6b08e\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions\", \"cd2711ff-3dba-4452-858a-d55c5cfd04fb\");",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "690b352e-c1ce-4b73-aabc-e37c618def2f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}