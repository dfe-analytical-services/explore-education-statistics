{
	"info": {
		"_postman_id": "5a63a70e-d73b-4ead-9a82-0fb8ff223833",
		"name": "DfE Admin API - Dev tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test data",
			"item": [
				{
					"name": "Create topic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc7887a5-27d0-48db-9712-d9d9daca1aec",
								"exec": [
									"pm.globals.clear();",
									"",
									"var chars = 'abcdefghijklmnopqrstuvwxyz0123456789';",
									"var unique_identifier = '';",
									"",
									"for(var i = 0; i < 16; i++) {",
									"    var pos = Math.floor(Math.random() * chars.length);",
									"    unique_identifier += chars.substring(pos, pos+1);",
									"}",
									"",
									"pm.globals.set('RUN_IDENTIFIER', unique_identifier);",
									"console.log('RUN_IDENTIFIER: ', pm.globals.get('RUN_IDENTIFIER'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c20c89b4-77cb-4f30-be87-f720f61ef984",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('topic_id', respJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test topic {{RUN_IDENTIFIER}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/theme/449d720f-9a87-4895-91fe-70972d1bdc04/topics",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"theme",
								"449d720f-9a87-4895-91fe-70972d1bdc04",
								"topics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create publication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af35f47b-efa1-46f1-b1cc-f3d034e123de",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fbb1c39d-d5a7-44db-bd5d-445143effe6e",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.globals.set('publication_id', pm.response.json().id);",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    //pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"title should be correct\", function () {",
									"    pm.expect(respJson.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"methodology should be correct\", function () {",
									"    pm.expect(respJson.methodology.id).to.equal(\"b4886b45-53c2-4d6f-e6bc-08d77d76f342\");",
									"    pm.expect(respJson.methodology.title).to.equal(\"Test methodology\");",
									"});",
									"",
									"pm.test(\"releases should be an empty array\", function () {",
									"    pm.expect(respJson.releases).to.be.an('array').that.is.empty;",
									"});",
									"",
									"pm.test(\"topicId should be correct\", function () {",
									"    pm.expect(respJson.topicId).to.equal(pm.globals.get('topic_id'));",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"contact should be correct\", function () {",
									"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(respJson.contact.contactName).to.equal(\"Sean Gibson\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test publication {{RUN_IDENTIFIER}}\",\n\t\"contactId\": \"d246c696-4b3a-4aeb-842c-c1318ee334e8\",\n\t\"methodologyId\": \"b4886b45-53c2-4d6f-e6bc-08d77d76f342\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/topic/{{topic_id}}/publications",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"{{topic_id}}",
								"publications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17228cfe-0836-497e-ada5-03466b01df74",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.globals.set('release_id', respJson.id);",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publicationId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publicationTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releaseName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`yearTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`typeId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`nextReleaseDate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`publishScheduled`));",
									"    pm.expect(pm.response.to.have.jsonBody(`live`));",
									"    pm.expect(pm.response.to.have.jsonBody(`timePeriodCoverage`));",
									"    pm.expect(pm.response.to.have.jsonBody(`latestRelease`));",
									"    pm.expect(pm.response.to.have.jsonBody(`type`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"    pm.expect(pm.response.to.have.jsonBody(`status`));",
									"});",
									"",
									"pm.test(\"title should should be correct\", function () { ",
									"    pm.expect(respJson.title).to.equal(\"Calendar Year 2025\");",
									"});",
									"",
									"pm.test(\"publicationId should be correct\", function () {",
									"    pm.expect(respJson.publicationId).to.equal(pm.globals.get('publication_id')); ",
									"});",
									"",
									"pm.test(\"publicationTitle should be correct\", function () {",
									"    pm.expect(respJson.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"releaseName, yearTitle should be correct\", function () {",
									"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
									"    pm.expect(respJson.yearTitle).to.equal(\"2025\"); ",
									"});",
									"",
									"pm.test(\"typeId should be correct\", function () {",
									"    pm.expect(respJson.typeId).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\"); ",
									"});",
									"",
									"pm.test(\"nextReleaseDate should be correct\", function () {",
									"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\"); ",
									"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
									"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
									"});",
									"",
									"pm.test(\"publishScheduled should be correct\", function () {",
									"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\");  ",
									"});",
									"",
									"pm.test(\"live should be correct\", function () {",
									"    pm.expect(respJson.live).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b8623ac5-498d-4b88-8fd1-2cb634a289a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"publicationId\": \"{{publication_id}}\",\n\t\"templateReleaseId\": \"\",\n\t\"timePeriodCoverage\": { \"value\":\"CY\" },\n\t\"releaseName\": 2025,\n\t\"publishScheduled\": \"2026-01-01T00:00:00.000Z\",\n\t\"nextReleaseDate\": {\n\t\t\"day\": 1,\n\t\t\"month\": 1,\n\t\t\"year\": 2027\n\t},\n\t\"typeId\": \"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\"\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/publications/{{publication_id}}/releases",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"{{publication_id}}",
								"releases"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import subject (SUB1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "feb24fae-2c68-4a8c-a4ad-50305388c5dc",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return array of correct length\", function () {",
									"    pm.expect(respJson.length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Meta file details should be correct\", function () { ",
									"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
									"    pm.expect(respJson[0].name).to.equal(\"\");",
									"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
									"    pm.expect(respJson[0].size).to.equal(\"157 B\");",
									"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
									"    pm.expect(respJson[0].rows).to.equal(2);",
									"",
									"    var createdDate = respJson[1].created.substring(0, respJson[1].created.indexOf('T'));",
									"    var now = new Date();",
									"    var nowDate = `${now.getFullYear()}-${('0' + (now.getMonth()+1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;",
									"    pm.expect(createdDate).to.equal(nowDate);",
									"    ",
									"    pm.expect(respJson[0].userName).to.equal(\"bau1@example.com\");",
									"});",
									"",
									"pm.test(\"Data file details should be correct\", function () { ",
									"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
									"    pm.expect(respJson[1].name).to.equal(\"API test subject\");",
									"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
									"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
									"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
									"    pm.expect(respJson[1].rows).to.equal(161);",
									"",
									"    var createdDate = respJson[1].created.substring(0, respJson[1].created.indexOf('T'));",
									"    var now = new Date();",
									"    var nowDate = `${now.getFullYear()}-${('0' + (now.getMonth()+1)).slice(-2)}-${('0' + now.getDate()).slice(-2)}`;",
									"    pm.expect(createdDate).to.equal(nowDate);",
									"    ",
									"    pm.expect(respJson[1].userName).to.equal(\"bau1@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "13fed99c-bb40-4394-aaab-c85774bfb139",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "files/admin-api-test.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "files/admin-api-test.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=API%20test%20subject",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "API%20test%20subject"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Release Meta - API test release",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "350b9b05-3a41-4ad3-862e-d4512ac7dba0",
								"exec": [
									"// Wait for subject to be imported from \"Import subject (SUB1)\" request",
									"if(pm.environment.get('env') === 'local') {",
									"    setTimeout(function () {}, 100000);",
									"} else {",
									"    setTimeout(function () {}, 100000);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdccd19f-6265-4ef8-85e1-91624968e9a9",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"    ",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"releaseId\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
									"});",
									"",
									"pm.test(\"releaseId matches the release requested\", function () { ",
									"    pm.expect(respJson.releaseId).to.equal(pm.globals.get('release_id')); ",
									"});",
									"",
									"pm.test(\"Number of subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Subject 'API test subject' should exist\", function () {",
									"    var subject = respJson.subjects.find(subject => subject.label === \"API test subject\");",
									"    pm.expect(subject, 'Couldn\\'t find subject \"API test subject\"!').to.not.be.undefined;",
									"    pm.globals.set('sub1_id', subject.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/data/meta/release/{{release_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"meta",
								"release",
								"{{release_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subject Meta - API test subject (SUB1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6dff99d-f0b5-46e5-af65-ea89cead4e47",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48a32c5c-06bb-456b-953d-2613a51e516d",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.opportunityArea\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.ward\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.parliamentaryConstituency\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localEnterprisePartnership\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.rscRegion\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
									"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
									"});",
									"",
									"pm.test(\"filters should be correct\", function () {",
									"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
									"});",
									"",
									"pm.test(\"indicators should be correct\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
									"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
									"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
									"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
									"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
									"});",
									"",
									"pm.test(\"localAuthorityDistricts should be correct\", function () {",
									"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(4);",
									"    ladLabels = respJson.locations.localAuthorityDistrict.options.map(lad => lad.label);",
									"    pm.expect(ladLabels)",
									"        .to.have.members([",
									"            \"Hartlepool\",",
									"            \"Stockton-on-Tees\",",
									"            \"Middlesbrough\",",
									"            \"Redcar and Cleveland\",",
									"        ]);   ",
									"});",
									"",
									"pm.test(\"opportunityAreas should be correct\", function () {",
									"    pm.expect(respJson.locations.opportunityArea.options.length).to.equal(8);",
									"    oaLabels = respJson.locations.opportunityArea.options.map(oa => oa.label);",
									"    pm.expect(oaLabels)",
									"        .to.have.members([",
									"            \"Bolton 001 (E02000984)\",",
									"            \"Bolton 001 (E05000364)\",",
									"            \"Bolton 002 (E02000985)\",",
									"            \"Bolton 002 (E05006937)\",",
									"            \"Bolton 003 (E02000986)\",",
									"            \"Bolton 003 (E05010291)\",",
									"            \"Bolton 004 (E02000987)\",",
									"            \"Bolton 004 (E05010450)\",",
									"        ]);  ",
									"});",
									"",
									"pm.test(\"wards should be correct\", function () {",
									"    pm.expect(respJson.locations.ward.options.length).to.equal(4);",
									"    wardLabels = respJson.locations.ward.options.map(ward => ward.label);",
									"    pm.expect(wardLabels)",
									"        .to.have.members([",
									"            \"Syon\",",
									"            \"Yoxall\",",
									"            \"Rural West York\",",
									"            \"Nailsea Youngwood\",",
									"        ]);   ",
									"});",
									"",
									"pm.test(\"parliamentaryConstituency should be correct\", function () {",
									"    pm.expect(respJson.locations.parliamentaryConstituency.options.length).to.equal(4);",
									"    pcLabels = respJson.locations.parliamentaryConstituency.options.map(pc => pc.label);",
									"    pm.expect(pcLabels)",
									"        .to.have.members([",
									"            \"East Yorkshire\",",
									"            \"Richmond (Yorks)\",",
									"            \"York Central\",",
									"            \"York Outer\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"localEnterprisePartnership should be correct\", function () {",
									"    pm.expect(respJson.locations.localEnterprisePartnership.options.length).to.equal(4);",
									"    lepLabels = respJson.locations.localEnterprisePartnership.options.map(lep => lep.label);",
									"    pm.expect(lepLabels)",
									"        .to.have.members([",
									"            \"Black Country\",",
									"            \"Chesire and Warrington\",",
									"            \"Cornwall and Isles of Scilly\",",
									"            \"Coventry and Warwickshire\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"rscRegion should be correct\", function () {",
									"    pm.expect(respJson.locations.rscRegion.options.length).to.equal(4);",
									"    rscrLabels = respJson.locations.rscRegion.options.map(rscr => rscr.label);",
									"    pm.expect(rscrLabels)",
									"        .to.have.members([",
									"            \"East of England and North-East London\",",
									"            \"East Midlands and the Humber\",",
									"            \"Lancashire and West Yorkshire\",",
									"            \"North of England\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"region should be correct\", function () {",
									"    pm.expect(respJson.locations.region.options.length).to.equal(4);",
									"    regionLabels = respJson.locations.region.options.map(region => region.label);",
									"    pm.expect(regionLabels)",
									"        .to.have.members([",
									"            \"Yorkshire and the Humber\",",
									"            \"North East\",",
									"            \"North West\",",
									"            \"West Midlands\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"localAuthority should be correct\", function () {",
									"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(4);",
									"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
									"    pm.expect(laLabels)",
									"        .to.have.members([",
									"            \"Birmingham\",",
									"            \"Barnsley\",",
									"            \"Greenwich\",",
									"            \"Camden\",",
									"        ]);",
									"});",
									"",
									"pm.test(\"timePeriod should be correct\", function () {",
									"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
									"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
									"    ",
									"    pm.expect(respJson.timePeriod.options.length).to.equal(16);",
									"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(16);",
									"    ",
									"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
									"    pm.expect(years)",
									"        .to.have.members([",
									"            \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",",
									"            \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",",
									"            \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",",
									"            \"2020\",",
									"        ]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/data/meta/subject/{{sub1_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"meta",
								"subject",
								"{{sub1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Footnote for SUB1 subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4ce692e-fc47-4318-97d9-7e7cae9fa149",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
									"});",
									"",
									"pm.globals.set(\"sub1_footnote_subject_id\", respJson.id);",
									"",
									"pm.test(\"content should should be correct\", function () { ",
									"    pm.expect(respJson.content).to.equal(\"SUB1 test footnote subject\"); ",
									"});",
									"",
									"pm.test(\"subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].selected).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81982cfb-ba11-495d-9ab1-4f13d99b28ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"SUB1 test footnote subject\",\n    \"indicators\": [],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": [\"{{sub1_id}}\"]\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/data/footnote",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"footnote"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Footnote for SUB1 Admission Numbers indicator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fd58110-eab3-402b-b21a-37c77416053b",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
									"});",
									"",
									"pm.globals.set(\"sub1_footnote_indicator_id\", respJson.id);",
									"",
									"pm.test(\"content should should be correct\", function () { ",
									"    pm.expect(respJson.content).to.equal(\"SUB1 test footnote indicator\"); ",
									"});",
									"",
									"pm.test(\"subjects should be correct\", function () {",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
									"    pm.expect(respJson.subjects[pm.globals.get('sub1_id')].selected).to.be.false;",
									"    ",
									"    var indicatorGroups = Object.keys(respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups);",
									"    pm.expect(indicatorGroups.length).to.equal(1);",
									"    pm.globals.set('SUB1_INDGROUP_Default', indicatorGroups[0]);",
									"    ",
									"    var indicators = respJson.subjects[pm.globals.get('sub1_id')].indicatorGroups[pm.globals.get('SUB1_INDGROUP_Default')].indicators",
									"    pm.expect(indicators.length).to.equal(1);",
									"    pm.expect(indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52d04c56-a08a-4dfd-b2b4-42948d0ed2e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"SUB1 test footnote indicator\",\n    \"indicators\": [\"{{SUB1_IND_Admission_Numbers}}\"],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": []\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/data/footnote",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"data",
								"footnote"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create data block 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b14d4029-dd8c-40ae-b207-ce78e8e5c48f",
								"exec": [
									"const respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Store environment variables\", function () {",
									"    pm.expect(respJson.id).to.not.be.null;",
									"    pm.globals.set(\"sub1_datablock1_id\", respJson.id);",
									"});",
									"",
									"pm.test(\"heading should be correct\", function () {",
									"    pm.expect(respJson.heading).to.equal(`Admin API test title`);",
									"});",
									"",
									"pm.test(\"name should be correct\", function () {",
									"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\"); ",
									"});",
									"",
									"pm.test(\"source should be correct\", function () {",
									"    pm.expect(respJson.source).to.equal(\"Admin API test source\"); ",
									"});",
									"",
									"pm.test(\"dataBlockRequest should be correct\", function () {",
									"    const dbReq = respJson.dataBlockRequest;",
									"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
									"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
									"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
									"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
									"    pm.expect(dbReq.indicators.length).to.equal(1);",
									"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
									"        \"E08000016\",",
									"        \"E08000025\"",
									"    ]);",
									"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
									"        \"E06000001\",",
									"        \"E06000002\"",
									"    ]);",
									"});",
									"",
									"pm.test(\"charts should be correct\", function () {",
									"    pm.expect(respJson.charts).to.be.an('array').that.is.empty; ",
									"});",
									"",
									"pm.test(\"tables should be correct\", function () {",
									"    pm.expect(respJson.tables.length).to.equal(1);",
									"    const table = respJson.tables[0];",
									"    pm.expect(table.indicators).to.equal(undefined);",
									"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
									"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
									"    ",
									"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
									"    pm.expect(column).to.have.members([",
									"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
									"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
									"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
									"    ",
									"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
									"    pm.expect(row).to.have.members([",
									"        \"E06000002\",",
									"        \"E06000001\",",
									"        \"E08000016\",",
									"        \"E08000025\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
									"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charts\": [],\n    \"heading\": \"Admin API test title\",\n    \"name\": \"Admin API data block 1\",\n    \"source\": \"Admin API test source\",\n    \"dataBlockRequest\": {\n        \"subjectId\": \"{{sub1_id}}\",\n        \"indicators\": [\n            \"{{SUB1_IND_Admission_Numbers}}\"\n        ],\n        \"filters\": [],\n        \"locations\": {\n            \"localAuthorityDistrict\": [\n                \"E06000001\",\n                \"E06000002\"\n            ],\n            \"localAuthority\": [\n                \"E08000016\",\n                \"E08000025\"\n            ]\n        },\n        \"timePeriod\": {\n            \"startYear\": 2007,\n            \"startCode\": \"CY\",\n            \"endYear\": 2017,\n            \"endCode\": \"CY\"\n        }\n    },\n    \"tables\": [\n        {\n            \"tableHeaders\": {\n                \"columnGroups\": [],\n                \"columns\": [\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2007_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2008_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2009_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2010_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2011_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2012_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2013_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2014_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2015_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2016_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2017_CY\"\n                    }\n                ],\n                \"rowGroups\": [\n                    [\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E06000002\",\n                            \"level\": \"localAuthorityDistrict\"\n                        },\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E06000001\",\n                            \"level\": \"localAuthorityDistrict\"\n                        },\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E08000016\",\n                            \"level\": \"localAuthority\"\n                        },\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E08000025\",\n                            \"level\": \"localAuthority\"\n                        }\n                    ]\n                ],\n                \"rows\": [\n                    {\n                        \"type\": \"Indicator\",\n                        \"value\": \"{{SUB1_IND_Admission_Numbers}}\"\n                    }\n                ]\n            },\n            \"indicators\": []\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"datablocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create data block 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26734b99-bcf8-4bcc-b8c0-86367f2ba699",
								"exec": [
									"const respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Store environment variables\", function () {",
									"    pm.expect(respJson.id).to.not.be.null;",
									"    pm.globals.set(\"sub1_datablock2_id\", respJson.id);",
									"});",
									"",
									"pm.test(\"heading should be correct\", function () {",
									"    pm.expect(respJson.heading).to.equal(`Admin API test title 2`);",
									"});",
									"",
									"pm.test(\"name should be correct\", function () {",
									"    pm.expect(respJson.name).to.equal(\"Admin API data block 2\"); ",
									"});",
									"",
									"pm.test(\"source should be correct\", function () {",
									"    pm.expect(respJson.source).to.equal(\"Admin API test source 2\");",
									"});",
									"",
									"pm.test(\"dataBlockRequest should be correct\", function () {",
									"    const dbReq = respJson.dataBlockRequest;",
									"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
									"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
									"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
									"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
									"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
									"    pm.expect(dbReq.indicators.length).to.equal(1);",
									"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"    pm.expect(dbReq.locations.ward).to.have.members([",
									"        \"E05010291\",",
									"        \"E05010450\"",
									"    ]);",
									"});",
									"",
									"pm.test(\"charts should be correct\", function () {",
									"    pm.expect(respJson.charts).to.be.an('array').that.is.empty; ",
									"});",
									"",
									"pm.test(\"tables should be correct\", function () {",
									"    pm.expect(respJson.tables.length).to.equal(1);",
									"    const table = respJson.tables[0];",
									"    pm.expect(table.indicators).to.equal(undefined);",
									"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
									"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
									"    ",
									"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
									"    pm.expect(column).to.have.members([",
									"        \"2005_CY\", \"2006_CY\", ",
									"        \"2007_CY\", \"2008_CY\", ",
									"        \"2009_CY\", \"2010_CY\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
									"    ",
									"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
									"    pm.expect(row).to.have.members([",
									"        \"E05010450\",",
									"        \"E05010291\"",
									"    ]);",
									"    ",
									"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
									"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
									"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charts\": [],\n    \"id\": \"5f2613a7-c883-4be9-9d15-73af506a50a3\",\n    \"heading\": \"Admin API test title 2\",\n    \"name\": \"Admin API data block 2\",\n    \"source\": \"Admin API test source 2\",\n    \"dataBlockRequest\": {\n        \"subjectId\": \"{{sub1_id}}\",\n        \"timePeriod\": {\n            \"startYear\": 2005,\n            \"startCode\": \"CY\",\n            \"endYear\": 2010,\n            \"endCode\": \"CY\"\n        },\n        \"filters\": [],\n        \"indicators\": [\n            \"{{SUB1_IND_Admission_Numbers}}\"\n        ],\n        \"locations\": {\n            \"ward\": [\n                \"E05010291\",\n                \"E05010450\"\n            ]\n        },\n        \"includeGeoJson\": false\n    },\n    \"tables\": [\n        {\n            \"tableHeaders\": {\n                \"columnGroups\": [],\n                \"columns\": [\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2005_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2006_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2007_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2008_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2009_CY\"\n                    },\n                    {\n                        \"type\": \"TimePeriod\",\n                        \"value\": \"2010_CY\"\n                    }\n                ],\n                \"rowGroups\": [\n                    [\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E05010450\",\n                            \"level\": \"ward\"\n                        },\n                        {\n                            \"type\": \"Location\",\n                            \"value\": \"E05010291\",\n                            \"level\": \"ward\"\n                        }\n                    ]\n                ],\n                \"rows\": [\n                    {\n                        \"type\": \"Indicator\",\n                        \"value\": \"{{SUB1_IND_Admission_Numbers}}\"\n                    }\n                ]\n            },\n            \"indicators\": []\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"datablocks"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Topic",
			"item": [
				{
					"name": "Try to create same publication twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d12ece71-61fd-4af2-b647-513c59c3417e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c55c11e-31f8-4553-9f1a-e735712d1271",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(400); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"errors\"));",
									"});",
									"",
									"pm.test(\"errors should be correct\", function () {",
									"    pm.expect(respJson.errors[''][0]).to.equal('SLUG_NOT_UNIQUE'); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"API test publication {{RUN_IDENTIFIER}}\",\n\t\"contactId\": \"d246c696-4b3a-4aeb-842c-c1318ee334e8\",\n\t\"methodologyId\": \"b4886b45-53c2-4d6f-e6bc-08d77d76f342\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_api_url}}/topic/{{topic_id}}/publications",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"topic",
								"{{topic_id}}",
								"publications"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Import Status - admin-api-test.csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36028011-e066-4947-9dee-8cfc88ddb449",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Status should be complete\", function () {",
									"    pm.expect(respJson.status).to.equal(\"COMPLETE\");",
									"    //pm.expect(respJson.percentageComplete).to.equal(100);",
									"    pm.expect(respJson.percentageComplete).to.equal(0);",
									"});",
									"",
									"pm.test(\"There should be no errors\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"errors\", \"\"));",
									"});",
									"",
									"pm.test(\"numberOfRows should be correct\", function() {",
									"    pm.expect(respJson.numberOfRows).to.equal(161) ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c7b7606-5b2e-4fe6-bcba-5a936bb3a9c2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{release_id}}",
								"data",
								"admin-api-test.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Status - invalid release id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad336ba6-0d6b-4fc7-aa46-6ed6b3fad381",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(404); });",
									"",
									"pm.test(\"Status should be not found\", function () {",
									"    pm.expect(respJson.title).to.equal(\"Not Found\");",
									"});",
									"",
									"pm.test(\"There should be no errors field\", function () {",
									"pm.expect(pm.response.to.not.have.jsonBody(\"errors\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c78f0d7-a11d-4bd8-aee1-297372dbb780",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/release/228f8aaf-e438-4155-8912-983943a88989/data/expected_not_found.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"228f8aaf-e438-4155-8912-983943a88989",
								"data",
								"expected_not_found.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Contacts @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860eead7-864b-4320-9668-48a2ab533fbc",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Fields are present\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].teamEmail\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactName\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].contactTelNo\"));",
									"});",
									"",
									"pm.test(\"School absence and exclusions team details should be correct\", function () {",
									"    var team = respJson.filter(function (team) { return team.teamName === \"School absence and exclusions team\" });",
									"    pm.expect(team.length).to.equal(1);",
									"    var team = team[0];",
									"    pm.expect(team.teamEmail).to.equal(\"schools.statistics@education.gov.uk\");",
									"    pm.expect(team.contactName).to.equal(\"Sean Gibson\");",
									"    pm.expect(team.contactTelNo).to.equal(\"0370 000 2288\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/contacts",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"contacts"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Meta",
			"item": [
				{
					"name": "Time identifiers @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b1417cd-8285-44d4-828c-e5a1cd42e352",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect the correct number of results\", function () {",
									"    pm.expect(respJson.length).to.equal(8);",
									"});",
									"",
									"pm.test(\"Expect the correct fields\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].category.label`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.value`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].timeIdentifiers[0].identifier.label`));",
									"    }",
									"});",
									"",
									"pm.test(\"Expect AcademicYear results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"AcademicYear\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Academic year\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(5);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Expect Month results to be correct\", function () {",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].category.value === \"Month\") {",
									"            pm.expect(respJson[i].category.label).to.equal(\"Month\");",
									"            pm.expect(respJson[i].timeIdentifiers.length).to.equal(12);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/meta/timeidentifiers",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"timeidentifiers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Release types @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3bf8210-5918-40bb-a77b-3b498159044f",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should correct number of results\", function () { pm.expect(respJson.length).to.equal(3); });",
									"",
									"pm.test(\"Results titles should be correct\", function () {",
									"    var foundAdHoc = false;",
									"    var foundNationalStatistics = false;",
									"    var foundOfficialStatistics = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Ad Hoc\") { foundAdHoc = true; }",
									"        if(respJson[i].title === \"National Statistics\") { foundNationalStatistics = true; }",
									"        if(respJson[i].title === \"Official Statistics\") { foundOfficialStatistics = true; }",
									"    }",
									"    pm.expect(foundAdHoc).to.equal(true, \"No Ad Hoc type found!\");",
									"    pm.expect(foundNationalStatistics).to.equal(true, \"No National Statistics type found!\")",
									"    pm.expect(foundOfficialStatistics).to.equal(true, \"No Official Statistics type found!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/meta/releasetypes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"meta",
								"releasetypes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Methodologies",
			"item": [
				{
					"name": "Methodologies @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85324d9d-ee96-4047-97ac-d9823688bee3",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.be.above(2);    ",
									"});",
									"",
									"pm.test(\"Title for Exclusion methodology should be correct\", function () {",
									"    var foundExclusion = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].id === \"c8c911e3-39c1-452b-801f-25bb79d1deb7\") {",
									"            foundExclusion = true;",
									"                pm.expect(respJson[i].title).to.equal(\"Pupil exclusion statistics: methodology\"); ",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/methodologies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"methodologies"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Theme",
			"item": [
				{
					"name": "Get user's themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "902607fc-48a1-48b1-b1b3-86198fe55509",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First result should have correct fields\", function () {",
									"    pm.expect(respJson.length).to.be.above(0);",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].title\"));",
									"    pm.expect(pm.response.to.have.jsonBody(\"[0].topics\"));",
									"});",
									"",
									"pm.test(\"Created topic should exist\", function () {",
									"   var testTheme = respJson.find(theme => theme.title === \"Test theme\");",
									"   pm.expect(testTheme, 'Couldn\\'t find \"Test theme\"!').to.not.be.undefined;",
									"   ",
									"   var testTopic = testTheme.topics.find(topic => topic.title === `API test topic ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"   pm.expect(testTopic, `Couldn't find \"API test topic ${pm.globals.get('RUN_IDENTIFIER')}\"`).to.not.be.undefined;",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"Number of themes should be correct\", function () {",
									"    pm.expect(respJson.length).to.be.above(8);",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"Number of topics and fields of first topic under Pupils and schools should be correct\", function () {",
									"    var foundPupilsAndSchools = false;",
									"    for(var i = 0; i < respJson.length; i++) {",
									"        if(respJson[i].title === \"Pupils and schools\") {",
									"            foundPupilsAndSchools = true;",
									"            pm.expect(respJson[i].topics.length).to.equal(9);",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].id`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].title`));",
									"            pm.expect(pm.response.to.have.jsonBody(`[${i}].topics[0].themeId`));",
									"        }",
									"    }",
									"    pm.expect(foundPupilsAndSchools).to.equal(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/me/themes",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"themes"
							]
						},
						"description": "Returns all contacts"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publication",
			"item": [
				{
					"name": "Get user's topic - topic_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bce0a6b-3b43-4b56-bb18-507c1b5c7298",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return correct number of results\", function () {",
									"    pm.expect(respJson.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Single result publication should be correct\", function () {",
									"    var testPub = respJson.find(publication => publication.id === pm.globals.get('publication_id'));",
									"    pm.expect(testPub.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"",
									"    // @NotCreatedData",
									"    pm.expect(testPub.methodology.id).to.equal(\"b4886b45-53c2-4d6f-e6bc-08d77d76f342\");",
									"    pm.expect(testPub.methodology.title).to.equal(\"Test methodology\");",
									"",
									"    pm.expect(testPub.releases.length).to.equal(1);",
									"    pm.expect(testPub.releases[0].id).to.equal(pm.globals.get('release_id'));",
									"    pm.expect(testPub.releases[0].publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"",
									"    pm.expect(testPub.topicId).to.equal(pm.globals.get('topic_id'));",
									"",
									"    // @NotCreatedData",
									"    pm.expect(testPub.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(testPub.contact.contactName).to.equal(\"Sean Gibson\");",
									"",
									"    var testRelease = testPub.releases.find(release => release.id === pm.globals.get('release_id'));",
									"    pm.expect(testRelease).to.not.be.undefined;",
									"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
									"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2027\");",
									"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
									"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
									"    pm.expect(testRelease.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\");",
									"    pm.expect(testRelease.live).to.equal(false);",
									"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"CY\");",
									"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
									"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
									"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
									"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(testRelease.status).to.equal(\"Draft\");",
									"    pm.expect(testRelease.internalReleaseNote).to.be.undefined;",
									"    //pm.expect(testRelease.draftComments.length).to.equal(3); // Not implemented!",
									"    //pm.expect(testRelease.higherReviewComments.length).to.equal(1); // Not implemented!",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d5381d70-653b-43d3-826f-a74c9f19508a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/me/publications?topicId={{topic_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"me",
								"publications"
							],
							"query": [
								{
									"key": "topicId",
									"value": "{{topic_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get publication - API test publication",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27398216-18ad-402f-a838-90f76ade29b2",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    //pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"id and title should be correct\", function () {",
									"    pm.expect(respJson.id).to.equal(pm.globals.get('publication_id'));",
									"    pm.expect(respJson.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"methodology should be correct\", function () {",
									"    pm.expect(respJson.methodology.id).to.equal(\"b4886b45-53c2-4d6f-e6bc-08d77d76f342\");",
									"    pm.expect(respJson.methodology.title).to.equal(\"Test methodology\");",
									"});",
									"",
									"pm.test(\"releases should be correct\", function () {",
									"    pm.expect(respJson.releases.length).to.equal(1);",
									"    pm.expect(respJson.releases[0].id).to.equal(pm.globals.get('release_id'));",
									"    pm.expect(respJson.releases[0].title).to.equal(\"Calendar Year 2025\");",
									"    pm.expect(respJson.releases[0].publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
									"});",
									"",
									"pm.test(\"topicId should be correct\", function () {",
									"    pm.expect(respJson.topicId).to.equal(pm.globals.get('topic_id'));",
									"});",
									"",
									"// @NotCreatedData",
									"pm.test(\"contact should be correct\", function () {",
									"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
									"    pm.expect(respJson.contact.contactName).to.equal(\"Sean Gibson\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c6c17e9-7c5e-4108-8e06-6e9f52384149",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/publications/{{publication_id}}",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"{{publication_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get publication - Pupil absence in schools in England @NotCreatedData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f12f90bf-0464-43d2-8035-e9d33a0070df",
								"exec": [
									"var respJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Expect correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`title`));",
									"    //pm.expect(pm.response.to.have.jsonBody(`nextUpdate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases`));",
									"    pm.expect(pm.response.to.have.jsonBody(`methodology`));",
									"    pm.expect(pm.response.to.have.jsonBody(`topicId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`contact`));",
									"});",
									"",
									"pm.test(\"Response id and title should be correct\", function () {",
									"    pm.expect(respJson.id).to.equal(\"cbbd299f-8297-44bc-92ac-558bcf51f8ad\");",
									"    pm.expect(respJson.title).to.equal(\"Pupil absence in schools in England\"); ",
									"});",
									"",
									"",
									"pm.test(\"Methodology title should be correct\", function () {",
									"    pm.expect(respJson.methodology.title).to.equal(\"Pupil absence statistics: methodology\"); ",
									"});",
									"",
									"pm.test(\"Should be at least one release\", function () {",
									"    pm.expect(respJson.releases.length).to.be.above(0); ",
									"});",
									"",
									"pm.test(\"First release should have correct fields\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publicationTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].releaseName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].yearTitle`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].typeId`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.year`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.month`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].nextReleaseDate.day`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].publishScheduled`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].published`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.value`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].timePeriodCoverage.label`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].latestRelease`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].type.title`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.id`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.teamEmail`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactName`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].contact.contactTelNo`));",
									"    pm.expect(pm.response.to.have.jsonBody(`releases[0].status`));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fbaa73c0-161f-4e38-83ac-a5495c33f502",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/publications/cbbd299f-8297-44bc-92ac-558bcf51f8ad",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"publications",
								"cbbd299f-8297-44bc-92ac-558bcf51f8ad"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Meta",
					"item": [
						{
							"name": "Release",
							"item": [
								{
									"name": "Release Meta - API test release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60234297-fb0d-4751-9690-803f18e97aa6",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"releaseId\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"subjects\"));",
													"});",
													"",
													"pm.test(\"releaseId matches the release requested\", function () { ",
													"    pm.expect(respJson.releaseId).to.equal(pm.globals.get('release_id')); ",
													"});",
													"",
													"pm.test(\"Number of subjects should be correct\", function () {",
													"    pm.expect(respJson.subjects.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Subject 'API test subject' should exist\", function () {",
													"    var subject = respJson.subjects.find(subject => subject.label === \"API test subject\");",
													"    pm.expect(subject, 'Couldn\\'t find subject \"API test subject\"!').to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8eaecece-ed14-4c7d-9658-45a123ce0658",
												"exec": [
													"// Wait for subject to be imported from \"Import subject (SUB1)\" request",
													"setTimeout(function () {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/release/{{release_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"release",
												"{{release_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subject",
							"item": [
								{
									"name": "Subject Meta - SUB1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8016846d-e4d0-441c-bfe2-d17877275491",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "691a1368-a535-44de-bf04-8d0044b8e7f8",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.opportunityArea\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.ward\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.parliamentaryConstituency\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localEnterprisePartnership\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.rscRegion\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"filters should be correct\", function () {",
													"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
													"});",
													"",
													"pm.test(\"indicators should be correct\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
													"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
													"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
													"});",
													"",
													"pm.test(\"localAuthorityDistricts should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthorityDistrict.options.length).to.equal(4);",
													"    ladLabels = respJson.locations.localAuthorityDistrict.options.map(lad => lad.label);",
													"    pm.expect(ladLabels)",
													"        .to.have.members([",
													"            \"Hartlepool\",",
													"            \"Stockton-on-Tees\",",
													"            \"Middlesbrough\",",
													"            \"Redcar and Cleveland\",",
													"        ]);   ",
													"});",
													"",
													"pm.test(\"opportunityAreas should be correct\", function () {",
													"    pm.expect(respJson.locations.opportunityArea.options.length).to.equal(8);",
													"    oaLabels = respJson.locations.opportunityArea.options.map(oa => oa.label);",
													"    pm.expect(oaLabels)",
													"        .to.have.members([",
													"            \"Bolton 001 (E02000984)\",",
													"            \"Bolton 001 (E05000364)\",",
													"            \"Bolton 002 (E02000985)\",",
													"            \"Bolton 002 (E05006937)\",",
													"            \"Bolton 003 (E02000986)\",",
													"            \"Bolton 003 (E05010291)\",",
													"            \"Bolton 004 (E02000987)\",",
													"            \"Bolton 004 (E05010450)\",",
													"        ]);  ",
													"});",
													"",
													"pm.test(\"wards should be correct\", function () {",
													"    pm.expect(respJson.locations.ward.options.length).to.equal(4);",
													"    wardLabels = respJson.locations.ward.options.map(ward => ward.label);",
													"    pm.expect(wardLabels)",
													"        .to.have.members([",
													"            \"Syon\",",
													"            \"Yoxall\",",
													"            \"Rural West York\",",
													"            \"Nailsea Youngwood\",",
													"        ]);   ",
													"});",
													"",
													"pm.test(\"parliamentaryConstituency should be correct\", function () {",
													"    pm.expect(respJson.locations.parliamentaryConstituency.options.length).to.equal(4);",
													"    pcLabels = respJson.locations.parliamentaryConstituency.options.map(pc => pc.label);",
													"    pm.expect(pcLabels)",
													"        .to.have.members([",
													"            \"East Yorkshire\",",
													"            \"Richmond (Yorks)\",",
													"            \"York Central\",",
													"            \"York Outer\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"localEnterprisePartnership should be correct\", function () {",
													"    pm.expect(respJson.locations.localEnterprisePartnership.options.length).to.equal(4);",
													"    lepLabels = respJson.locations.localEnterprisePartnership.options.map(lep => lep.label);",
													"    pm.expect(lepLabels)",
													"        .to.have.members([",
													"            \"Black Country\",",
													"            \"Chesire and Warrington\",",
													"            \"Cornwall and Isles of Scilly\",",
													"            \"Coventry and Warwickshire\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"rscRegion should be correct\", function () {",
													"    pm.expect(respJson.locations.rscRegion.options.length).to.equal(4);",
													"    rscrLabels = respJson.locations.rscRegion.options.map(rscr => rscr.label);",
													"    pm.expect(rscrLabels)",
													"        .to.have.members([",
													"            \"East of England and North-East London\",",
													"            \"East Midlands and the Humber\",",
													"            \"Lancashire and West Yorkshire\",",
													"            \"North of England\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"region should be correct\", function () {",
													"    pm.expect(respJson.locations.region.options.length).to.equal(4);",
													"    regionLabels = respJson.locations.region.options.map(region => region.label);",
													"    pm.expect(regionLabels)",
													"        .to.have.members([",
													"            \"Yorkshire and the Humber\",",
													"            \"North East\",",
													"            \"North West\",",
													"            \"West Midlands\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"localAuthority should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(4);",
													"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
													"    pm.expect(laLabels)",
													"        .to.have.members([",
													"            \"Birmingham\",",
													"            \"Barnsley\",",
													"            \"Greenwich\",",
													"            \"Camden\",",
													"        ]);",
													"});",
													"",
													"pm.test(\"timePeriod should be correct\", function () {",
													"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
													"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
													"    ",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(16);",
													"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(16);",
													"    ",
													"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
													"    pm.expect(years)",
													"        .to.have.members([",
													"            \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",",
													"            \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",",
													"            \"2015\", \"2016\", \"2017\", \"2018\", \"2019\",",
													"            \"2020\",",
													"        ]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject/{{sub1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject",
												"{{sub1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subject Meta - SUB1 - Birmingham",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1dd546bc-2c7c-4c08-bcfe-15ad4b5da14a",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
													"",
													"pm.test(\"Fields are present\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"filters\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"locations.localAuthority\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localAuthorityDistrict\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.opportunityArea\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.ward\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.parliamentaryConstituency\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.localEnterprisePartnership\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.rscRegion\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.region\"));",
													"    pm.expect(pm.response.to.not.have.jsonBody(\"locations.country\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.hint\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.legend\"));",
													"    pm.expect(pm.response.to.have.jsonBody(\"timePeriod.options\"));",
													"});",
													"",
													"pm.test(\"filters should be correct\", function () {",
													"    pm.expect(respJson.filters).to.be.an('object').that.is.empty;    ",
													"});",
													"",
													"pm.test(\"indicators should be correct\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody(\"indicators.Default\"));",
													"    pm.expect(respJson.indicators.Default.options.length).to.equal(1);",
													"    pm.expect(respJson.indicators.Default.options[0].label).to.equal(\"Admission Numbers\");",
													"    pm.expect(respJson.indicators.Default.options[0].unit).to.equal(\"\");",
													"    pm.globals.set('SUB1_IND_Admission_Numbers', respJson.indicators.Default.options[0].value);",
													"});",
													"",
													"pm.test(\"localAuthority should be correct\", function () {",
													"    pm.expect(respJson.locations.localAuthority.options.length).to.equal(1);",
													"    laLabels = respJson.locations.localAuthority.options.map(la => la.label);",
													"    pm.expect(laLabels).to.have.members([\"Birmingham\"]);",
													"});",
													"",
													"pm.test(\"timePeriod should be correct\", function () {",
													"    pm.expect(respJson.timePeriod.hint).to.equal(\"Filter statistics by a given start and end date\");",
													"    pm.expect(respJson.timePeriod.legend).to.equal(\"\");",
													"    ",
													"    pm.expect(respJson.timePeriod.options.length).to.equal(5);",
													"    pm.expect(respJson.timePeriod.options.filter(time_ident => time_ident.code === \"CY\").length).to.equal(5);",
													"    ",
													"    var years = respJson.timePeriod.options.map(time_ident => time_ident.label);",
													"    pm.expect(years)",
													"        .to.have.members([",
													"            \"2014\", \"2015\", \"2016\", \"2017\", \"2018\",",
													"        ]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3f452bf-af0d-41cd-af6e-4d5767c17048",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"subjectId\": \"{{sub1_id}}\",\n\t\"locations\": {\n\t\t\"localAuthority\": [\"E08000025\"]\n\t}\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/data/meta/subject",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"data",
												"meta",
												"subject"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tablebuilder",
					"item": [
						{
							"name": "Tablebuilder - SUB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9260fd93-6e75-44d0-9723-72aabf1d42cb",
										"exec": [
											"respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.filters\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.footnotes\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.indicators\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.locations\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.publicationName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.subjectName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"subjectMeta.timePeriodRange\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"results\"));",
											"});",
											"",
											"pm.test(\"subjectMeta.filters should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.filters).to.be.an('object').that.is.empty;",
											"});",
											"",
											"pm.test(\"subjectMeta.footnotes should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.footnotes).to.have.deep.members([",
											"        { \"id\": pm.globals.get('sub1_footnote_subject_id'), \"label\": \"SUB1 test footnote subject\" },",
											"        { \"id\": pm.globals.get('sub1_footnote_indicator_id'), \"label\": \"SUB1 test footnote indicator\" },",
											"    ]);",
											"});",
											"",
											"pm.test(\"subjectMeta.indicators should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.indicators.length).to.equal(1);",
											"    pm.expect(respJson.subjectMeta.indicators[0].label).to.equal(\"Admission Numbers\");",
											"    pm.expect(respJson.subjectMeta.indicators[0].unit).to.equal(\"\");",
											"    pm.expect(respJson.subjectMeta.indicators[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
											"});",
											"",
											"pm.test(\"subjectMeta.locations should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.locations.length).to.equal(2);",
											"    var metaLocations = respJson.subjectMeta.locations.map(loc => [loc.label, loc.value]);",
											"    pm.expect(respJson.subjectMeta.locations)",
											"        .to.have.deep.members([",
											"            { \"label\": \"Greenwich\", \"value\": \"E09000011\", \"level\": \"localAuthority\" },",
											"            { \"label\": \"Camden\", \"value\": \"E09000007\", \"level\": \"localAuthority\" },",
											"        ]);",
											"});",
											"",
											"pm.test(\"subjectMeta.publicationName should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.publicationName).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`); ",
											"});",
											"",
											"pm.test(\"subjectMeta.subjectName should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.subjectName).to.equal(\"API test subject\"); ",
											"});",
											"",
											"pm.test(\"subjectMeta.timePeriodRange should be correct\", function () {",
											"    pm.expect(respJson.subjectMeta.timePeriodRange)",
											"        .to.have.deep.members([",
											"            { \"code\": \"CY\", \"label\": \"2014\", \"year\": 2014 },",
											"            { \"code\": \"CY\", \"label\": \"2015\", \"year\": 2015 },",
											"            { \"code\": \"CY\", \"label\": \"2016\", \"year\": 2016 },",
											"            { \"code\": \"CY\", \"label\": \"2017\", \"year\": 2017 },",
											"        ]);",
											"});",
											"",
											"pm.test(\"Number of results should be correct\", function () { ",
											"    pm.expect(respJson.results.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"results geographicLevel, filters, and country should be correct\", function () {",
											"    for(var i = 0; i < respJson.results.length; i++) {",
											"        pm.expect(respJson.results[i].geographicLevel).to.equal(\"LocalAuthority\");",
											"        pm.expect(respJson.results[i].filters).to.be.an('array').that.is.empty;",
											"        pm.expect(respJson.results[i].location.country.name).to.equal(\"England\");",
											"    }",
											"});",
											"",
											"pm.test(\"results Admission Numbers should be correct\", function () {",
											"    var results = respJson.results.map(res => [res.location.localAuthority.name, res.timePeriod, res.measures[pm.globals.get('SUB1_IND_Admission_Numbers')]]);",
											"    pm.expect(results)",
											"            .to.have.deep.members([",
											"                [\"Greenwich\", \"2014_CY\", \"8247\"],",
											"                [\"Camden\", \"2014_CY\", \"1054\"],",
											"                [\"Greenwich\", \"2015_CY\", \"6114\"],",
											"                [\"Camden\", \"2015_CY\", \"9790\"],",
											"                [\"Greenwich\", \"2016_CY\", \"8427\"],",
											"                [\"Camden\", \"2016_CY\", \"3548\"],",
											"                [\"Greenwich\", \"2017_CY\", \"6981\"],",
											"                [\"Camden\", \"2017_CY\", \"4180\"],",
											"            ]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0527e83-f5af-40c8-9205-1d355fc9f267",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subjectId\": \"{{sub1_id}}\",\n    \"locations\": {\n    \t\"localAuthority\": [\n    \t\t\"E09000007\",\n    \t\t\"E09000011\"\n    \t]\n    },\n    \"timePeriod\": {\n    \t\"startYear\": 2014,\n    \t\"startCode\": \"CY\",\n    \t\"endYear\": 2017,\n    \t\"endCode\": \"CY\"\n    },\n    \"filters\" : [],\n    \"indicators\": [\n    \t\"{{SUB1_IND_Admission_Numbers}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/tablebuilder?releaseId={{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"tablebuilder"
									],
									"query": [
										{
											"key": "releaseId",
											"value": "{{release_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Footnotes",
					"item": [
						{
							"name": "Get Footnotes - SUB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a94e749-8b10-49e5-ab5d-15174ec831ad",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"footnotes should be correct\", function () {",
											"    pm.expect(respJson.footnotes.length).to.equal(2);",
											"    var ftnoteSubject = respJson.footnotes.find(ftnote => ftnote.id === pm.globals.get('sub1_footnote_subject_id'));",
											"    pm.expect(ftnoteSubject).to.not.be.undefined;",
											"    pm.expect(ftnoteSubject.content).to.equal(\"SUB1 test footnote subject\");",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].indicatorGroups).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteSubject.subjects[pm.globals.get('sub1_id')].selected).to.be.true;",
											"    ",
											"    var ftnoteIndicator = respJson.footnotes.find(ftnote => ftnote.id === pm.globals.get('sub1_footnote_indicator_id'));",
											"    pm.expect(ftnoteIndicator).to.not.be.undefined;",
											"    pm.expect(ftnoteIndicator.content).to.equal(\"SUB1 test footnote indicator\");",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].filters).to.be.an('object').that.is.empty;",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].indicatorGroups[pm.globals.get('SUB1_INDGROUP_Default')].indicators[0])",
											"        .to.equal(pm.globals.get('SUB1_IND_Admission_Numbers').toString());",
											"    pm.expect(ftnoteIndicator.subjects[pm.globals.get('sub1_id')].selected).to.be.false;",
											"});",
											"",
											"pm.test(\"meta should be correct\", function () {",
											"    pm.expect(Object.keys(respJson.meta)).to.have.members([pm.globals.get('sub1_id').toString()]);",
											"    ",
											"    var sub1_meta = respJson.meta[pm.globals.get('sub1_id')];",
											"    pm.expect(sub1_meta.filters).to.be.an('object').that.is.empty;",
											"    pm.expect(sub1_meta.subjectId).to.equal(pm.globals.get('sub1_id'));",
											"    pm.expect(sub1_meta.subjectName).to.equal(\"API test subject\");",
											"    pm.expect(Object.keys(sub1_meta.indicators)).to.have.members([pm.globals.get('SUB1_INDGROUP_Default').toString()]);",
											"",
											"    var sub1_indgroup = sub1_meta.indicators[pm.globals.get('SUB1_INDGROUP_Default')];",
											"    pm.expect(sub1_indgroup.label).to.equal(\"Default\");",
											"    pm.expect(Object.keys(sub1_indgroup.options)).to.have.members([pm.globals.get('SUB1_IND_Admission_Numbers')]);",
											"    ",
											"    var sub1_ind = sub1_indgroup.options[pm.globals.get('SUB1_IND_Admission_Numbers')];",
											"    pm.expect(sub1_ind.label).to.equal(\"Admission Numbers\");",
											"    pm.expect(sub1_ind.unit).to.equal(\"\");",
											"    pm.expect(sub1_ind.value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09d13f18-d2b2-44e3-8507-e2358ad03d6a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/release/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"release",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filters @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d428ddb-6b0c-4d42-b446-c6b5b8250128",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 1\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30af3621-ea9d-4176-a7b5-f0452a780a21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 1\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [\n    \t\"{{7F_AbsenceRatePercentBands_SchoolType}}\"\n    \t],\n    \"filterGroups\": [],\n    \"filterItems\": [],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filters @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa040a7e-3796-4248-b166-a80f6fdd2959",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67275b36-3fa5-42af-91ea-59752da435ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/{{create_footnote_filter_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"{{create_footnote_filter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filter Groups @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eba0e181-ceac-46b7-adb7-6300b192bca9",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_groups_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 2\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd7252c1-d835-4120-bcfb-f65d06df59cf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 2\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [\n    \t\"{{7FG_AbsenceRatePercentBands_SchoolType_Default}}\"\n    ],\n    \"filterItems\": [],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filter Groups @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d41a99-9f35-4d85-9b38-aaa5310808eb",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aea2e4b6-2cc7-477d-b9fd-8a3297072a3d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/{{create_footnote_filter_groups_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"{{create_footnote_filter_groups_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Footnote for Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f67b33a-25ea-45a1-a991-122fcedf041b",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// NOTE: Save the footnote id for use in the next request",
											"pm.globals.set(\"create_footnote_filter_items_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 3\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f807cbb-2aa9-4530-9022-5988b94e1863",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 3\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions}}\",\n    \t\"{{7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_Total}}\"\n    \t],\n    \"subjects\": [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Footnote Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3d7f13f-4cc2-4755-a842-8a5d4bebe38e",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"content\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"create_footnote_filter_items_id\"));",
											"});",
											"",
											"pm.test(\"content should should be correct\", function () { ",
											"    pm.expect(respJson.content).to.equal(\"Admin API test footnote 3 - Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3e1c035-dfda-4685-a66a-6b8a3e37fbdf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Admin API test footnote 3 - Updated\",\n    \"indicators\": [\n    \t\"{{7I_AbsenceFields__NumberOfOverallAbsenceSessions}}\"\n    ],\n    \"filters\": [],\n    \"filterGroups\": [],\n    \"filterItems\": [\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_Special}}\",\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedSecondary}}\",\n    \t\"{{7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedPrimary}}\"\n    ],\n    subjects: [\"666cd878-87bb-4f77-9a3f-f5c75078e112\"]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/{{create_footnote_filter_items_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"{{create_footnote_filter_items_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote for Filter Items @NotCreatedData",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ae2244d-50a7-4826-8885-6712cb3cdc0e",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47808be2-2c96-4b26-b342-9f0e1c942d14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/{{create_footnote_filter_items_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"{{create_footnote_filter_items_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Footnote invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9da5957e-4bfa-423d-b473-daff06a4f4c6",
										"exec": [
											"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37ee6733-51d9-41cd-932e-b05a34dd6846",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/data/footnote/911c3d2a-8aff-4149-a688-f6455e6db47c",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"data",
										"footnote",
										"911c3d2a-8aff-4149-a688-f6455e6db47c"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1dd24ab-46de-42f1-b2b2-cef169d08925",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e654d16d-aeff-402d-ba00-46e79c824c02",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Manage Content",
			"item": [
				{
					"name": "Manage Content Page",
					"item": [
						{
							"name": "Get Manage Content Page data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7879fff-c1c4-4409-95ad-ad5e6e30a08c",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Response should return correct fields\", function () {",
											"    pm.expect(respJson.release).to.exist;",
											"    pm.expect(pm.response.to.have.jsonBody('release.summarySection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.headlinesSection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.keyStatisticsSection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.keyStatisticsSecondarySection'));",
											"    pm.expect(pm.response.to.have.jsonBody('release.downloadFiles'));",
											"});",
											"",
											"pm.test(\"release general details should be correct\", function () {",
											"    var release = respJson.release;",
											"    pm.expect(release.id).to.equal(pm.globals.get('release_id'));",
											"    pm.expect(release.title).to.equal(\"Calendar Year 2025\");",
											"    pm.expect(release.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(release.updates).to.exist;",
											"    pm.expect(release.content, 'release.content should be an empty array').to.be.an('array').that.is.empty;",
											"    pm.expect(release.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\");",
											"    ",
											"    pm.expect(release.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(release.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(release.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test('release.publication details should be correct', function () {",
											"    pm.expect(respJson.release.publication.id).to.equal(pm.globals.get('publication_id'));  ",
											"    pm.expect(respJson.release.publication.title).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"});",
											"",
											"pm.test(\"release.summarySection should be correct\", function () {",
											"    pm.expect(respJson.release.summarySection.content).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"release.headlinesSection should be correct\", function () {",
											"    pm.expect(respJson.release.headlinesSection.content).to.be.an('array').that.is.empty; ",
											"});",
											"",
											"pm.test(\"release.relatedInformation should be correct\", function () {",
											"    pm.expect(respJson.release.relatedInformation).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Release Note",
					"item": [
						{
							"name": "Add Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4f27227-c8d8-47bd-9e10-6f04a9d81db4",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () { ",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Number of results to be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Release Note entry should contain the correct details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.id).to.not.be.empty;",
											"    pm.expect(lastItem.id).to.not.equal(\"00000000-0000-0000-0000-000000000000\");",
											"    pm.expect(lastItem.on).to.not.be.empty;",
											"    pm.expect(lastItem.reason).to.equal(\"Update from Postman\");",
											"    ",
											"    pm.globals.set('release_note_id', lastItem.id)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"Update from Postman\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cbbc248-fdf5-4fbb-829f-433badbf7cbb",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Number of release notes to be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Release Note entry should contain the correct details\", function () {",
											"    const updatedItem = respJson.find(item => item.id === pm.globals.get(\"release_note_id\"));",
											"    pm.expect(updatedItem).to.not.be.empty;",
											"    pm.expect(updatedItem.on).to.equal(\"2019-07-25T00:00:00\");",
											"    pm.expect(updatedItem.reason).to.equal(\"Release Note updated by Postman\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"on\": \"2019-07-25T00:00:00\",\n    \"reason\": \"Release Note updated by Postman\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note/{{release_note_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note",
										"{{release_note_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Release Note",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5d9c141-3df6-4912-9a84-f7df767e3827",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Release Notes array contains one less value than before\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"Release Notes array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"release_note_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/release-note/{{release_note_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"release-note",
										"{{release_note_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Related Information",
					"item": [
						{
							"name": "Add Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cf77267-d107-4df0-ad0f-fc442ab09c49",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () { ",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the correct details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information 1\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/1\");",
											"    pm.expect(lastItem.id).to.not.be.empty;",
											"    pm.expect(lastItem.id).to.not.equal(\"00000000-0000-0000-0000-000000000000\");",
											"});",
											"",
											"pm.test(\"Store variables for upcoming tests\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.globals.set(\"latest_related_information_id\", lastItem.id);",
											"    pm.globals.set(\"number_of_related_information_items\", respJson.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"http://example.com/1\",\n    \"description\": \"Related Information 1\",\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4161f09-9dff-47d1-8488-37d84c4941b5",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the latest details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information 1\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/1\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e0c838b-401c-47ee-8aba-994d3b210150",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the updated details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information updated\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/updated\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"http://example.com/updated\",\n    \"description\": \"Related Information updated\"\n}\n"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information/{{latest_related_information_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information",
										"{{latest_related_information_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73598f74-b957-465f-aac6-7a0dcba21754",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains values\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\"));",
											"});",
											"",
											"pm.test(\"Latest Related Information entry should contain the latest details\", function () { ",
											"    const lastItem = respJson[respJson.length - 1];",
											"    pm.expect(lastItem.description).to.equal(\"Related Information updated\");",
											"    pm.expect(lastItem.url).to.equal(\"http://example.com/updated\");",
											"    pm.expect(lastItem.id).to.equal(pm.globals.get(\"latest_related_information_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Related Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34b0be70-476a-4b17-9eb7-96d3815865a4",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains one less value than before\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\") - 1);",
											"});",
											"",
											"pm.test(\"Related Information array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"latest_related_information_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information/{{latest_related_information_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information",
										"{{latest_related_information_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Related Information entry deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348975e3-2c7e-4c8a-bc17-63520fff852d",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Related Information array contains one less value than before\", function () {",
											"    pm.expect(respJson.length).to.equal(pm.globals.get(\"number_of_related_information_items\") - 1);",
											"});",
											"",
											"pm.test(\"Related Information array should no longer contain the deleted item\", function () { ",
											"    pm.expect(respJson.some(item => item.id === pm.globals.get(\"latest_related_information_id\"))).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/content/related-information",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"content",
										"related-information"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Content",
					"item": [
						{
							"name": "Content Sections",
							"item": [
								{
									"name": "Get Content Sections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c89c8dd0-2f34-4cbc-b1dd-e263ac0e9de2",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c31cc040-2df9-4751-8e8e-b2f8baead597",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section1_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new Content Sections 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50ac73fb-0efa-46c1-a367-1d6a4dd0710c",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should contain single content section\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"    pm.expect(respJson[0].id).to.equal(pm.globals.get('added_content_section1_id'));",
													"    pm.expect(respJson[0].order).to.equal(2);",
													"    pm.expect(respJson[0].heading).to.equal(\"New section\");",
													"    pm.expect(respJson[0].content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bae8edf4-c86b-4514-afbe-27e16e13d8d4",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section2_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1891dc0-a468-47c6-9211-356fa2d33760",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section3_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new Content Sections 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06088f55-80fd-4c11-8253-7b16b1473e8a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(4);",
													"    pm.expect(section1.heading).to.equal(\"New section\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(3);",
													"    pm.expect(section2.heading).to.equal(\"New section\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"New section\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 1 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2994e3e2-86b1-4f7b-9306-06e77e8cfc1d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section1 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section1 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section1_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section1_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 2 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad41ead6-abe3-4fe7-b277-e8e2fbceec11",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section2 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section2 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section2_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section2_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Section 3 heading",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90b37288-3380-4864-b6de-188419512298",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Content Section should have an updated heading\", function () {",
													"    pm.expect(respJson.heading).to.equal('Updated section3 heading');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\theading: 'Updated section3 heading'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section3_id}}/heading",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section3_id}}",
												"heading"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Sections 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac650c56-5e0c-4fab-83ee-671ba819301a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(2);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_content_section2_id}}': 0,\n    '{{added_content_section3_id}}': 1,\n    '{{added_content_section1_id}}': 2,\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Sections Order updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6efe5ada-2e4c-4e73-82ac-b7251b84099d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(2);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Sections 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88f51180-ac42-4fe8-826a-57570a8fffc8",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(0);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(1);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_content_section2_id}}': 1,\n    '{{added_content_section3_id}}': 2,\n    '{{added_content_section1_id}}': 0,\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Sections Order updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97b64e1b-cb89-4223-8293-5d672c1a3451",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(3);",
													"});",
													"",
													"pm.test(\"Section1 should be correct\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.not.be.undefined;",
													"    pm.expect(section1.order).to.equal(0);",
													"    pm.expect(section1.heading).to.equal(\"Updated section1 heading\");",
													"    pm.expect(section1.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(1);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(2);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Content Section 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0d39a39-0c3a-43eb-b3db-6a8fcfb6f22a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f69520da-fdb4-47a2-b9ed-9ff870863270",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Content Section without specifying order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba217fa5-1bbe-4bdd-ade7-03b89b4587d8",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(2);",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"added_content_section4_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Content Section added without order specified",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e45ebad2-c84a-4450-8d0b-3c0f141a8669",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"Section1 should not appear\", function () {",
													"    const section1 = respJson.find(section => section.id === pm.globals.get('added_content_section1_id'));",
													"    pm.expect(section1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Section2 should be correct\", function () {",
													"    const section2 = respJson.find(section => section.id === pm.globals.get('added_content_section2_id'));",
													"    pm.expect(section2).to.not.be.undefined;",
													"    pm.expect(section2.order).to.equal(0);",
													"    pm.expect(section2.heading).to.equal(\"Updated section2 heading\");",
													"    pm.expect(section2.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Section3 should be correct\", function () {",
													"    const section3 = respJson.find(section => section.id === pm.globals.get('added_content_section3_id'));",
													"    pm.expect(section3).to.not.be.undefined;",
													"    pm.expect(section3.order).to.equal(1);",
													"    pm.expect(section3.heading).to.equal(\"Updated section3 heading\");",
													"    pm.expect(section3.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{added_content_section4_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{added_content_section4_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Content Blocks",
							"item": [
								{
									"name": "Add Content Section to test Content Blocks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9425460-7d2e-4640-b755-042bfb3d722b",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Store variables\", function() {",
													"    pm.globals.set(\"content_section_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HTMLBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74e36139-a309-4284-8a60-5b8a5a9008fb",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New HTMLBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    ",
													"    pm.globals.set(\"added_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add MarkDown Block",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913fa7a0-51d3-4263-984f-bcce83e120ff",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New MarkDownBlock should be present\", function () {",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    // MarkDownBlocks are deprecated, and so an HtmlBlock is created",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"added_markdownblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'MarkDownBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks added",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22cdf92b-30e1-4b2d-bd08-9b937fa0e98f",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content; ",
													"    pm.expect(content.length).to.equal(2);",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(1);",
													"    pm.expect(markDownBlock.heading).to.be.undefined;",
													"    pm.expect(markDownBlock.body).to.be.undefined;",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(2);",
													"    pm.expect(htmlBlock.heading).to.be.undefined;",
													"    pm.expect(htmlBlock.body).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "002ad617-58f4-4180-9da2-4dba1922fe7e",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The HtmlBlock should be updated\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"added_htmlblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(2);",
													"    pm.expect(respJson.body).to.equal(\"<h1>Update!></h1><p>This is the new body for the HTML Block.<p>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '<h1>Update!></h1><p>This is the new body for the HTML Block.<p>'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update MarkDownBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b1ce0f4-0099-4da4-b55e-610a5eeb55e8",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The MarkDown Block should show the updated details\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"added_markdownblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '*Update!*\\n\\nThis is the new body for the _MarkDown Block._'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_markdownblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_markdownblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e85a7b9-9ab3-496b-ac3c-f429aff8ccf4",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content; ",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated, and so HtmlBlocks are created instead",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(1);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reorder Content Blocks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75cd8d62-d1bd-4af3-a408-eb81e6bc4928",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2); ",
													"});",
													"",
													"pm.test(\"Results should be correct\", function () {",
													"    const markDownBlock = respJson.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlocks are deprecated and so create HtmlBlocks",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(2);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = respJson.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t'{{added_htmlblock_id}}': 1,\n\t'{{added_markdownblock_id}}': 2\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/blocks/order",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"blocks",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Blocks order updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5af30968-df78-46de-9474-cf41f72d2221",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New Content Section should be present\", function () { ",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.heading).to.equal('New section');",
													"    pm.expect(respJson.order).to.equal(0);",
													"});",
													"",
													"pm.test(\"content should be correct\", function () {",
													"    const content = respJson.content;",
													"    pm.expect(content.length).to.equal(2);",
													"    ",
													"    const markDownBlock = content.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.not.be.undefined;",
													"    // MarkDownBlock is deprecated",
													"    pm.expect(markDownBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(markDownBlock.order).to.equal(2);",
													"    pm.expect(markDownBlock.body).to.equal(\"*Update!*\\n\\nThis is the new body for the _MarkDown Block._\");",
													"    ",
													"    const htmlBlock = content.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch MarkDownBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4f78440-5e35-47a4-b7df-dbe2146b258a",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1); ",
													"});",
													"",
													"pm.test(\"Results should be correct\", function () {",
													"    const insetTextBlock = respJson.find(block => block.id === pm.globals.get('added_insettextblock_id'));",
													"    pm.expect(insetTextBlock, 'InsetTextBlock should exist').to.be.undefined;",
													"    ",
													"    const markDownBlock = respJson.find(block => block.id === pm.globals.get('added_markdownblock_id'));",
													"    pm.expect(markDownBlock, 'MarkDownBlock should exist').to.be.undefined;",
													"    ",
													"    const htmlBlock = respJson.find(block => block.id === pm.globals.get('added_htmlblock_id'));",
													"    pm.expect(htmlBlock, 'HtmlBlock should exist').to.not.be.undefined;",
													"    pm.expect(htmlBlock.type).to.equal('HtmlBlock');",
													"    pm.expect(htmlBlock.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_markdownblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_markdownblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "933d9806-1ae3-4b73-822e-ed515c71fb23",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{content_section_id}}/block/{{added_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{content_section_id}}",
												"block",
												"{{added_htmlblock_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Fixed sections",
							"item": [
								{
									"name": "Get fixed sections ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "341f8cb7-1d9e-4658-aa88-e0d0be6392ef",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.globals.set('release_summary_section_id', respJson.release.summarySection.id);",
													"pm.globals.set('release_headlines_section_id', respJson.release.headlinesSection.id);",
													"pm.globals.set('release_key_statistics_section_id', respJson.release.keyStatisticsSection.id);",
													"pm.globals.set('release_key_statistics_secondary_section_id', respJson.release.keyStatisticsSecondarySection.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HtmlBlock to summarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee5a13de-431e-44ae-95b1-d401923ae259",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New HTMLBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"summary_section_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add HtmlBlock to headlinesSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ad2381-f55a-49be-add6-7668bcde312d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New MarkDownBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"headlines_section_htmlblock_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\torder: 1,\n\ttype: 'HtmlBlock'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_headlines_section_id}}/blocks/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_headlines_section_id}}",
												"blocks",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update summarySection HtmlBlock",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3a1fe4c-2635-4aac-85f7-bbfa65d328e6",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"The HtmlBlock should be updated\", function () { ",
													"    pm.expect(respJson.id).to.equal(pm.globals.get(\"summary_section_htmlblock_id\"));",
													"    pm.expect(respJson.type).to.equal(\"HtmlBlock\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"    pm.expect(respJson.body).to.equal(\"<b>Html Block HTML!!!!</b>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\tbody: '<b>Html Block HTML!!!!</b>'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/block/{{summary_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"block",
												"{{summary_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach DataBlock to keyStatisticsSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6571e043-82c0-47d4-b0c6-d7d813e14223",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New DataBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.type).to.equal(\"DataBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"key_statistics_section_datablock_id\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentBlockId\": \"{{sub1_datablock1_id}}\",\n    \"order\": 0\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach DataBlock to keyStatisticsSecondarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ae42f4d-e4a3-49ea-8d73-e1cdacfb796a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New DataBlock should be present\", function () { ",
													"    // assert new block details",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.type).to.equal(\"DataBlock\");",
													"    pm.expect(respJson.content).to.be.undefined;",
													"    ",
													"    // assert that deliberately excluded fields are not present",
													"    pm.expect(respJson.contentSection).to.be.undefined;",
													"    pm.expect(respJson.contentSectionId).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Store variables for upcoming tests\", function () {",
													"    pm.globals.set(\"key_statistics_secondary_section_datablock_id\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentBlockId\": \"{{sub1_datablock2_id}}\",\n    \"order\": 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_secondary_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_secondary_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate that blocks were added",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86f062a-6961-4e60-befa-1ccb4b6a1db9",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"summarySection should be correct\", function () {",
													"    const summarySection = respJson.release.summarySection;",
													"    pm.expect(summarySection.id).to.equal(pm.globals.get('release_summary_section_id'));",
													"    pm.expect(summarySection.order).to.equal(0);",
													"    pm.expect(summarySection.content.length).to.equal(1);",
													"    pm.expect(summarySection.content[0].body).to.equal(\"<b>Html Block HTML!!!!</b>\");",
													"    pm.expect(summarySection.content[0].type).to.equal(\"HtmlBlock\");",
													"    pm.expect(summarySection.content[0].id).to.equal(pm.globals.get('summary_section_htmlblock_id'));",
													"    pm.expect(summarySection.content[0].order).to.equal(1);",
													"});",
													"",
													"pm.test(\"headlinesSection should be correct\", function () {",
													"    const headlinesSection = respJson.release.headlinesSection;",
													"    pm.expect(headlinesSection.id).to.equal(pm.globals.get('release_headlines_section_id'));",
													"    pm.expect(headlinesSection.order).to.equal(0);",
													"    pm.expect(headlinesSection.content.length).to.equal(1);",
													"    pm.expect(headlinesSection.content[0].type).to.equal(\"HtmlBlock\");",
													"    pm.expect(headlinesSection.content[0].id).to.equal(pm.globals.get('headlines_section_htmlblock_id'));",
													"    pm.expect(headlinesSection.content[0].order).to.equal(1);",
													"});",
													"",
													"pm.test(\"keyStatisticsSection should be correct\", function () {",
													"    const keyStatsSection = respJson.release.keyStatisticsSection;",
													"    pm.expect(keyStatsSection.id).to.equal(pm.globals.get('release_key_statistics_section_id'));",
													"    pm.expect(keyStatsSection.order).to.equal(0);",
													"    pm.expect(keyStatsSection.content.length).to.equal(1);",
													"    pm.expect(keyStatsSection.content[0].type).to.equal(\"DataBlock\");",
													"    pm.expect(keyStatsSection.content[0].id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(keyStatsSection.content[0].order).to.equal(0);",
													"});",
													"",
													"pm.test(\"keyStatisticsSecondarySection should be correct\", function () {",
													"    const keyStatsSecondarySection = respJson.release.keyStatisticsSecondarySection;",
													"    pm.expect(keyStatsSecondarySection.id).to.equal(pm.globals.get('release_key_statistics_secondary_section_id'));",
													"    pm.expect(keyStatsSecondarySection.order).to.equal(0);",
													"    pm.expect(keyStatsSecondarySection.content.length).to.equal(1);",
													"    pm.expect(keyStatsSecondarySection.content[0].type).to.equal(\"DataBlock\");",
													"    pm.expect(keyStatsSecondarySection.content[0].id).to.equal(pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(keyStatsSecondarySection.content[0].order).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HtmlBlock from summarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47e4b1e1-d876-4e4b-b8be-55d274151ff0",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_summary_section_id}}/block/{{summary_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_summary_section_id}}",
												"block",
												"{{summary_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HtmlBlock from headlinesSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35be4345-a903-4629-8238-fbb8c8bcc68e",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_headlines_section_id}}/block/{{headlines_section_htmlblock_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_headlines_section_id}}",
												"block",
												"{{headlines_section_htmlblock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch DataBlock from keyStatisticsSection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "329633b4-8a8e-40e5-94e7-383d1453ecdb",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_section_id}}/block/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_section_id}}",
												"block",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detatch DataBlock from keyStatisticsSecondarySection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25f0d3ad-dafa-474e-985a-d8173fa05815",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of results should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(0); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{release_key_statistics_secondary_section_id}}/block/{{sub1_datablock2_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{release_key_statistics_secondary_section_id}}",
												"block",
												"{{sub1_datablock2_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate that blocks has been removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "186a14db-da7f-4036-b858-929ec859df15",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"summarySection should be correct\", function () {",
													"    const summarySection = respJson.release.summarySection;",
													"    pm.expect(summarySection.id).to.equal(pm.globals.get('release_summary_section_id'));",
													"    pm.expect(summarySection.order).to.equal(0);",
													"    pm.expect(summarySection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"headlinesSection should be correct\", function () {",
													"    const headlinesSection = respJson.release.headlinesSection;",
													"    pm.expect(headlinesSection.id).to.equal(pm.globals.get('release_headlines_section_id'));",
													"    pm.expect(headlinesSection.order).to.equal(0);",
													"    pm.expect(headlinesSection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"keyStatisticsSection should be correct\", function () {",
													"    const keyStatsSection = respJson.release.keyStatisticsSection;",
													"    pm.expect(keyStatsSection.id).to.equal(pm.globals.get('release_key_statistics_section_id'));",
													"    pm.expect(keyStatsSection.order).to.equal(0);",
													"    pm.expect(keyStatsSection.content).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"keyStatisticsSecondarySection should be correct\", function () {",
													"    const keyStatsSecondarySection = respJson.release.keyStatisticsSecondarySection;",
													"    pm.expect(keyStatsSecondarySection.id).to.equal(pm.globals.get('release_key_statistics_secondary_section_id'));",
													"    pm.expect(keyStatsSecondarySection.order).to.equal(0);",
													"    pm.expect(keyStatsSecondarySection.content).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Data Blocks",
							"item": [
								{
									"name": "Get available data blocks 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f75b3a56-0b03-4c8e-bcc0-8b5eef29354b",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"const datablock1 = respJson.find(db => db.id === pm.globals.get('sub1_datablock1_id'));",
													"pm.test(\"datablock1 should be within results\", function () {",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"});",
													"",
													"const datablock2 = respJson.find(db => db.id === pm.globals.get('sub1_datablock2_id'));",
													"pm.test(\"datablock2 should be within results\", function () {",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"datablock1 heading should be correct\", function () {",
													"    pm.expect(datablock1.heading).to.equal(`Admin API test title`);",
													"});",
													"",
													"pm.test(\"datablock1 name should be correct\", function () {",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\"); ",
													"});",
													"",
													"pm.test(\"datablock1 source should be correct\", function () {",
													"    pm.expect(datablock1.source).to.equal(\"Admin API test source\"); ",
													"});",
													"",
													"pm.test(\"datablock1 dataBlockRequest should be correct\", function () {",
													"    const dbReq = datablock1.dataBlockRequest;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
													"        \"E06000001\",",
													"        \"E06000002\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock1 charts should be correct\", function () {",
													"    pm.expect(datablock1.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock1 tables should be correct\", function () {",
													"    pm.expect(datablock1.tables.length).to.equal(1);",
													"    const table = datablock1.tables[0];",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    ",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
													"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
													"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E06000002\",",
													"        \"E06000001\",",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});",
													"",
													"pm.test(\"datablock2 heading should be correct\", function () {",
													"    pm.expect(datablock2.heading).to.equal(`Admin API test title 2`);",
													"});",
													"",
													"pm.test(\"datablock2 name should be correct\", function () {",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 source should be correct\", function () {",
													"    pm.expect(datablock2.source).to.equal(\"Admin API test source 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 dataBlockRequest should be correct\", function () {",
													"    const dbReq = datablock2.dataBlockRequest;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.ward).to.have.members([",
													"        \"E05010291\",",
													"        \"E05010450\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock2 charts should be correct\", function () {",
													"    pm.expect(datablock2.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock2 tables should be correct\", function () {",
													"    pm.expect(datablock2.tables.length).to.equal(1);",
													"    const table = datablock2.tables[0];",
													"    pm.expect(table.indicators).to.equal(undefined);",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2005_CY\", \"2006_CY\", ",
													"        \"2007_CY\", \"2008_CY\", ",
													"        \"2009_CY\", \"2010_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E05010450\",",
													"        \"E05010291\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a Content Section to attach an available Data Block to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46076754-c831-40ab-9b75-bfcbdfd0cf02",
												"exec": [
													"pm.test(\"Store environment variables\", function() {",
													"    const respJson = pm.response.json();",
													"    pm.expect(respJson.id).to.not.be.null;",
													"    pm.globals.set(\"datablock_content_section_id\", respJson.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\torder: 0\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/sections/add",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"sections",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach datablock1 to new content section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69b6cde5-602a-479b-b4fc-6cc51861ad4c",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to attach same data block twice 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06603a04-bec2-4f72-b309-457112867960",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code should be correct\", function () { ",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error should be correct\", function () {",
													"    pm.expect(respJson.errors[''][0]).to.equal(\"CONTENT_BLOCK_ALREADY_ATTACHED_TO_CONTENT_SECTION\"); ",
													"    pm.expect(respJson.title).to.equal(\"One or more validation errors occurred.\");",
													"    pm.expect(respJson.status).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "872c48ea-b041-4c37-a72e-cfdc0b772532",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Response should contain unattached datablocks\", function () {",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.exist;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4fd01a0-33b8-41e4-a7a4-0418ae10f285",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Content Section should contain the newly attached Data Block\", function () { ",
													"    const datablock = respJson.content[0];",
													"    ",
													"    pm.expect(datablock.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock.type).to.equal(\"DataBlock\");",
													"    pm.expect(datablock.order).to.equal(1);",
													"    pm.expect(datablock.name).to.equal(\"Admin API data block 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach datablock2 to new content section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac5c7c3e-76fc-4299-a001-6a3e39120d91",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(respJson.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock2_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to attach same data block twice 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "853775a7-168b-4f0c-92d6-d47c43fb433a",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code should be correct\", function () { ",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error should be correct\", function () {",
													"    pm.expect(respJson.errors[''][0]).to.equal(\"CONTENT_BLOCK_ALREADY_ATTACHED_TO_CONTENT_SECTION\"); ",
													"    pm.expect(respJson.title).to.equal(\"One or more validation errors occurred.\");",
													"    pm.expect(respJson.status).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock2_id}}'\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e799bc4a-99ac-4551-82d3-5c504b4689a1",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"    ",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block  Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3912eb64-ec9f-4376-aaa1-164f33d1b73d",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"content should contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(datablock1.order).to.equal(1);",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(datablock2.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach a Data Block from the Content Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d88c3b90-1dbb-495b-b68c-f0e00413e3f9",
												"exec": [
													"var respJson;",
													"",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    respJson = pm.response.json();",
													"});",
													"",
													"pm.test(\"Response shouldn't contain datablock1\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Response should contain datablock2\", function () { ",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/block/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"block",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f683fe6-f8b5-4c63-a2bd-a036d4626ee2",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Response should contain unattached datablocks\", function () {",
													"    const datablock1 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.exist;",
													"});",
													"",
													"pm.test(\"Response shouldn't contain attached datablocks\", function () {",
													"    const datablock2 = respJson.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section attached data blocks are correct",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c774cdfa-b986-4715-bdd0-13748ae0701b",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"content shouldn't contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.be.undefined;",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach the newly available Data Block to the Content Section with explicit order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c448061-2ad5-4baa-bbd6-9fdb272cccd3",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Attached datablock should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(respJson.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(respJson.order).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\tcontentBlockId: '{{sub1_datablock1_id}}',\n\t\torder: 1\n}"
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}/blocks/attach",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}",
												"blocks",
												"attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get available data blocks 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b673902-bf74-41d8-ab4b-84a0184b3d78",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response length should be correct\", function () {",
													"    pm.expect(respJson).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Content Section contains newly attached Data Block",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b39b8f6-48c8-499c-89b4-a2863163eb44",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Content section details should be correct\", function () {",
													"    pm.expect(respJson.id).to.equal(pm.globals.get('datablock_content_section_id')); ",
													"    pm.expect(respJson.order).to.equal(0);",
													"    pm.expect(respJson.heading).to.equal(\"New section\");",
													"    pm.expect(respJson.content.length).to.equal(2);",
													"});",
													"",
													"pm.test(\"content should contain datablock1\", function () {",
													"    const datablock1 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock1_id'));",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\");",
													"    pm.expect(datablock1.order).to.equal(1);",
													"});",
													"",
													"pm.test(\"content should contain datablock2\", function () { ",
													"    const datablock2 = respJson.content.find(datablock => datablock.id === pm.globals.get('sub1_datablock2_id'));",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\");",
													"    pm.expect(datablock2.order).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove the Content Section to verify Data Blocks aren't deleted as well",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "214c5368-c5dc-4056-b052-ac53eeb25ddb",
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"New Content Section should be removed\", function () { ",
													"    const section = respJson.find(section => section.id === pm.globals.get('datablock_content_section_id'));",
													"    pm.expect(section).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/section/{{datablock_content_section_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"section",
												"{{datablock_content_section_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify that the Data Blocks are available again after deleting the Content Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15514fe3-def0-412b-80f8-56b8fb0bd555",
												"exec": [
													"var respJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () { ",
													"    pm.response.to.have.status(200); ",
													"});",
													"",
													"pm.test(\"Response should be correct\", function () {",
													"    pm.expect(respJson.length).to.equal(2);",
													"});",
													"",
													"const datablock1 = respJson.find(db => db.id === pm.globals.get('sub1_datablock1_id'));",
													"pm.test(\"datablock1 should be within results\", function () {",
													"    pm.expect(datablock1).to.not.be.undefined;",
													"});",
													"",
													"const datablock2 = respJson.find(db => db.id === pm.globals.get('sub1_datablock2_id'));",
													"pm.test(\"datablock2 should be within results\", function () {",
													"    pm.expect(datablock2).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"datablock1 heading should be correct\", function () {",
													"    pm.expect(datablock1.heading).to.equal(`Admin API test title`);",
													"});",
													"",
													"pm.test(\"datablock1 name should be correct\", function () {",
													"    pm.expect(datablock1.name).to.equal(\"Admin API data block 1\"); ",
													"});",
													"",
													"pm.test(\"datablock1 source should be correct\", function () {",
													"    pm.expect(datablock1.source).to.equal(\"Admin API test source\"); ",
													"});",
													"",
													"pm.test(\"datablock1 dataBlockRequest should be correct\", function () {",
													"    const dbReq = datablock1.dataBlockRequest;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2007);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2017);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.localAuthority).to.have.members([",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    pm.expect(dbReq.locations.localAuthorityDistrict).to.have.members([",
													"        \"E06000001\",",
													"        \"E06000002\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock1 charts should be correct\", function () {",
													"    pm.expect(datablock1.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock1 tables should be correct\", function () {",
													"    pm.expect(datablock1.tables.length).to.equal(1);",
													"    const table = datablock1.tables[0];",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(11);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2007_CY\", \"2008_CY\", \"2009_CY\", \"2010_CY\",",
													"        \"2011_CY\", \"2012_CY\", \"2013_CY\", \"2014_CY\",",
													"        \"2015_CY\", \"2016_CY\", \"2017_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(4);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E06000002\",",
													"        \"E06000001\",",
													"        \"E08000016\",",
													"        \"E08000025\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});",
													"",
													"pm.test(\"datablock2 heading should be correct\", function () {",
													"    pm.expect(datablock2.heading).to.equal(`Admin API test title 2`);",
													"});",
													"",
													"pm.test(\"datablock2 name should be correct\", function () {",
													"    pm.expect(datablock2.name).to.equal(\"Admin API data block 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 source should be correct\", function () {",
													"    pm.expect(datablock2.source).to.equal(\"Admin API test source 2\"); ",
													"});",
													"",
													"pm.test(\"datablock2 dataBlockRequest should be correct\", function () {",
													"    const dbReq = datablock2.dataBlockRequest;",
													"    pm.expect(dbReq.subjectId).to.equal(pm.globals.get('sub1_id'));",
													"    pm.expect(dbReq.timePeriod.startYear).to.equal(2005);",
													"    pm.expect(dbReq.timePeriod.startCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.timePeriod.endYear).to.equal(2010);",
													"    pm.expect(dbReq.timePeriod.endCode).to.equal(\"CY\");",
													"    pm.expect(dbReq.filters).to.be.an('array').that.is.empty;",
													"    pm.expect(dbReq.indicators.length).to.equal(1);",
													"    pm.expect(dbReq.indicators[0]).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"    pm.expect(dbReq.locations.ward).to.have.members([",
													"        \"E05010291\",",
													"        \"E05010450\"",
													"    ]);",
													"});",
													"",
													"pm.test(\"datablock2 charts should be correct\", function () {",
													"    pm.expect(datablock2.charts).to.be.an('array').that.is.empty; ",
													"});",
													"",
													"pm.test(\"datablock2 tables should be correct\", function () {",
													"    pm.expect(datablock2.tables.length).to.equal(1);",
													"    const table = datablock2.tables[0];",
													"    pm.expect(table.indicators).to.equal(undefined);",
													"    pm.expect(table.tableHeaders.columnGroups).to.be.an('array').that.is.empty;",
													"    pm.expect(table.tableHeaders.columns.length).to.equal(6);",
													"    ",
													"    const column = table.tableHeaders.columns.map(timePeriod => timePeriod.value);",
													"    pm.expect(column).to.have.members([",
													"        \"2005_CY\", \"2006_CY\", ",
													"        \"2007_CY\", \"2008_CY\", ",
													"        \"2009_CY\", \"2010_CY\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rowGroups.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rowGroups[0].length).to.equal(2);",
													"    ",
													"    const row = table.tableHeaders.rowGroups[0].map(location => location.value);",
													"    pm.expect(row).to.have.members([",
													"        \"E05010450\",",
													"        \"E05010291\"",
													"    ]);",
													"    ",
													"    pm.expect(table.tableHeaders.rows.length).to.equal(1);",
													"    pm.expect(table.tableHeaders.rows[0].type).to.equal(\"Indicator\");",
													"    pm.expect(table.tableHeaders.rows[0].value).to.equal(pm.globals.get('SUB1_IND_Admission_Numbers'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/content/available-datablocks",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"content",
												"available-datablocks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete data block 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4009852e-cdac-48f9-851c-2a751bcc6411",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/{{sub1_datablock1_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"datablocks",
												"{{sub1_datablock1_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete data block 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dacc040d-302b-49cf-8d54-be052918f62e",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/{{sub1_datablock2_id}}",
											"host": [
												"{{admin_api_url}}"
											],
											"path": [
												"release",
												"{{release_id}}",
												"datablocks",
												"{{sub1_datablock2_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release",
			"item": [
				{
					"name": "Check status updates",
					"item": [
						{
							"name": "Release - API test publication - 2025",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release summary - API test publication - 2025",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98320f69-573b-4df3-bab7-33ce979cc916",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"Save SUB1 summary id\", function () {",
											"    pm.globals.set('sub1_summary_id', respJson.id);",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e0a6d36-42a7-4ddd-8d67-0189335545fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/summary/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"summary",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release Status - API test publication - 2025",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e8ef306-1959-4355-841f-ffee322eb510",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"HigherLevelReview\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Higher review\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "611ac319-6664-43b8-920e-fc152fd3571f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"releaseStatus\": \"HigherLevelReview\",\n\t\"internalReleaseNote\": \"API test note - Higher review\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/status",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release summary - API test publication - 2025 - Check 1st change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a66fbfe2-e160-43e2-b6ad-c9c78bfcb124",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"HigherLevelReview\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Higher review\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2db4165-5202-499f-90ab-9e486f1df508",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/summary/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"summary",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "453cdc64-def0-48d2-bcfa-26895758170c",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    })",
											"});",
											"",
											"pm.test(\"Should contain API test release\", function() {",
											"    var testRelease = respJson.find(release => release.id === pm.globals.get('release_id'));",
											"    pm.expect(testRelease).to.not.be.undefined;",
											"    pm.expect(testRelease.title).to.equal(\"Calendar Year 2025\");",
											"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
											"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
											"    pm.expect(testRelease.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\");",
											"    pm.expect(testRelease.live).to.equal(false);",
											"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"CY\");",
											"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
											"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(testRelease.status).to.equal(\"HigherLevelReview\");",
											"    pm.expect(testRelease.internalReleaseNote).to.equal(\"API test note - Higher review\");",
											"    //pm.expect(testRelease.draftComments.length).to.equal(3); // Not implemented!",
											"    //pm.expect(testRelease.higherReviewComments.length).to.equal(1); // Not implemented!",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61b35ee0-debd-4fe3-bb42-0103d4d8b5e2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9801f18a-6275-4fa2-9476-a04777d2a529",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Shouldn't contain API test publication - 2025 release\", function() {",
											"    pm.expect(",
											"        respJson.find(release => release.id === pm.globals.get('release_id')))",
											"        .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.equal(\"Approved\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92811ec4-8495-46ed-be2d-4947d953bf99",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release Status - API test publication - 2025 - Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d73e455d-7484-4ec1-aa6c-0fcfe21b805a",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fec7188e-6ba3-481f-83c9-5d65dbfeb2e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"releaseStatus\": \"Draft\",\n\t\"internalReleaseNote\": \"API test note - Draft\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/status",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release summary - API test publication - 2025 - Check 2nd change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f20335c0-85e9-4ab4-953e-0f428099a4e9",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93df3d0b-0221-4364-9385-ed389aac39c8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/summary/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"summary",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Release Status - API test publication - 2025 - Approved",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9db6425-a1a8-48c2-9a7e-4796ff9a3120",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Approved\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Approved\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d8c6a99-045d-4c59-b330-1af8962adc42",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"releaseStatus\": \"Approved\",\n\t\"internalReleaseNote\": \"API test note - Approved\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/status",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release summary - API test publication - 2025 - Check 3rd change",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31711622-7d4a-4b87-8eba-cea9e3635764",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.label\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"slug\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"internalReleaseNote\"));",
											"});",
											"",
											"pm.test(\"id should match summary id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get('sub1_summary_id'));",
											"});",
											"",
											"pm.test(\"type should should be correct\", function () { ",
											"    pm.expect(respJson.type.id).to.equal(\"8becd272-1100-4e33-8a7d-1c0c4e3b42b8\");",
											"    pm.expect(respJson.type.title).to.equal(\"National Statistics\");",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"CY\"); ",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\"); ",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"1\");",
											"});",
											"",
											"pm.test(\"releaseName should be correct\", function() {",
											"    pm.expect(respJson.releaseName).to.equal(\"2025\"); ",
											"});",
											"",
											"pm.test(\"slug should be correct\", function() {",
											"    pm.expect(respJson.slug).to.equal(\"2025\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function() {",
											"    pm.expect(respJson.status).to.equal(\"Approved\"); ",
											"});",
											"",
											"pm.test(\"internalReleaseNote should be correct\", function() {",
											"    pm.expect(respJson.internalReleaseNote).to.equal(\"API test note - Approved\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af065952-1b7f-4046-bc2a-69ea66794359",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/{{release_id}}/summary/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"{{release_id}}",
										"summary",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "155ecf6e-8d04-4b1a-83f5-e71110b03263",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    })",
											"});",
											"",
											"pm.test(\"Shouldn't contain API test publication - 2025 release\", function() {",
											"    pm.expect(",
											"        respJson.find(release => release.id === pm.globals.get('release_id')))",
											"        .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9ae76a7-b134-4451-a30b-51e00be2eb76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 2 - TESTS STOP HERE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f60a4eab-ead4-4e1c-ba7e-c28eb002d6ce",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    respJson.every(function (release) {",
											"        pm.expect(release.status).to.equal(\"Approved\");",
											"    });",
											"});",
											"",
											"pm.test(\"Should contain API test release\", function() {",
											"    var testRelease = respJson.find(release => release.id === pm.globals.get('release_id'));",
											"    pm.expect(testRelease).to.not.be.undefined;",
											"    pm.expect(testRelease.title).to.equal(\"Calendar Year 2025\");",
											"    pm.expect(testRelease.publicationId).to.equal(pm.globals.get('publication_id'));",
											"    pm.expect(testRelease.publicationTitle).to.equal(`API test publication ${pm.globals.get('RUN_IDENTIFIER')}`);",
											"    pm.expect(testRelease.nextReleaseDate.year).to.equal(\"2027\");",
											"    pm.expect(testRelease.nextReleaseDate.month).to.equal(\"1\");",
											"    pm.expect(testRelease.nextReleaseDate.day).to.equal(\"1\");",
											"    pm.expect(testRelease.publishScheduled).to.equal(\"2026-01-01T00:00:00Z\");",
											"    pm.expect(testRelease.live).to.equal(false);",
											"    pm.expect(testRelease.timePeriodCoverage.value).to.equal(\"CY\");",
											"    pm.expect(testRelease.timePeriodCoverage.label).to.equal(\"Calendar Year\");",
											"    //pm.expect(testRelease.latestRelease).to.equal(false); // Not implemented!",
											"    //pm.expect(testRelease.type.title).to.equal(\"National Statistics\");",
											"    pm.expect(testRelease.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(testRelease.status).to.equal(\"Approved\");",
											"    pm.expect(testRelease.internalReleaseNote).to.equal(\"API test note - Approved\");",
											"    //pm.expect(testRelease.draftComments.length).to.equal(3); // Not implemented!",
											"    //pm.expect(testRelease.higherReviewComments.length).to.equal(1); // Not implemented!",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a0d4976-138b-4790-bc23-584d8097aa78",
										"exec": [
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data files upload - API test release - 2025",
					"item": [
						{
							"name": "Upload data file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab12cd41-c092-42ce-a817-5471a6666770",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should return some results\", function () {",
											"    pm.expect(respJson.length).to.equal(2);    ",
											"});",
											"",
											"pm.test(\"Metadata file response should be correct\", function () {",
											"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
											"    pm.expect(respJson[0].size).to.equal(\"143 B\");",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"    pm.expect(respJson[0].rows).to.equal(2);",
											"    //pm.expect(respJson[0].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});",
											"",
											"pm.test(\"Data file response should be correct\", function () {",
											"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[1].name).to.equal(\"Admin API test data upload\");",
											"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
											"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
											"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
											"    pm.expect(respJson[1].rows).to.equal(161);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "files/admin-api-test.csv"
										},
										{
											"key": "metaFile",
											"type": "file",
											"src": "files/admin-api-test.meta.csv"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20data%20upload"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload data file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19d890d6-0476-4daa-8038-a04746ef3ab5",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal('CANNOT_OVERWRITE_DATA_FILE');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "files/admin-api-test.csv"
										},
										{
											"key": "metaFile",
											"type": "file",
											"src": "files/admin-api-test.meta.csv"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data?name=Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20data%20upload"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get data files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "826d9e9a-20b0-4ec6-8e27-5df3497e0fe6",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Should return some results\", function () {",
											"    pm.expect(respJson.length).to.equal(2);    ",
											"});",
											"",
											"pm.test(\"Metadata file response should be correct\", function () {",
											"    pm.expect(respJson[0].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.meta.csv`);",
											"    pm.expect(respJson[0].size).to.equal(\"143 B\");",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"    pm.expect(respJson[0].rows).to.equal(2);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});",
											"",
											"pm.test(\"Data file response should be correct\", function () {",
											"    pm.expect(respJson[1].extension).to.equal(\"csv\");",
											"    pm.expect(respJson[1].name).to.equal(\"Admin API test data upload\");",
											"    pm.expect(respJson[1].path).to.equal(`${pm.globals.get('release_id')}/data/admin-api-test.csv`);",
											"    pm.expect(respJson[1].size).to.equal(\"15 Kb\");",
											"    pm.expect(respJson[1].metaFileName).to.equal(\"admin-api-test.meta.csv\");",
											"    pm.expect(respJson[1].rows).to.equal(161);",
											"    //pm.expect(respJson[1].userName).to.equal(\"mark@hiveit.co.uk\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete data file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfbe252d-2a86-4c05-842e-7d54dd1e2055",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data",
										"admin-api-test.csv",
										"Admin%20API%20test%20data%20upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete data file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67848307-4424-4977-855e-62e6fb1d187b",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data/admin-api-test.csv/Admin%20API%20test%20data%20upload",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data",
										"admin-api-test.csv",
										"Admin%20API%20test%20data%20upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get data files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1088f054-a26e-4a28-8c24-1288b51a8a0e",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f481c262-e3f5-4c55-8336-115b7e5bf545",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/data",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"data"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ae456a7-8fcc-4984-bfef-b33ddf8b68a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e3d0f20-03fb-4cec-826f-d9578e458887",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ancillary files - API test publicaiton - 2025",
					"item": [
						{
							"name": "Upload ancillary file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2d69017-4faf-4957-befa-6039b7022e45",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"doc\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test ancillary file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/ancillary/admin-api-test-ancillary.doc`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"28 B\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-ancillary.doc"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary?name=Admin%20API%20test%20ancillary%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20ancillary%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload ancillary file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "257e562e-8f8d-4e53-9ca6-e56baba37e6f",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"errors should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"CANNOT_OVERWRITE_FILE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-ancillary.doc"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary?name=Admin%20API%20test%20ancillary%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20ancillary%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ancillary files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a40be7c-0004-42c9-a41d-e26a5fe09048",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"doc\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test ancillary file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/ancillary/admin-api-test-ancillary.doc`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"28 B\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ancillary file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50702b04-9806-4244-8676-385e523e7495",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary/admin-api-test-ancillary.doc",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary",
										"admin-api-test-ancillary.doc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ancillary file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0619a8-32a7-4944-a2bb-75d64fe24b5e",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary/admin-api-test-ancillary.doc",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary",
										"admin-api-test-ancillary.doc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ancillary files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "309f1e41-f852-49c3-9dde-4644087a01d9",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c3e650a-2654-484c-87cf-be540729c97e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/ancillary",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"ancillary"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89645340-a8e1-4766-bcc6-e019edccb434",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d274a6e8-f6f8-4aeb-95a6-05a9756c06d1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Chart files - API test publicaiton - 2025",
					"item": [
						{
							"name": "Upload chart file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc88040f-c15e-4102-8155-4c978ffafe9f",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"png\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test chart file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/chart/admin-api-test-chart.png`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"823 Kb\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-chart.png"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart?name=Admin%20API%20test%20chart%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20chart%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload chart file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34fa01ce-2c46-4da0-9406-97a713218c57",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"errors should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"CANNOT_OVERWRITE_FILE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/mark/projects/explore-education-statistics/tests/newman/files/admin-api-test-chart.png"
										}
									]
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart?name=Admin%20API%20test%20chart%20file",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									],
									"query": [
										{
											"key": "name",
											"value": "Admin%20API%20test%20chart%20file"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get chart files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b8d4a9-372d-4963-a1dc-d3b1981c1667",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"extension should be correct\", function () { ",
											"    pm.expect(respJson[0].extension).to.equal(\"png\"); ",
											"});",
											"",
											"pm.test(\"name should be correct\", function () { ",
											"    pm.expect(respJson[0].name).to.equal(\"Admin API test chart file\"); ",
											"});",
											"",
											"pm.test(\"path should be correct\", function () { ",
											"    pm.expect(respJson[0].path).to.equal(`${pm.globals.get('release_id')}/chart/admin-api-test-chart.png`); ",
											"});",
											"",
											"pm.test(\"size should be correct\", function () { ",
											"    pm.expect(respJson[0].size).to.equal(\"823 Kb\"); ",
											"});",
											"",
											"pm.test(\"metaFileName should be correct\", function () { ",
											"    pm.expect(respJson[0].metaFileName).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete chart file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09db4df2-dd46-4a9b-ac82-b4dc674043e0",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart/admin-api-test-chart.png",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart",
										"admin-api-test-chart.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete chart file again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a95307c0-4f18-489a-a367-988708b9da98",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error should be correct\", function () {",
											"    pm.expect(respJson.errors[''][0]).to.equal(\"FILE_NOT_FOUND\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart/admin-api-test-chart.png",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart",
										"admin-api-test-chart.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get chart files again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7945f6d5-f2c1-459d-bda0-0f92441252ab",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be correct\", function () {",
											"    pm.expect(respJson).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22e738fe-6e38-448b-b466-4e77cf922dcb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/chart",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"chart"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4a0bdf2d-50d3-4fad-89f4-946ee58b4c99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3e08578-7eba-4e17-81d8-66a0bccba199",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DataBlock - API test publication - 2025",
					"item": [
						{
							"name": "Create DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca12735f-9b59-4cd5-861a-dffe8a1fb9ea",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.globals.set(\"datablock_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});",
											"",
											"pm.test(\"dataBlockRequest should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.subjectId\"));",
											"    pm.expect(respJson.dataBlockRequest.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.timePeriod\"));",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startYear).to.equal(\"2013\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.filters\"));",
											"    pm.expect(respJson.dataBlockRequest.filters.length).to.equal(1);",
											"    pm.expect(respJson.dataBlockRequest.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.indicators\"));",
											"    pm.expect(respJson.dataBlockRequest.indicators.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.country\"));",
											"    pm.expect(respJson.dataBlockRequest.country[0]).to.equal(\"E92000001\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.localAuthority\"));",
											"    pm.expect(respJson.dataBlockRequest.localAuthority.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"dataBlockRequest.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"tables should be correct\", function () {",
											"    pm.expect(respJson.tables.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columns\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columns.length).to.equal(2);",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups[0].length).to.equal(4);",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rows\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rows.length).to.equal(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f3d2980-13ee-4ca0-a927-346898b59e4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"dataBlockRequest\": {\n\t\t\"localAuthority\": [\n\t\t\t\"E09000002\",\n\t\t\t\"E09000003\",\n\t\t\t\"E08000016\"\n\t\t],\n\t\t\"country\": [\"E92000001\"],\n\t\t\"subjectId\":\"8\",\n\t\t\"indicators\": [\n\t\t\t\"164\",\n\t\t\t\"165\",\n\t\t\t\"163\"\n\t\t],\n\t\t\"filters\": [\"210\"],\n\t\t\"timePeriod\": {\n\t\t\t\"startYear\":2013,\n\t\t\t\"startCode\":\"HT6\",\n\t\t\t\"endYear\":2014,\n\t\t\t\"endCode\":\"HT6\"\n\t\t}\n\t},\n\t\"heading\":\"Admin API Create Datablock test\",\n\t\"tables\": [\n\t\t{ \n\t\t\t\"indicators\":[],\n\t\t\t\"tableHeaders\": {\n\t\t\t\t\"columnGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"210\",\n\t\t\t\t\t\t\t\"label\":\"Pupil Referral Unit\",\n\t\t\t\t\t\t\t\"isTotal\":false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"rowGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E92000001\",\n\t\t\t\t\t\t\t\"label\":\"England\",\n\t\t\t\t\t\t\t\"level\":\"country\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000002\",\n\t\t\t\t\t\t\t\"label\":\"Barking and Dagenham\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000003\",\n\t\t\t\t\t\t\t\"label\":\"Barnet\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E08000016\",\n\t\t\t\t\t\t\t\"label\":\"Barnsley\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"columns\":[ \n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2013_HT6\",\n\t\t\t\t\t\t\"label\":\"2013/14\",\n\t\t\t\t\t\t\"year\":2013,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2014_HT6\",\n\t\t\t\t\t\t\"label\":\"2014/15\",\n\t\t\t\t\t\t\"year\":2014,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"rows\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"163\",\n\t\t\t\t\t\t\"label\":\"Unauthorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"164\",\n\t\t\t\t\t\t\"label\":\"Authorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"165\",\n\t\t\t\t\t\t\"label\":\"Overall absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlock by created Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b59aedf2-18f4-4818-aea5-fe80c247f304",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});",
											"",
											"pm.test(\"dataBlockRequest should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.subjectId\"));",
											"    pm.expect(respJson.dataBlockRequest.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.timePeriod\"));",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startYear).to.equal(\"2013\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.filters\"));",
											"    pm.expect(respJson.dataBlockRequest.filters.length).to.equal(1);",
											"    pm.expect(respJson.dataBlockRequest.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.indicators\"));",
											"    pm.expect(respJson.dataBlockRequest.indicators.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.country\"));",
											"    pm.expect(respJson.dataBlockRequest.country[0]).to.equal(\"E92000001\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.localAuthority\"));",
											"    pm.expect(respJson.dataBlockRequest.localAuthority.length).to.equal(3);",
											"    ",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"dataBlockRequest.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"tables should be correct\", function () {",
											"    pm.expect(respJson.tables.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columns\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columns.length).to.equal(2);",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups[0].length).to.equal(4);",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rows\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rows.length).to.equal(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df2839bc-72e4-4d05-b8e8-5ea92372b323",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlocks by Release 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4080b13a-69c7-41ce-b5c8-200da4c927cc",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Number of results should be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1); ",
											"});",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson[0].id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson[0].heading).to.equal(\"Admin API Create Datablock test\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c31f8f6-6ccb-425e-a06b-db296740c3cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "269da267-8bbf-43c0-a06d-d36035aea7a9",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson.id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson.heading).to.equal(\"Admin API Create Datablock test renamed!\"); ",
											"});",
											"",
											"pm.test(\"dataBlockRequest should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.subjectId\"));",
											"    pm.expect(respJson.dataBlockRequest.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.timePeriod\"));",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startYear).to.equal(\"2014\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson.dataBlockRequest.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.filters\"));",
											"    pm.expect(respJson.dataBlockRequest.filters.length).to.equal(1);",
											"    pm.expect(respJson.dataBlockRequest.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.indicators\"));",
											"    pm.expect(respJson.dataBlockRequest.indicators.length).to.equal(1);",
											"    pm.expect(respJson.dataBlockRequest.indicators[0]).to.equal(\"164\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"dataBlockRequest.localAuthority\"));",
											"    pm.expect(respJson.dataBlockRequest.localAuthority.length).to.equal(1);",
											"    pm.expect(respJson.dataBlockRequest.localAuthority[0]).to.equal(\"E09000002\");",
											"",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"dataBlockRequest.country\"));",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"dataBlockRequest.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson.charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"tables should be correct\", function () {",
											"    pm.expect(respJson.tables.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columnGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.columns\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.columns.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.columns[0].label).to.equal(\"2014/15\");",
											"    pm.expect(respJson.tables[0].tableHeaders.columns[0].value).to.equal(\"2014_HT6\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rowGroups\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups[0].length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups[0][0].label).to.equal(\"Barking and Dagenham\");",
											"    pm.expect(respJson.tables[0].tableHeaders.rowGroups[0][0].value).to.equal(\"E09000002\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"tables[0].tableHeaders.rows\"));",
											"    pm.expect(respJson.tables[0].tableHeaders.rows.length).to.equal(1);",
											"    pm.expect(respJson.tables[0].tableHeaders.rows[0].label).to.equal(\"Authorised absence rate\");",
											"    pm.expect(respJson.tables[0].tableHeaders.rows[0].value).to.equal(\"164\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c04f831-4e8a-4438-9a9e-5c66e4a9ea01",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"dataBlockRequest\": {\n\t\t\"localAuthority\": [\n\t\t\t\"E09000002\",\n\t\t],\n\t\t\"subjectId\":\"8\",\n\t\t\"indicators\": [\n\t\t\t\"164\"\n\t\t],\n\t\t\"filters\": [\"210\"],\n\t\t\"timePeriod\": {\n\t\t\t\"startYear\":2014,\n\t\t\t\"startCode\":\"HT6\",\n\t\t\t\"endYear\":2014,\n\t\t\t\"endCode\":\"HT6\"\n\t\t}\n\t},\n\t\"heading\":\"Admin API Create Datablock test renamed!\",\n\t\"tables\": [\n\t\t{ \n\t\t\t\"indicators\":[],\n\t\t\t\"tableHeaders\": {\n\t\t\t\t\"columnGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"210\",\n\t\t\t\t\t\t\t\"label\":\"Pupil Referral Unit\",\n\t\t\t\t\t\t\t\"isTotal\":false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"rowGroups\": [\n\t\t\t\t\t[ \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\":\"E09000002\",\n\t\t\t\t\t\t\t\"label\":\"Barking and Dagenham\",\n\t\t\t\t\t\t\t\"level\":\"localAuthority\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\"columns\":[ \n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"2014_HT6\",\n\t\t\t\t\t\t\"label\":\"2014/15\",\n\t\t\t\t\t\t\"year\":2014,\n\t\t\t\t\t\t\"code\":\"HT6\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"rows\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"value\":\"164\",\n\t\t\t\t\t\t\"label\":\"Authorised absence rate\",\n\t\t\t\t\t\t\"unit\":\"%\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DataBlocks by Release 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b481bab0-7529-4573-8c4f-c521584054a8",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Number of results should be correct\", function () {",
											"    pm.expect(respJson.length).to.equal(1); ",
											"});",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].heading\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].charts\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables\"));",
											"});",
											"",
											"pm.test(\"id should match request id\", function () {",
											"    pm.expect(respJson[0].id).to.equal(pm.globals.get(\"datablock_id\"));",
											"});",
											"",
											"pm.test(\"heading should should be correct\", function () { ",
											"    pm.expect(respJson[0].heading).to.equal(\"Admin API Create Datablock test renamed!\"); ",
											"});",
											"",
											"pm.test(\"dataBlockRequest should be correct\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest.subjectId\"));",
											"    pm.expect(respJson[0].dataBlockRequest.subjectId).to.equal(8);",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest.timePeriod\"));",
											"    pm.expect(respJson[0].dataBlockRequest.timePeriod.startYear).to.equal(\"2014\");",
											"    pm.expect(respJson[0].dataBlockRequest.timePeriod.startCode).to.equal(\"HT6\");",
											"    pm.expect(respJson[0].dataBlockRequest.timePeriod.endYear).to.equal(\"2014\");",
											"    pm.expect(respJson[0].dataBlockRequest.timePeriod.endCode).to.equal(\"HT6\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest.filters\"));",
											"    pm.expect(respJson[0].dataBlockRequest.filters.length).to.equal(1);",
											"    pm.expect(respJson[0].dataBlockRequest.filters[0]).to.equal(\"210\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest.indicators\"));",
											"    pm.expect(respJson[0].dataBlockRequest.indicators.length).to.equal(1);",
											"    pm.expect(respJson[0].dataBlockRequest.indicators[0]).to.equal(\"164\");",
											"    ",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].dataBlockRequest.localAuthority\"));",
											"    pm.expect(respJson[0].dataBlockRequest.localAuthority.length).to.equal(1);",
											"    pm.expect(respJson[0].dataBlockRequest.localAuthority[0]).to.equal(\"E09000002\");",
											"",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"[0].dataBlockRequest.country\"));",
											"    pm.expect(pm.response.to.not.have.jsonBody(\"[0].dataBlockRequest.region\"));",
											"});",
											"",
											"pm.test(\"charts should be correct\", function () {",
											"    pm.expect(respJson[0].charts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"tables should be correct\", function () {",
											"    pm.expect(respJson[0].tables.length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].indicators).to.be.an('array').that.is.empty;",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables[0].tableHeaders.columnGroups\"));",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columnGroups.length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columnGroups[0].length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columnGroups[0][0].label).to.equal(\"Pupil Referral Unit\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables[0].tableHeaders.columns\"));",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columns.length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columns[0].label).to.equal(\"2014/15\");",
											"    pm.expect(respJson[0].tables[0].tableHeaders.columns[0].value).to.equal(\"2014_HT6\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables[0].tableHeaders.rowGroups\"));",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rowGroups.length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rowGroups[0].length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rowGroups[0][0].label).to.equal(\"Barking and Dagenham\");",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rowGroups[0][0].value).to.equal(\"E09000002\");",
											"    pm.expect(pm.response.to.have.jsonBody(\"[0].tables[0].tableHeaders.rows\"));",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rows.length).to.equal(1);",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rows[0].label).to.equal(\"Authorised absence rate\");",
											"    pm.expect(respJson[0].tables[0].tableHeaders.rows[0].value).to.equal(\"164\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8961e7b-d294-4d1a-acfd-7e87bd1c3b6b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/release/{{release_id}}/datablocks/",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"release",
										"{{release_id}}",
										"datablocks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete DataBlock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ca94be1-4861-43de-b4b5-9b476be30216",
										"exec": [
											"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e92c688-fae4-4211-a39c-e13217dd72d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/{{datablock_id}}",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"{{datablock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete DataBlock invalid id - TESTS STOP HERE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b0394f2-a42a-45b6-8974-2555ea25de9f",
										"exec": [
											"pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04778915-00e4-4cb8-b0d2-e997a16deaa5",
										"exec": [
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/datablocks/815c6a6d-fbad-4f76-a226-13b7e1602f7e",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"datablocks",
										"815c6a6d-fbad-4f76-a226-13b7e1602f7e"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6113bbfa-122b-4178-b8f8-2b03d5a501f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f992d367-66f5-4dcf-bdef-0905b062180b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create release",
					"item": [
						{
							"name": "Create new release",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "815f6ca2-b206-4b22-83e0-1d90deecdb60",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.globals.set(\"create_new_release_id\", respJson.id);",
											"",
											"pm.test(\"Fields are present\", function () {",
											"    pm.expect(pm.response.to.have.jsonBody(\"id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"title\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publicationTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"releaseName\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"coverageTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"yearTitle\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"typeId\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"nextReleaseDate.year\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"publishScheduled\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"live\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"timePeriodCoverage.value\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"latestRelease\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"type.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"contact.id\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"status\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"draftComments\"));",
											"    pm.expect(pm.response.to.have.jsonBody(\"higherReviewComments\"));",
											"});",
											"",
											"pm.test(\"title / releaseName / coverageTitle should should be correct\", function () { ",
											"    pm.expect(respJson.title).to.equal(\"January 2040\");",
											"    pm.expect(respJson.releaseName).to.equal(\"2040\");",
											"    pm.expect(respJson.coverageTitle).to.equal(\"January\");",
											"});",
											"",
											"pm.test(\"publicationId and publicationTitle should be correct\", function () {",
											"    pm.expect(respJson.publicationId).to.equal('01447b0c-791c-4526-8a6c-8451cbcd4465');",
											"    pm.expect(respJson.publicationTitle).to.equal('Admin API test publication');",
											"});",
											"",
											"pm.test(\"nextReleaseDate should be correct\", function () {",
											"    pm.expect(respJson.nextReleaseDate.year).to.equal(\"2042\");",
											"    pm.expect(respJson.nextReleaseDate.month).to.equal(\"3\");",
											"    pm.expect(respJson.nextReleaseDate.day).to.equal(\"3\");",
											"});",
											"",
											"pm.test(\"publishScheduled should be correct\", function () {",
											"    pm.expect(respJson.publishScheduled).to.equal(\"2041-03-03T00:00:00Z\");",
											"});",
											"",
											"pm.test(\"live should be correct\", function () {",
											"    pm.expect(respJson.live).to.equal(false); ",
											"});",
											"",
											"pm.test(\"timePeriodCoverage should be correct\", function () {",
											"    pm.expect(respJson.timePeriodCoverage.value).to.equal(\"M1\");",
											"    pm.expect(respJson.timePeriodCoverage.label).to.equal(\"January\");",
											"});",
											"",
											"pm.test(\"latestRelease should be correct\", function () {",
											"    pm.expect(respJson.latestRelease).to.equal(false);  ",
											"})",
											"",
											"pm.test(\"type should be correct\", function () {",
											"    pm.expect(respJson.type.id).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"    pm.expect(respJson.type.title).to.equal(\"Official Statistics\");",
											"})",
											"",
											"pm.test(\"contact should be correct\", function () {",
											"    pm.expect(respJson.contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"    pm.expect(respJson.contact.teamName).to.equal(\"School absence and exclusions team\");",
											"});",
											"",
											"pm.test(\"status should be correct\", function () {",
											"    pm.expect(respJson.status).to.equal(\"Draft\"); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "728294da-ef7f-4f9c-9e3f-73279860edf0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"publicationId\": \"01447b0c-791c-4526-8a6c-8451cbcd4465\",\n\t\"templateReleaseId\": \"\",\n\t\"timePeriodCoverage\": {\n\t\t\"value\": \"M1\"\n\t},\n\t\"releaseName\":2040,\n\t\"publishScheduled\":\"2041-03-03T00:00:00.000Z\",\n\t\"nextReleaseDate\":{\n\t\t\"day\":3,\n\t\t\"month\":3,\n\t\t\"year\":2042\n\t},\n\t\"typeId\":\"9d333457-9132-4e55-ae78-c55cb3673d7c\"\n}"
								},
								"url": {
									"raw": "{{admin_api_url}}/publications/{{publication_id}}/releases",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"publications",
										"{{publication_id}}",
										"releases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft and HigherLevelReview Releases - 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75261dde-1e11-410d-90c3-e2f8bbf85e0c",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Every result should be status Draft or HigherLevelReview\", function () {",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        pm.expect(respJson[i].status).to.oneOf([\"Draft\", \"HigherLevelReview\"]);",
											"    }",
											"});",
											"",
											"pm.test(\"Should contain API test publication - January 2040 release\", function() {",
											"    var foundApiTestRelease = false;",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        if(respJson[i].id == pm.globals.get('create_new_release_id')) {",
											"            foundApiTestRelease = true;",
											"            pm.expect(respJson[i].publicationTitle).to.equal(\"Admin API test publication\");",
											"            pm.expect(respJson[i].title).to.equal(\"January 2040\");",
											"            pm.expect(respJson[i].publicationId).to.equal(\"01447b0c-791c-4526-8a6c-8451cbcd4465\");",
											"            pm.expect(respJson[i].coverageTitle).to.equal(\"January\");",
											"            pm.expect(respJson[i].yearTitle).to.equal(\"2040\");",
											"            pm.expect(respJson[i].typeId).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"            pm.expect(respJson[i].nextReleaseDate.year).to.equal(\"2042\");",
											"            pm.expect(respJson[i].publishScheduled).to.equal(\"2041-03-03T00:00:00\");",
											"            pm.expect(respJson[i].live).to.equal(false);",
											"            pm.expect(respJson[i].timePeriodCoverage.value).to.equal(\"M1\");",
											"            pm.expect(respJson[i].latestRelease).to.equal(false);",
											"            pm.expect(respJson[i].type.id).to.equal(\"9d333457-9132-4e55-ae78-c55cb3673d7c\");",
											"            pm.expect(respJson[i].type.title).to.equal(\"Official Statistics\");",
											"            pm.expect(respJson[i].contact.id).to.equal(\"d246c696-4b3a-4aeb-842c-c1318ee334e8\");",
											"            pm.expect(respJson[i].status).to.equal(\"Draft\");",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].draftComments`));",
											"            pm.expect(pm.response.to.have.jsonBody(`[${i}].higherReviewComments`));",
											"        }",
											"    }",
											"    pm.expect(foundApiTestRelease).to.equal(true, \"Couldn't find API test publication - January 2040\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65d8a4d3-ac4d-4559-a268-2faf73fbc5ff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{admin_api_url}}/releases/draft",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"draft"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approved releases - 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4640722-c28e-4fb6-8c56-69af8e4c73f7",
										"exec": [
											"var respJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"pm.test(\"Shouldn't contain API test publication - January 2040 release\", function() {",
											"    var foundApiTestRelease = false;",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        if(respJson[i].id == pm.globals.get('create_new_release_id')) {",
											"            foundApiTestRelease = true;",
											"        }",
											"    }",
											"    pm.expect(foundApiTestRelease).to.equal(false, \"Response shouldn't contain API test publication - January 2040!\");",
											"});",
											"",
											"pm.test(\"Every result should be status Approved\", function () {",
											"    for(var i = 0; i < respJson.length; i++) {",
											"        pm.expect(respJson[i].status).to.equal(\"Approved\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acf06a5a-b514-40a7-bd2d-8925e39f22cd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin_api_url}}/releases/scheduled",
									"host": [
										"{{admin_api_url}}"
									],
									"path": [
										"releases",
										"scheduled"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release - Data File uploads",
			"item": [
				{
					"name": "Upload data file - invalid (meta header includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a29fc51-f9bc-4bfa-b971-a9f03dfdabe0",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file_headings.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file_headings.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_metadata_header",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_metadata_header"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta header includes quotes) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b61b6ec-9b12-40c6-b2ae-e07c27097dbd",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_metadata_file_headings.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_metadata_file_headings.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta incorrect values)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f337f5ab-7773-4b32-aaf1-5ac7460fd7fb",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_data_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_data_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_values_in_metadata_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_values_in_metadata_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta incorrect values) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ad77da7-8402-425f-a1f2-38267f5f4eff",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_data_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_data_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta row includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3716b267-4d3a-4f94-b855-d6fae2ce7032",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_metadata_row",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_metadata_row"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (meta row includes quotes) - check status Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fe8b6ac-1dbb-449d-87ea-88bfeea74263",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file includes quotes)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7cef74b-8568-4cf4-915c-a8db7556ee23",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/quotes_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=upload_data_file_invalid_quotes_in_data_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "upload_data_file_invalid_quotes_in_data_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file includes quotes) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f4f6652-c17d-448c-a603-1b8ceb45c6d8",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/quotes_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"quotes_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected metadata)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67d4dfec-d546-47c4-8149-bc377a1b04b0",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_metadata_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_metadata_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_metadata",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_metadata"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected metadata) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8bc003a-de1a-4e75-8627-e5dc59fc8c3f",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_colums_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_colums_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4a99562-ab3e-47ad-85d8-b5c3fb4fff85",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_columns_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_columns_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24e84a26-ad04-489a-964a-fca3a999dc1d",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_columns_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_columns_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected number of columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71917005-4da4-4cca-8d7b-13e6690c4718",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_metadata_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_metadata_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_metadata_file_has_unexpected_number_of_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_metadata_file_has_unexpected_number_of_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (metadata file has unexpected number of columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4737960-c2a9-4b9b-a07b-d03b395705d8",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_number_of_columns_in_metadata_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_number_of_columns_in_metadata_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has unexpected number of columns)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f49bf72f-9281-4823-88a8-44bd4baf2f3d",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/unexpected_number_of_columns_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_unexpected_number_of_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_unexpected_number_of_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has unexpected number of columns) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d6d4ca0-5633-419f-b451-523569f93326",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/unexpected_number_of_columns_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"unexpected_number_of_columns_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid geographic level)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58cde79b-1b13-4df4-a965-2f774148e26e",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_geographic_level_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_geographic_level_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_invalid_geographic_level",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_invalid_geographic_level"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid geographic level) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d3def70-0df6-4511-ae43-936b4ad59f2a",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_geographic_level_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_geographic_level_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid time identifier)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3682e0b6-b9ae-4129-b9f9-41ed0277913c",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_time_identifier_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/invalid_time_identifier_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_invalid_time_identifier",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_invalid_time_identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has invalid time identifier) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb8a6319-e38c-430a-b4e3-d5a30dd6a153",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_time_identifier_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_time_identifier_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time period column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4e60209-432c-437f-bba1-c8a8645b21c9",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_period_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_period_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_time_period_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_time_period_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time period column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3550dba6-f0bb-43f5-b698-6822e581633d",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/invalid_time_identifier_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"invalid_time_identifier_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time identifier column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "932a8733-f84d-42a9-9d8f-9a58ba368e4a",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_time_identifier_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_time_identifier_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing time identifier column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0c7f3eb-0011-4298-8299-da8bfe7316b5",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_time_identifier_column_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_time_identifier_column_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing geographic level column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f6b94ae-b70e-4b1f-aceb-fdaa6fd57c87",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_time_identifier_column_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_geographic_level_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_geographic_level_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing geographic level column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2a5a35c-4496-4776-9706-10bd4744cbf2",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_geographic_level_column_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_geographic_level_column_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing observational unit column)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81039d5c-fe2e-4bb7-bf11-0802162e7388",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_observational_units_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_observational_units_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_observational_unit_column",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_observational_unit_column"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing observational unit column) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15f1c791-1911-4bf3-9a5f-213a59f870d1",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_observational_units_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_observational_units_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing columns as specified in the metadata file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1350290b-76f6-4b93-92f6-6e35b467d637",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_columns_in_data_file.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/file-upload-validation/missing_columns_in_data_file.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=invalid_data_file_has_missing_columns_from_the_metadata_file",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "invalid_data_file_has_missing_columns_from_the_metadata_file"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload data file - invalid (data file has missing columns as specified in the metadata file) - check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3559b465-e84a-41bb-9032-41a513dab9f7",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Should return some results\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(2);    ",
									"});",
									"",
									"pm.test(\"Name should be correct\", function () { ",
									"    pm.expect(pm.response.json()[1].name).to.equal(\"testName\"); ",
									"});",
									"",
									"pm.test(\"Extension should be csv\", function () { ",
									"    pm.expect(pm.response.json()[0].extension).to.equal(\"csv\"); ",
									"});",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/missing_columns_in_data_file.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"missing_columns_in_data_file.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release - Small File uploads",
			"item": [
				{
					"name": "Upload small file - 3digit_illegal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/3digit_illegal.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/3digit_illegal.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=3digit_illegal",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "3digit_illegal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 3digit_illegal - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/3digit_illegal.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"3digit_illegal.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_overlapping",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_overlapping.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_overlapping.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4and6digit_overlapping",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4and6digit_overlapping"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_overlapping - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4and6digit_overlapping.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4and6digit_overlapping.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4and6digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4and6digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4and6digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4and6digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4and6digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4and6digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_duplicate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_duplicate.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_duplicate.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_duplicate",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_duplicate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_duplicate - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_duplicate.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_duplicate.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_extreme_gaps",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_extreme_gaps.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_extreme_gaps.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_extreme_gaps",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_extreme_gaps"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_extreme_gaps - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_extreme_gaps.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_extreme_gaps.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/4digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=4digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "4digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 4digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/4digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"4digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_dodgy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_dodgy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_dodgy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=6digit_dodgy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "6digit_dodgy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_dodgy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/6digit_dodgy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"6digit_dodgy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/6digit_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=6digit_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "6digit_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 6digit_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/6digit_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"6digit_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 7digit_iffy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/7digit_iffy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/7digit_iffy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=7digit_iffy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "7digit_iffy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - 7digit_iffy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/7digit_iffy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"7digit_iffy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_geographies",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_geographies"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_geographies.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_geographies.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies_messy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies_messy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_geographies_messy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_geographies_messy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_geographies_messy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_geographies_messy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_geographies_messy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_geographies_messy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_empty",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_empty.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_empty.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_year_empty",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_year_empty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_empty - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_year_empty.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_year_empty.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_identifier_blank",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_identifier_blank.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/all_year_identifier_blank.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=all_year_identifier_blank",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "all_year_identifier_blank"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - all_year_identifier_blank - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/all_year_identifier_blank.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"all_year_identifier_blank.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=combined_terms",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "combined_terms"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/combined_terms.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"combined_terms.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms_duplicates",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms_duplicates.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/combined_terms_duplicates.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=combined_terms_duplicates",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "combined_terms_duplicates"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - combined_terms_duplicates - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/combined_terms_duplicates.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"combined_terms_duplicates.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - different_time_years",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/different_time_years.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/different_time_years.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=different_time_years",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "different_time_years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - different_time_years - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/different_time_years.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"different_time_years.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_duplicate_gaps",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_duplicate_gaps.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_duplicate_gaps.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=financial_year_duplicate_gaps",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "financial_year_duplicate_gaps"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_duplicate_gaps - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/financial_year_duplicate_gaps.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"financial_year_duplicate_gaps.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/financial_year_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=financial_year_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "financial_year_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - financial_year_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/financial_year_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"financial_year_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LAD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LAD.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LAD.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LAD",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LAD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LAD - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LAD.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LAD.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA_with_SOME_regional_columns",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA_with_SOME_regional_columns.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LA_with_SOME_regional_columns.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LA_with_SOME_regional_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LA_with_SOME_regional_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LA_with_SOME_regional_columns - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LA_with_SOME_regional_columns.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LA_with_SOME_regional_columns.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LEP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/LEP.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/LEP.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=LEP",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "LEP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - LEP - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/LEP.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"LEP.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MCA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/MCA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/MCA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=MCA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "MCA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MCA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/MCA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"MCA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - mixed_digits",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/mixed_digits.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/mixed_digits.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=mixed_digits",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "mixed_digits"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - mixed_digits - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/mixed_digits.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"mixed_digits.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=monthly_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "monthly_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/monthly_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"monthly_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/monthly_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=monthly_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "monthly_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - monthly_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/monthly_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"monthly_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MSOA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/MSOA.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/MSOA.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=MSOA",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "MSOA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - MSOA - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/MSOA.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"MSOA.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - one_row_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/one_row_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/one_row_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=one_row_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "one_row_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - one_row_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/one_row_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"one_row_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - overlapping_terms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/overlapping_terms.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/overlapping_terms.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=overlapping_terms",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "overlapping_terms"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - overlapping_terms - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/overlapping_terms.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"overlapping_terms.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - PCon",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/PCon.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/PCon.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=PCon",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "PCon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - PCon - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/PCon.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"PCon.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=regional",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "regional"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/regional.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"regional.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional_different_years",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional_different_years.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/regional_different_years.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=regional_different_years",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "regional_different_years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - regional_different_years - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/regional_different_years.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"regional_different_years.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - RSC",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/RSC.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/RSC.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=RSC",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "RSC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - RSC - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/RSC.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"RSC.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_identifier_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_identifier_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_identifier_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=some_identifier_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "some_identifier_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_identifier_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/some_identifier_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"some_identifier_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_year_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_year_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/some_year_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=some_year_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "some_year_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - some_year_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/some_year_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"some_year_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - string_digits",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/string_digits.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/string_digits.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=string_digits",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "string_digits"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - string_digits - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/string_digits.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"string_digits.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - tax_year_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/tax_year_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/tax_year_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=tax_year_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "tax_year_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - tax_year_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/tax_year_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"tax_year_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_missing",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_missing.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_missing.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=termly_missing",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "termly_missing"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_missing - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/termly_missing.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"termly_missing.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_simple",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_simple.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/termly_simple.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=termly_simple",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "termly_simple"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - termly_simple - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/termly_simple.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"termly_simple.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=up_until_31st_march",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "up_until_31st_march"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/up_until_31st_march.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"up_until_31st_march.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march_iffy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march_iffy.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/up_until_31st_march_iffy.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=up_until_31st_march_iffy",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "up_until_31st_march_iffy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - up_until_31st_march_iffy - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/up_until_31st_march_iffy.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"up_until_31st_march_iffy.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - ward",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/ward.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/ward.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=ward",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "ward"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - ward - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/ward.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"ward.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - year_identifier_missing_columns",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{files_dir}}/small-files/year_identifier_missing_columns.csv"
								},
								{
									"key": "metaFile",
									"type": "file",
									"src": "{{files_dir}}/small-files/year_identifier_missing_columns.meta.csv"
								}
							]
						},
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data?name=year_identifier_missing_columns",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data"
							],
							"query": [
								{
									"key": "name",
									"value": "year_identifier_missing_columns"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload small file - year_identifier_missing_columns - check status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{admin_api_url}}/release/{{file_upload_validation_release_id}}/data/year_identifier_missing_columns.csv/import/status",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"release",
								"{{file_upload_validation_release_id}}",
								"data",
								"year_identifier_missing_columns.csv",
								"import",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Queue",
			"item": [
				{
					"name": "Queue release for publication",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/releases/3b7532b9-df54-4d9c-ade4-08d782fd031e/queue",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"releases",
								"3b7532b9-df54-4d9c-ade4-08d782fd031e",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Release on demand",
			"item": [
				{
					"name": "Publish Release - Release not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca800fc5-4cbf-4e6d-952a-5ba92dc28b8f",
								"exec": [
									"var respJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/bau/release/49ffa72c-646e-4263-b597-82e32f8cfe35/publish",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"bau",
								"release",
								"49ffa72c-646e-4263-b597-82e32f8cfe35",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Release Content - Release not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "373e7602-f521-4f69-9671-1f3443327b4e",
								"exec": [
									"var respJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/bau/release/49ffa72c-646e-4263-b597-82e32f8cfe35/publish/content",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"bau",
								"release",
								"49ffa72c-646e-4263-b597-82e32f8cfe35",
								"publish",
								"content"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ec0c4f5a-db0f-45d2-87b3-068fc72f4800",
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"7F_AbsenceRatePercentBands_SchoolType\", \"51e645c1-4a37-4938-8b20-1244b15048f9\");",
					"pm.globals.set(\"7FG_AbsenceRatePercentBands_SchoolType_Default\", \"c93635d2-83ad-4199-bd0d-0e740775c4ed\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_Total\", \"0af225c6-c70b-4053-b7e7-4e719e2b751f\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_Special\", \"a7a7a691-a49e-422e-839e-53f1f545fa76\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedSecondary\", \"c306ff42-ddea-4cd0-82af-770df078fd94\");",
					"pm.globals.set(\"7FI_AbsenceRatePercentBands_SchoolType_Default_StateFundedPrimary\", \"26db426f-fb4f-439c-9e37-360451305013\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfOverallAbsenceSessions\", \"fe313349-0438-41b7-8944-109690ee5158\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfAuthorisedAbsenceSessions\", \"f3014e60-534a-4667-b90f-80b1fee6b08e\");",
					"pm.globals.set(\"7I_AbsenceFields__NumberOfUnauthorisedAbsenceSessions\", \"cd2711ff-3dba-4452-858a-d55c5cfd04fb\");",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8e87df78-0551-459e-9384-1ab507c9ca95",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}