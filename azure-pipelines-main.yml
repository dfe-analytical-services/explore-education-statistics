parameters:
  - name: DeployBranches
    displayName: Branches that should be deployed
    type: object
    default:
      - master
      - dev
      - test

variables:
  BuildConfiguration: Release
  IsBranchDeployable: ${{ containsValue(parameters.DeployBranches, variables['Build.SourceBranchName']) }}
  CI: true
  DotNetVersion: '8.0.x'
  NodeVersion: '20.16.0'
  RubyVersion: '3.2'
  AcrServiceConnection: s101d-datahub-spn-ees-dfe-gov-uk-docker-managed-service-connection
  PublicApiDir: GovUk.Education.ExploreEducationStatistics.Public.Data.Api
  PublicApiDocsDir: explore-education-statistics-api-docs

trigger:
  branches:
    include:
      - master
      - dev
      - test
  paths:
    exclude:
      - infrastructure/**
      - src/GovUk.Education.ExploreEducationStatistics.Content.Search*/**

pr:
  branches:
    include:
      - master
      - dev
      - test
  drafts: false
  paths:
    exclude:
      - infrastructure/**
      - src/GovUk.Education.ExploreEducationStatistics.Content.Search*/**

jobs:
  - job: BackendVerify
    pool: ees-ubuntu2204-large
    workspace:
      clean: all
    steps:
      - task: UseDotNet@2
        displayName: Install .NET $(DotNetVersion)
        inputs:
          version: $(DotNetVersion)
          performMultiLevelLookup: true

      # TODO: Uncomment this step once formatter has been run globally.
      # This is because whitespace rules cannot be warnings or suggestions; they will always be errors
      # - task: DotNetCoreCLI@2
      #   displayName: Verify formatting
      #   inputs:
      #     command: custom
      #     custom: format whitespace src/GovUk.Education.ExploreEducationStatistics.sln --verify-no-changes --severity error
      #     arguments: --verify-no-changes --verbosity diagnostic

      - task: DotNetCoreCLI@2
        displayName: Verify style
        inputs:
          command: custom
          custom: format
          ## TODO: Remove "--severity error" once style formatter has been run across project
          arguments: style --verify-no-changes --verbosity diagnostic --severity error
          projects: src/GovUk.Education.ExploreEducationStatistics.sln

      - task: DotNetCoreCLI@2
        displayName: Verify analyzers
        inputs:
          command: custom
          custom: format
          ## TODO: Remove "--severity error" once work has been done to resolve build warnings (https://dfedigital.atlassian.net/browse/EES-4594).
          arguments: analyzers --verify-no-changes --verbosity diagnostic --severity error
          projects: src/GovUk.Education.ExploreEducationStatistics.sln

      # TODO: Wrap the above three tasks up into a single `dotnet format` task once all TODOs are done

      - task: DotNetCoreCLI@2
        displayName: Build Public API
        inputs:
          projects: '**/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          arguments: --configuration $(BuildConfiguration)

      - task: Bash@3
        displayName: Diff Public API OpenAPI docs
        inputs:
          targetType: inline
          script: |
            docker run --rm -t \
              -v $(System.DefaultWorkingDirectory)/src/artifacts/bin/$(PublicApiDir)/${{ lower(variables.BuildConfiguration) }}:/api \
              -v $(System.DefaultWorkingDirectory)/src/$(PublicApiDocsDir):/api-docs \
              -v $(System.DefaultWorkingDirectory)/ci/scripts:/scripts \
              --entrypoint /bin/sh \
              tufin/oasdiff \
              /scripts/public-api-openapi-diff.sh

  - job: BackendTest
    pool: ees-ubuntu2204-xlarge
    workspace:
      clean: all
    steps:
      - task: UseDotNet@2
        displayName: Install .NET $(DotNetVersion)
        inputs:
          version: $(DotNetVersion)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: |
            **/GovUk.*[Tt]ests/*.csproj
            !**/GovUk.Education.ExploreEducationStatistics.Admin.Tests/*csproj
          arguments: --configuration $(BuildConfiguration)

  - job: BackendPublish
    pool:
      vmImage: ubuntu-22.04
    steps:
      - task: UseDotNet@2
        displayName: Install .NET $(DotNetVersion)
        inputs:
          version: $(DotNetVersion)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Package Data API
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Data.Api.csproj'
          arguments: --self-contained true -r win-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/data-api
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Data API artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: data-api
          targetPath: $(Build.ArtifactStagingDirectory)/data-api

      - task: DotNetCoreCLI@2
        displayName: Package Content API
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Content.Api.csproj'
          arguments: --self-contained true -r win-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/content-api
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Content API artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: content-api
          targetPath: $(Build.ArtifactStagingDirectory)/content-api

      - task: DotNetCoreCLI@2
        displayName: Package Public API
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          arguments: -r linux-musl-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/public-api
          zipAfterPublish: False
      - task: Docker@2
        displayName: Build Public API Docker image
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          containerRegistry: $(AcrServiceConnection)
          repository: ees-public-api/api
          command: build
          Dockerfile: docker/public-api/Dockerfile
          buildContext: $(Build.ArtifactStagingDirectory)/public-api/GovUk.Education.ExploreEducationStatistics.Public.Data.Api
          tags: $(Build.BuildNumber)
          arguments: --build-arg BUILD_BUILDNUMBER=$(Build.BuildNumber)
        env:
          DOCKER_BUILDKIT: 1

      - task: Docker@2
        displayName: Push Public API Docker image
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          containerRegistry: $(AcrServiceConnection)
          repository: ees-public-api/api
          command: push
          tags: $(Build.BuildNumber)

      - task: DotNetCoreCLI@2
        displayName: Package Public API Data Processor Function
        inputs:
          command: publish
          publishWebProjects: false
          includeRootFolder: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Public.Data.Processor.csproj'
          arguments: --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/public-api-data-processor
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Public API Data Processor artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: public-api-data-processor
          targetPath: $(Build.ArtifactStagingDirectory)/public-api-data-processor

      - task: DotNetCoreCLI@2
        displayName: Package Notifier Function
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Notifier.csproj'
          arguments: --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/notifier
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Notifier artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: notifier
          targetPath: $(Build.ArtifactStagingDirectory)/notifier

      - task: DotNetCoreCLI@2
        displayName: Package Publisher Function
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Publisher.csproj'
          arguments: --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/publisher
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Publisher artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: publisher
          targetPath: $(Build.ArtifactStagingDirectory)/publisher

      - task: DotNetCoreCLI@2
        displayName: Package Processor Function
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Data.Processor.csproj'
          arguments: --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/processor
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: Publish Processor artifact
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          artifactName: processor
          targetPath: $(Build.ArtifactStagingDirectory)/processor

  - job: Admin
    pool: ees-ubuntu2204-xlarge
    workspace:
      clean: all
    steps:
      - task: UseNode@1
        displayName: Install Node.js $(NodeVersion)
        inputs:
          version: $(NodeVersion)

      - task: Bash@3
        displayName: Install Corepack
        inputs:
          workingDir: .
          targetType: inline
          script: npm i -g corepack@latest

      - task: Bash@3
        displayName: corepack enable
        inputs:
          workingDir: .
          targetType: inline
          script: corepack enable

      - task: UseDotNet@2
        displayName: Install .NET $(DotNetVersion)
        inputs:
          version: $(DotNetVersion)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '**/GovUk.Education.ExploreEducationStatistics.Admin.csproj'
          arguments: --configuration $(BuildConfiguration)

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: '**/GovUk.Education.ExploreEducationStatistics.Admin.Tests.csproj'
          arguments: --configuration $(BuildConfiguration) --collect "Code coverage"

      - task: Bash@3
        displayName: pnpm i
        inputs:
          targetType: inline
          script: pnpm i

      - task: Bash@3
        displayName: pnpm run build
        inputs:
          targetType: inline
          script: pnpm --filter=explore-education-statistics-admin run build

      - task: CopyFiles@2
        displayName: Copy files to wwwroot
        inputs:
          SourceFolder: src/explore-education-statistics-admin/build
          TargetFolder: src/GovUk.Education.ExploreEducationStatistics.Admin/wwwroot

      - task: DotNetCoreCLI@2
        displayName: Package Admin app
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Admin.csproj'
          arguments: --self-contained true -r win-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)

      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        displayName: Publish Admin artifact
        inputs:
          artifactName: admin
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Frontend
    pool: ees-ubuntu2204-xlarge
    workspace:
      clean: all
    steps:
      - task: UseNode@1
        displayName: Install Node.js $(NodeVersion)
        inputs:
          version: $(NodeVersion)

      - task: Bash@3
        displayName: Install Corepack
        inputs:
          workingDir: .
          targetType: inline
          script: npm i -g corepack@latest

      - task: Bash@3
        displayName: corepack enable
        inputs:
          workingDir: .
          targetType: inline
          script: corepack enable

      - task: Bash@3
        displayName: pnpm i
        inputs:
          workingDir: .
          targetType: inline
          script: pnpm i

      - task: Bash@3
        displayName: pnpm tsc
        inputs:
          workingDir: .
          targetType: inline
          script: pnpm tsc

      - task: Bash@3
        displayName: pnpm lint
        inputs:
          workingDir: .
          targetType: inline
          script: pnpm lint

      - task: Bash@3
        displayName: pnpm format:check
        inputs:
          workingDir: .
          targetType: inline
          script: pnpm format:check

      - task: Bash@3
        displayName: pnpm test:ci
        inputs:
          workingDir: .
          targetType: inline
          script: pnpm test:ci

      - task: PublishTestResults@2
        displayName: Publish frontend test results
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: explore-education-statistics-*/junit-*.xml
          searchFolder: ./src
          testRunTitle: Release Jest tests
          mergeTestResults: true

      - task: Bash@3
        displayName: pnpm run build
        inputs:
          targetType: inline
          script: pnpm --filter=explore-education-statistics-frontend run build

      - task: Docker@2
        displayName: Build Public frontend Docker image
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          containerRegistry: $(AcrServiceConnection)
          repository: ees-public-frontend
          command: build
          Dockerfile: docker/public-frontend/Dockerfile
          buildContext: $(System.DefaultWorkingDirectory)
          tags: $(Build.BuildNumber)
          arguments: --build-arg BUILD_BUILDNUMBER=$(Build.BuildNumber)
        env:
          DOCKER_BUILDKIT: 1

      - task: Docker@2
        displayName: Push Public frontend Docker image
        condition: and(succeeded(), eq(variables.IsBranchDeployable, true))
        inputs:
          containerRegistry: $(AcrServiceConnection)
          repository: ees-public-frontend
          command: push
          tags: $(Build.BuildNumber)

  - job: ApiDocs
    pool:
      vmImage: ubuntu-22.04
    workspace:
      clean: all
    variables:
      WorkingDirectory: src/explore-education-statistics-api-docs
    steps:
      - task: UseNode@1
        displayName: Install Node.js $(NodeVersion)
        inputs:
          version: $(NodeVersion)

      - task: UseRubyVersion@0
        displayName: Install Ruby $(RubyVersion)
        inputs:
          versionSpec: '>= $(RubyVersion)'

      - task: Cache@2
        displayName: Cache Gems
        inputs:
          key: 'gems | "$(Agent.OS)" | $(WorkingDirectory)/Gemfile.lock'
          path: $(WorkingDirectory)/vendor
          restoreKeys: |
            gems | "$(Agent.OS)"
            gems

      - task: Bash@3
        displayName: Set deployment config
        inputs:
          workingDirectory: $(WorkingDirectory)
          targetType: inline
          script: bundle config set deployment true

      - task: Bash@3
        displayName: Install Gems
        inputs:
          workingDirectory: $(WorkingDirectory)
          targetType: inline
          script: bundle install

      - task: Bash@3
        displayName: Build
        inputs:
          workingDirectory: $(WorkingDirectory)
          targetType: inline
          script: |
            set -e
            bundle exec middleman build
            # Remove afterwards as we don't want it in the artifact
            rm -rf build

      - task: PublishPipelineArtifact@1
        displayName: Publish Public API docs artifact
        inputs:
          artifactName: public-api-docs
          targetPath: $(System.DefaultWorkingDirectory)/src/$(PublicApiDocsDir)

  - job: MiscellaneousArtifacts
    pool:
      vmImage: ubuntu-22.04
    workspace:
      clean: all
    steps:
      - task: CopyFiles@2
        displayName: Copy Pipfiles to tests
        inputs:
          Contents: |
            Pipfile
            Pipfile.lock
          TargetFolder: tests

      - task: PublishPipelineArtifact@0
        displayName: Publish test files
        inputs:
          artifactName: tests
          targetPath: tests
