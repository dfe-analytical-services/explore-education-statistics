parameters:
  - name: serviceConnection
    type: string
  - name: environment
    type: string
  - name: displayName
    type: string
  - name: downloadPipeline
    type: string
  - name: deploymentName
    type: string
  - name: functionAppName
    type: string
  - name: artifactName
    type: string
  - name: artifactZipName
    type: string
  - name: healthCheckUrl
    type: string
  - name: dependsOn
    type: object
    default: []

jobs:
  - deployment: ${{ parameters.deploymentName }}
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    environment: ${{ parameters.environment }}
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
            - download: ${{ parameters.downloadPipeline }}
              displayName: Download ${{ parameters.functionAppName }} Function App artifact
              artifact: ${{ parameters.artifactName }}
              patterns: |
                ${{ parameters.artifactZipName }}

            - template: bicep-output-variables.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}

            - task: AzureCLI@2
              displayName: 'Deploy ${{ parameters.functionAppName }} Function App'
              retryCountOnTaskFailure: 1
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  set -e
                  echo "Deploying ${{ parameters.functionAppName }} Function App using zip deploy"
                  az functionapp deployment source config-zip \
                    --resource-group $(resourceGroupName) \
                    --name ${{ parameters.functionAppName }} \
                    --src '$(Pipeline.Workspace)/${{ parameters.downloadPipeline }}/${{ parameters.artifactName }}/${{ parameters.artifactZipName }}'

            - template: ../../../templates/public-api/ci/tasks/wait-for-endpoint-success.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                displayName: Check ${{ parameters.functionAppName }} Function App health
                endpoint: ${{ parameters.healthCheckUrl }}
