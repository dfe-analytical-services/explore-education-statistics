# This is a reusable Deploy stage definition that is parameterised to be reusable
# to support deployment to different environments

parameters:
  - name: stageName
    type: string
  - name: environment
    type: string
  - name: serviceConnection
    type: string
  - name: parameterFile
    type: string
  - name: condition
    type: string

stages:
  - stage: ${{parameters.stageName}}
    displayName: 'Validate ${{parameters.environment}} Infrastructure'
    # Prevent this stage from running in parallel with the same deploy stage in other ongoing runs of this pipeline.
    # Instead, multiple executions of this stage will be queued and run sequentially in the order that their pipelines
    # were triggered.
    lockBehavior: sequential
    condition: ${{parameters.condition}}
    variables:
      - group: Public API Infrastructure - ${{parameters.environment}}
      - group: Public API Infrastructure - ${{parameters.environment}} secrets
    jobs:
      - job: Validate_Infrastructure
        steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Install Bicep'
            inputs:
              azureSubscription: ${{parameters.serviceConnection}}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: 'az bicep install'

          - task: AzureCLI@2
            displayName: 'Validate bicep scripts'
            inputs:
              azureSubscription: ${{parameters.serviceConnection}}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az deployment group validate \
                --resource-group $(resourceGroupName) \
                --template-file $(templateFile) \
                --parameters ${{parameters.parameterFile}} \
                --parameters \
                    subscription='$(subscription)' \
                    resourceTags='$(resourceTags)' \
                    postgreSqlAdminName='$(postgreSqlAdminName)' \
                    postgreSqlAdminPassword='$(postgreSqlAdminPassword)' \
                    postgreSqlFirewallRules='$(maintenanceFirewallRules)' \
                    storageFirewallRules='$(maintenanceFirewallRules)' \
                    dockerImagesTag='$(upstreamPipelineBuildNumber)' \
                    deployContainerApp=true \
                    updatePsqlFlexibleServer=true \
                    dataProcessorFunctionAppExists=true \
                    dataProcessorAppRegistrationClientId='$(dataProcessorAppRegistrationClientId)'
