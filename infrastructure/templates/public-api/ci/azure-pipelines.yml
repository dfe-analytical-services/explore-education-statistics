trigger: none

parameters:
  - name: deployContainerApp
    displayName: Can we deploy the Container App yet? This is dependent on the PostgreSQL Flexible Server being set up and having users manually added.
    default: true
  - name: updatePsqlFlexibleServer
    displayName: Does the PostgreSQL Flexible Server require any updates? False by default to avoid unnecessarily lengthy deploys.
    default: false
  - name: forceDeployToEnvironment
    displayName: Set to either dev or test to force a deploy to that environment from the chosen branch.
    type: string
    values:
      - none
      - dev
      - test
    default: 'none'

resources:
  pipelines:
    - pipeline: MainBuild
      source: Explore Education Statistics
      trigger:
        branches:
          - dev
          - test
          - master

variables:
  - group: Public API Infrastructure - Common
  - name: forceDeployToEnvironment
    value: ${{parameters.forceDeployToEnvironment}}
  - name: isDev
    value: $[or(eq(variables['forceDeployToEnvironment'], 'dev'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))]
  - name: isTest
    value: $[or(eq(variables['forceDeployToEnvironment'], 'test'), eq(variables['Build.SourceBranch'], 'refs/heads/test'))]
  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  - name: vmImageName
    value: ubuntu-latest
  - name: templateDirectory
    value: $(Build.SourcesDirectory)/infrastructure/templates/public-api
  - name: templateFile
    value: $(templateDirectory)/main.bicep
  - name: paramDirectory
    value: $(templateDirectory)/parameters
  - name: devParamFile
    value: $(paramDirectory)/main-dev.bicepparam
  - name: testParamFile
    value: $(paramDirectory)/main-test.bicepparam
  - name: preProdParamFile
    value: $(paramDirectory)/main-preprod.bicepparam
  - name: prodParamFile
    value: $(paramDirectory)/main-prod.bicepparam
  - name: upstreamPipelineBuildNumber
    value: $(resources.pipeline.MainBuild.runName)
  - name: deployContainerApp
    value: ${{parameters.deployContainerApp}}
  - name: updatePsqlFlexibleServer
    value: ${{parameters.updatePsqlFlexibleServer}}

pool:
  vmImage: $(vmImageName)

stages:
  - template: stages/validate.yml
    parameters:
      stageName: ValidateDev
      condition: eq(variables.isDev, true)
      environment: Dev
      serviceConnection: $(serviceConnectionDev)
      parameterFile: $(devParamFile)

  - template: stages/deploy.yml
    parameters:
      stageName: DeployDev
      condition: and(not(or(failed(), canceled())), eq(variables.isDev, true))
      dependsOn: ValidateDev
      environment: Dev
      serviceConnection: $(serviceConnectionDev)
      parameterFile: $(devParamFile)

  - template: stages/validate.yml
    parameters:
      stageName: ValidateTest
      condition: eq(variables.isTest, true)
      environment: Test
      serviceConnection: $(serviceConnectionTest)
      parameterFile: $(testParamFile)

  - template: stages/deploy.yml
    parameters:
      stageName: DeployTest
      dependsOn: ValidateTest
      condition: and(not(or(failed(), canceled())), eq(variables.isTest, true))
      environment: Test
      serviceConnection: $(serviceConnectionTest)
      parameterFile: $(testParamFile)

#  - template: stages/validate.yml
#    parameters:
#      stageName: ValidatePreProd
#      condition: eq(variables.isMaster, true)
#      environment: Pre-Prod
#      serviceConnection: $(serviceConnectionPreProd)
#      parameterFile: $(preProdParamFile)
#
#  - template: stages/deploy.yml
#    parameters:
#      stageName: DeployPreProd
#      condition: and(not(or(failed('ValidatePreProd'), canceled('ValidatePreProd')), eq(variables.isMaster, true))
#      dependsOn: ValidatePreProd
#      environment: Pre-Prod
#      serviceConnection: $(serviceConnectionPreProd)
#      parameterFile: $(preProdParamFile)
#
#  - template: stages/validate.yml
#    parameters:
#      stageName: ValidateProd
#      condition: and(not(or(failed('DeployPreProd'), canceled('DeployPreProd')), eq(variables.isMaster, true))
#      environment: Prod
#      serviceConnection: $(serviceConnectionProd)
#      parameterFile: $(prodParamFile)
#
#  - template: stages/deploy.yml
#    parameters:
#      stageName: DeployProd
#      condition: and(not(or(failed('ValidateProd'), canceled('ValidateProd')), eq(variables.isMaster, true))
#      dependsOn: ValidateProd
#      environment: Prod
#      serviceConnection: $(serviceConnectionProd)
#      parameterFile: $(prodParamFile)
