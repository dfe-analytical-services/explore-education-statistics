parameters:
  - name: serviceConnection
    type: string
  - name: environment
    type: string
  - name: dependsOn
    type: object
    default: []

jobs:
  - deployment: DeployPublicDataProcessor
    displayName: Deploy Public Data Processor
    dependsOn: ${{ parameters.dependsOn }}
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - download: MainBuild
              displayName: Download Public API Data Processor artifact
              artifact: public-api-data-processor

            - template: ../tasks/bicep-output-variables.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}

            # We do config updates out of Bicep template so we can implement slot swapping.
            # Changes are first deployed to the staging slot and combined with a fresh
            # code deploy prior to being swapped with the production slot.
            - task: AzureCLI@2
              displayName: Update staging slot app settings
              retryCountOnTaskFailure: 1
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  
                  az functionapp config appsettings set \
                    --name $(dataProcessorFunctionAppName) \
                    --resource-group $(resourceGroupName) \
                    --slot staging \
                    --settings \
                      "App__PrivateStorageConnectionString=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(coreStorageConnectionStringSecretKey))" \
                      "App__EnableThemeDeletion=$(enableThemeDeletion)" \
                      "AZURE_CLIENT_ID=$(dataProcessorFunctionAppManagedIdentityClientId)" \
                      "DataFiles__BasePath=$(dataProcessorPublicApiDataFileShareMountPath)"
                  
                  az webapp config connection-string set \
                    --name $(dataProcessorFunctionAppName) \
                    --resource-group $(resourceGroupName) \
                    --connection-string-type SQLAzure \
                    --slot staging \
                    --settings \
                      "ContentDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorContentDbConnectionStringSecretKey))"
                  
                  az webapp config connection-string set \
                    --name $(dataProcessorFunctionAppName) \
                    --resource-group $(resourceGroupName) \
                    --connection-string-type PostgreSQL \
                    --slot staging \
                    --settings \
                      "PublicDataDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorPsqlConnectionStringSecretKey))"

            # TODO EES-5128
            # Add Private Endpoint to Data Processor Function App into the VMSS VNet to allow
            # DevOps to deploy the Data Processor Function App without having to temporarily
            # make it publicly accessible.
            # - task: AzureCLI@2
            #   displayName: Temporarily enable public network access before deploy
            #   retryCountOnTaskFailure: 1
            #   inputs:
            #     azureSubscription: ${{ parameters.serviceConnection }}
            #     scriptType: bash
            #     scriptLocation: inlineScript
            #     inlineScript: |
            #       set -e
          
            #       az functionapp update \
            #         --name $(dataProcessorFunctionAppName) \
            #         --resource-group $(resourceGroupName) \
            #         --slot staging \
            #         --set \
            #           publicNetworkAccess=Enabled \
            #           siteConfig.publicNetworkAccess=Enabled

            # TODO EES-5128
            # Retry deploying the Function App in order to allow the staging slot the time to
            # fully restart after config and network settings have been updated prior to deploy.
            #
            # Deploying prematurely results in a 500 from the deployment endpoint until the
            # endpoint is ready to accept the deployment request.
            #
            # In the future it would be preferable to have a health check Function that can
            # check the site is ready, but we need to add the Service Principal to allowed
            # Client IDs / Identities that can access the Function App. The Service Principal
            # that is performing the deploy can be accessed by using the `addSpnToEnvironment`
            # config option in the task definition and using the $(servicePrincipalId) variable.
            - task: AzureCLI@2
              displayName: Deploy to staging slot
              retryCountOnTaskFailure: 10
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  az functionapp deployment source config-zip \
                    --src '$(Pipeline.Workspace)/MainBuild/public-api-data-processor/GovUk.Education.ExploreEducationStatistics.Public.Data.Processor.zip' \
                    --name $(dataProcessorFunctionAppName) \
                    --resource-group $(resourceGroupName) \
                    --slot staging

            # TODO EES-5128
            # Add Private Endpoint to Data Processor Function App into the VMSS VNet to allow
            # DevOps to deploy the Data Processor Function App without having to temporarily
            # make it publicly accessible.
            # - task: AzureCLI@2
            #   displayName: Disable public network access after deploy
            #   retryCountOnTaskFailure: 1
            #   condition: always()
            #   inputs:
            #     azureSubscription: ${{ parameters.serviceConnection }}
            #     scriptType: bash
            #     scriptLocation: inlineScript
            #     inlineScript: |
            #       set -e
          
            #       az functionapp update \
            #         --name $(dataProcessorFunctionAppName) \
            #         --resource-group $(resourceGroupName) \
            #         --slot staging \
            #         --set \
            #           publicNetworkAccess=Disabled \
            #           siteConfig.publicNetworkAccess=Disabled

            - task: AzureCLI@2
              displayName: Wait for active orchestrations to complete
              retryCountOnTaskFailure: 1
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e

                  pollingTimeSeconds=5
                  maxAttempts=24
                  attempts=1
                  
                  while [ "$attempts" -le "$maxAttempts" ]; do
                  
                    echo "Attempt number $attempts to check if the Data Processor is ready for deployment"
                      
                    activeOrchestrations=`curl -s $dataProcessorFunctionAppUrl/api/StatusCheck | jq -r '.activeOrchestrations != 0'`

                    if [[ "$activeOrchestrations" == "false2" ]]; then
                      echo "No active orchestrations running on the Data Processor - slot swapping can proceed"
                      exit 0
                    fi
  
                    attempts=$((attempts + 1))
                  
                  done

                  echo "Timed out waiting for active Data processor orchestrations to complete."
                  exit 1

            - task: AzureCLI@2
              displayName: Swap slots
              retryCountOnTaskFailure: 1
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  az functionapp deployment slot swap \
                    --name $(dataProcessorFunctionAppName) \
                    --resource-group $(resourceGroupName) \
                    --slot staging \
                    --target-slot production
