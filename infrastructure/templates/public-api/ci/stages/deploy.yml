parameters:
  - name: stageName
    type: string
  - name: environment
    type: string
  - name: serviceConnection
    type: string
  - name: dependsOn
    type: string
    default: ''
  - name: parameterFile
    type: string
  - name: condition
    type: string

stages:
  - stage: ${{parameters.stageName}}
    displayName: Deploy ${{parameters.environment}}
    # Prevent this stage from running in parallel with the same deploy stage in other
    # ongoing runs of this pipeline. Instead, multiple executions of this stage will
    # be queued and run sequentially in the order that their pipelines were triggered.
    lockBehavior: sequential
    condition: ${{parameters.condition}}
    variables:
      - group: Public API Infrastructure - ${{parameters.environment}}
      - group: Public API Infrastructure - ${{parameters.environment}} secrets
      - name: dataProcessorFunctionAppName
        value: $(subscription)-ees-papi-fa-processor
      - name: docsAppName
        value: $(subscription)-ees-papi-stapp-docs
      - name: bicepDeployName
        value: PublicApiInfrastructure$(upstreamPipelineBuildNumber)
    ${{ if not(eq(parameters.dependsOn, '')) }}:
      dependsOn: ${{parameters.dependsOn}}
    jobs:
      - deployment: Deploy
        displayName: Deploy infrastructure and apps
        environment: ${{parameters.environment}}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: MainBuild
                  displayName: Download Data Processor Function App artifact
                  artifact: public-api-data-processor

                - download: MainBuild
                  displayName: Download API docs artifact
                  artifact: public-api-docs

                # Workaround for deprecation warning preventing deployment token for
                # API docs from being fetched: https://github.com/Azure/azure-cli/issues/30048
                - task: Bash@3
                  name: InstallAzureCLI
                  displayName: Install Azure CLI 2.64.0 as workaround
                  inputs:
                    targetType: inline
                    script: |
                      pip install --force-reinstall azure-cli==2.64.0

                - checkout: self

                - task: AzureCLI@2
                  displayName: Check if Data Processor Function App exists
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      dataProcessorExists=`az functionapp list --resource-group $(resourceGroupName) --query "[?name=='$(dataProcessorFunctionAppName)']" | jq '. != []'`
                      
                      if [[ "$dataProcessorExists" == "true" ]]; then
                        echo "Data Processor Function App exists - combining existing appsettings with new ones"
                      fi
                      
                      echo "##vso[task.setvariable variable=dataProcessorExists;]$dataProcessorExists"

                - template: ../tasks/deploy-bicep.yml
                  parameters:
                    displayName: Deploy Bicep template
                    action: create
                    serviceConnection: ${{parameters.serviceConnection}}
                    parameterFile: ${{parameters.parameterFile}}
                    deployContainerApp: $(deployContainerApp)
                    updatePsqlFlexibleServer: $(updatePsqlFlexibleServer)
                    dataProcessorFunctionAppExists: $(dataProcessorExists)

                - template: ../tasks/bicep-output-variables.yml
                  parameters:
                    serviceConnection: ${{parameters.serviceConnection}}

                - task: AzureCLI@2
                  displayName: Get API docs deployment token
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      deploymentToken=`az staticwebapp secrets list -n $(docsAppName) --query "properties.apiKey" -o tsv`
                      echo "##vso[task.setvariable variable=docsDeploymentToken;]$deploymentToken"

                - task: AzureStaticWebApp@0
                  displayName: Deploy API docs
                  inputs:
                    app_location: /
                    output_location: '' # Leave this empty
                    skip_app_build: true
                    skip_api_build: true
                    azure_static_web_apps_api_token: $(docsDeploymentToken)
                    cwd: $(Pipeline.Workspace)/MainBuild/public-api-docs

                # We do config updates out of Bicep template so we can implement slot swapping.
                # Changes are first deployed to the staging slot and combined with a fresh
                # code deploy prior to being swapped with the production slot.
                - task: AzureCLI@2
                  displayName: Deploy Data Processor Function App - update staging slot app settings
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp config appsettings set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --settings \
                          "App__PrivateStorageConnectionString=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(coreStorageConnectionStringSecretKey))" \
                          "App__EnableThemeDeletion=$(enableThemeDeletion)" \
                          "AZURE_CLIENT_ID=$(dataProcessorFunctionAppManagedIdentityClientId)" \
                          "DataFiles__BasePath=$(dataProcessorPublicApiDataFileShareMountPath)"
                      
                      az webapp config connection-string set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --connection-string-type SQLAzure \
                        --slot staging \
                        --settings \
                          "ContentDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorContentDbConnectionStringSecretKey))"
                      
                      az webapp config connection-string set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --connection-string-type PostgreSQL \
                        --slot staging \
                        --settings \
                          "PublicDataDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorPsqlConnectionStringSecretKey))"

                # TODO EES-5128
                # Add Private Endpoint to Data Processor Function App into the VMSS VNet to allow
                # DevOps to deploy the Data Processor Function App without having to temporarily
                # make it publicly accessible.
                - task: AzureCLI@2
                  displayName: Deploy Data Processor Function App - temporarily enable public network access before deploy
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp update \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --set \
                          publicNetworkAccess=Enabled \
                          siteConfig.publicNetworkAccess=Enabled

                # TODO EES-5128
                # Retry deploying the Function App in order to allow the staging slot the time to
                # fully restart after config and network settings have been updated prior to deploy.
                #
                # Deploying prematurely results in a 500 from the deployment endpoint until the
                # endpoint is ready to accept the deployment request.
                #
                # In the future it would be preferable to have a health check Function that can
                # check the site is ready, but we need to add the Service Principal to allowed
                # Client IDs / Identities that can access the Function App. The Service Principal
                # that is performing the deploy can be accessed by using the `addSpnToEnvironment`
                # config option in the task definition and using the $(servicePrincipalId) variable.
                - task: AzureCLI@2
                  displayName: Deploy Data Processor Function App - deploy to staging slot
                  retryCountOnTaskFailure: 10
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      az functionapp deployment source config-zip \
                        --src '$(Pipeline.Workspace)/MainBuild/public-api-data-processor/GovUk.Education.ExploreEducationStatistics.Public.Data.Processor.zip' \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging

                # TODO EES-5128
                # Add Private Endpoint to Data Processor Function App into the VMSS VNet to allow
                # DevOps to deploy the Data Processor Function App without having to temporarily
                # make it publicly accessible.
                - task: AzureCLI@2
                  displayName: Deploy Data Processor Function App - disable public network access after deploy
                  retryCountOnTaskFailure: 1
                  condition: always()
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp update \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --set \
                          publicNetworkAccess=Disabled \
                          siteConfig.publicNetworkAccess=Disabled

                - task: AzureCLI@2
                  displayName: Deploy Data Processor Function App - swap slots
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      az functionapp deployment slot swap \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --target-slot production

              # - template: ../tasks/assign-app-role-to-service-principal.yml
              #   parameters:
              #     serviceConnection: ${{parameters.serviceConnection}}
              #     appRoleName: Admin.Access
              #     protectedResourceAppRegName: $(subscription)-ees-papi-ca-api-appreg
              #     servicePrincipalName: $(subscription)-as-ees-admin
