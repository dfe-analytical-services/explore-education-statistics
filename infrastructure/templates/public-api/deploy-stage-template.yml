# This is a reusable Deploy stage definition that is parameterised to be reusable
# to support deployment to different environments

parameters:
  - name: stageName
    type: string
  - name: environment
    type: string
  - name: serviceConnection
    type: string
  - name: subscription
    type: string
  - name: dependsOn
    type: string
    default: ''
  - name: parameterFile
    type: string
  - name: condition
    type: string

stages:
  - stage: ${{parameters.stageName}}
    displayName: 'Deploy ${{parameters.environment}} Infrastructure and Applications'
    # Prevent this stage from running in parallel with the same deploy stage in other ongoing runs of this pipeline.
    # Instead, multiple executions of this stage will be queued and run sequentially in the order that their pipelines
    # were triggered.
    lockBehavior: sequential
    condition: ${{parameters.condition}}
    variables:
      - group: Public API Infrastructure - ${{parameters.environment}}
      - group: Public API Infrastructure - ${{parameters.environment}} secrets
    ${{ if not(eq(parameters.dependsOn, '')) }}:
      dependsOn: ${{parameters.dependsOn}}
    jobs:
      - deployment: Deploy
        displayName: 'Deploy ${{parameters.environment}} Infrastructure Bicep template and applications'
        environment: '${{parameters.environment}}'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Set additional pipeline variables'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##vso[task.setvariable variable=dataProcessorFunctionAppName;]$(subscription)-ees-papi-fa-processor"

                - download: EESBuildPipeline
                  displayName: 'Download Data Processor Function App ZIP file'
                  artifact: 'public-api-data-processor-$(upstreamPipelineBuildNumber)'

                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Deploy bicep template to Azure'
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      dataProcessorExists=`az functionapp list --resource-group $(resourceGroupName) --query "[?name=='$(dataProcessorFunctionAppName)']" | jq '. != []'`
                      
                      if [[ "$dataProcessorExists" == "true" ]]; then
                        echo "Data Processor Function App exists - combining existing appsettings with new ones"
                      fi
                      
                      az deployment group create \
                        --name 'DeployPublicApiInfrastructure$(upstreamPipelineBuildNumber)' \
                        --resource-group $(resourceGroupName) \
                        --template-file $(templateFile) \
                        --parameters ${{parameters.parameterFile}} \
                        --parameters \
                            subscription='$(subscription)' \
                            resourceTags='$(resourceTags)' \
                            postgreSqlAdminName='$(postgreSqlAdminName)' \
                            postgreSqlAdminPassword='$(postgreSqlAdminPassword)' \
                            postgreSqlFirewallRules='$(maintenanceFirewallRules)' \
                            postgreSqlEntraIdAdminPrincipals='$(postgreSqlEntraIdAdminPrincipals)' \
                            storageFirewallRules='$(maintenanceFirewallRules)' \
                            acrResourceGroupName='$(acrResourceGroupName)' \
                            dockerImagesTag='$(upstreamPipelineBuildNumber)' \
                            deployContainerApp=$(deployContainerApp) \
                            updatePsqlFlexibleServer=$(updatePsqlFlexibleServer) \
                            dataProcessorFunctionAppExists=$dataProcessorExists \
                            dataProcessorAppRegistrationClientId='$(dataProcessorAppRegistrationClientId)' \
                            apiAppRegistrationClientId='$(apiAppRegistrationClientId)'

                - template: pipeline-variables-from-bicep-outputs-template.yml
                  parameters:
                    serviceConnection: ${{parameters.serviceConnection}}
                
                # We handle the non-infrastructure appsetting and connection string configuration here rather than directly
                # in the Bicep files so that we can implement slot swapping.
                # Configuration changes are firstly deployed to the staging slot and combined with a fresh code deploy prior
                # to being swapped into production.
                - task: AzureCLI@2
                  displayName: 'Deploy Data Processor Function App - update staging slot app settings'
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp config appsettings set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --settings \
                          "AppSettings__PrivateStorageConnectionString=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(coreStorageConnectionStringSecretKey))" \
                          "AZURE_CLIENT_ID=$(dataProcessorFunctionAppManagedIdentityClientId)" \
                          "DataFiles__BasePath=$(dataProcessorPublicApiDataFileShareMountPath)"
                      
                      az webapp config connection-string set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --connection-string-type SQLAzure \
                        --slot staging \
                        --settings \
                          "ContentDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorContentDbConnectionStringSecretKey))"
                      
                      az webapp config connection-string set \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --connection-string-type PostgreSQL \
                        --slot staging \
                        --settings \
                          "PublicDataDb=@Microsoft.KeyVault(VaultName=$(keyVaultName); SecretName=$(dataProcessorPsqlConnectionStringSecretKey))"
                
                # TODO EES-5128 - add Private Endpoint to Data Processor Function App into the VMSS VNet to allow DevOps to
                # deploy the Data Processor Function App without having to temporarily make it publicly accessible.
                - task: AzureCLI@2
                  displayName: 'Deploy Data Processor Function App - temporarily enable public network access before deploy'
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp update \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --set \
                          publicNetworkAccess=Enabled \
                          siteConfig.publicNetworkAccess=Enabled
                
                # TODO EES-5128 - we will try several attempts to deploy the Function App in order to allow the staging
                # slot the time to fully restart after appsettings and network visibility settings have been updated prior to
                # attempting the deploy. Deploying prematurely results in a 500 from the deployment endpoint until the
                # endpoint is ready to accept the deployment request. In the future it would be preferable to have a health
                # check Function that we could call to establish that the site is ready, but this will require adding the
                # Service Principal to allowed Client IDs / Identities that can access the Function App. The Service Principal
                # that is performing the deploy can be accessed by using the "addSpnToEnvironment" config option in the task
                # definition and using the $(servicePrincipalId) variable.
                - task: AzureCLI@2
                  displayName: 'Deploy Data Processor Function App - deploy to staging slot'
                  retryCountOnTaskFailure: 10
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      az functionapp deployment source config-zip \
                        --src '$(Pipeline.Workspace)/EESBuildPipeline/public-api-data-processor-$(upstreamPipelineBuildNumber)/GovUk.Education.ExploreEducationStatistics.Public.Data.Processor.zip' \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging
                
                # TODO EES-5128 - add Private Endpoint to Data Processor Function App into the VMSS VNet to allow DevOps to
                # deploy the Data Processor Function App without having to temporarily make it publicly accessible.
                - task: AzureCLI@2
                  displayName: 'Deploy Data Processor Function App - disable public network access after deploy'
                  retryCountOnTaskFailure: 1
                  condition: always()
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      
                      az functionapp update \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --set \
                          publicNetworkAccess=Disabled \
                          siteConfig.publicNetworkAccess=Disabled

                - task: AzureCLI@2
                  displayName: 'Deploy Data Processor Function App - swap slots'
                  retryCountOnTaskFailure: 1
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -e
                      az functionapp deployment slot swap \
                        --name $(dataProcessorFunctionAppName) \
                        --resource-group $(resourceGroupName) \
                        --slot staging \
                        --target-slot production
              
              # - template: assign-app-role-to-service-principal-template.yml
              #   parameters:
              #     serviceConnection: ${{parameters.serviceConnection}}
              #     appRoleName: Admin.Access
              #     protectedResourceAppRegName: ${{parameters.subscription}}-ees-papi-ca-api-appreg
              #     servicePrincipalName: ${{parameters.subscription}}-as-ees-admin
