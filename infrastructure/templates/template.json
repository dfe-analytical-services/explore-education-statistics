{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "domain": {
      "type": "string"
    },
    "contentApiUrl": {
      "type": "string"
    },
    "dataApiUrl": {
      "type": "string"
    },
    "subscription": {
      "type": "string",
      "metadata": {
        "description": "Data Hub Subscription Name e.g. s101d01. Used as a prefix for created resources"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "ees",
      "metadata": {
        "description": "Data Hub Environment Name e.g. ees. Used as a prefix for created resources"
      }
    },

    "skuPublic": {
      "type": "string",
      "defaultValue": "B1 Basic",
      "allowedValues": [
        "B1 Basic",
        "B2 Basic",
        "B3 Basic",
        "S1 Standard",
        "S2 Standard",
        "S3 Standard"
      ]
    },
    "skuData": {
      "type": "string",
      "defaultValue": "S1 Standard",
      "allowedValues": [
        "B1 Basic",
        "B2 Basic",
        "B3 Basic",
        "S1 Standard",
        "S2 Standard",
        "S3 Standard"
      ]
    },
    "skuContent": {
      "type": "string",
      "defaultValue": "S1 Standard",
      "allowedValues": [
        "B1 Basic",
        "B2 Basic",
        "B3 Basic",
        "S1 Standard",
        "S2 Standard",
        "S3 Standard"
      ]
    },
    "skuAdmin": {
      "type": "string",
      "defaultValue": "S1 Standard",
      "allowedValues": [
        "B1 Basic",
        "B2 Basic",
        "B3 Basic",
        "S1 Standard",
        "S2 Standard",
        "S3 Standard"
      ]
    },
    "skuImporter": {
      "type": "string",
      "defaultValue": "S1 Standard",
      "allowedValues": [
        "S1 Standard",
        "S2 Standard",
        "S3 Standard"
      ]
    },
    "adminFirewallRules": {
      "type": "array",
      "metadata": {
        "description": "Firewall restrictions for the admin application"
      }
    },
    "storageFirewallRules": {
      "type": "array",
      "metadata": {
        "description": "Firewall restrictions for storage accounts, string array"
      }
    },
    "sqlPublicContentApiUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the content api for the public SQL Server"
      }
    },
    "sqlPublicContentApiPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the content api user of the public SQL Server"
      }
    },
    "sqlPublicDataApiUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the data api for the public SQL Server"
      }
    },
    "sqlPublicDataApiPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the data api user of the public SQL Server"
      }
    },
    "sqlContentApiUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the content api for the private SQL Server"
      }
    },
    "sqlContentApiPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the content api user for the private SQL Server"
      }
    },
    "sqlDataApiUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the data api for the private SQL Server"
      }
    },
    "sqlDataApiPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the data api user for the private SQL Server"
      }
    },
    "sqlPublisherUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the publisher for the private SQL Server"
      }
    },
    "sqlPublisherUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the publisher user for the private SQL Server"
      }
    },
    "sqlImporterUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the publisher for the private SQL Server"
      }
    },
    "sqlImporterUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the importer user for the private SQL Server"
      }
    },
    "sqlAdminUser": {
      "type": "string",
      "metadata": {
        "description": "The username of the admin app for the private SQL Server"
      }
    },
    "sqlAdminUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin app for the private SQL Server"
      }
    },
    "sqlFirewallRules": {
      "type": "array",
      "metadata": {
        "description": "Firewall restrictions for sql databases"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "sqlAzureAdministratorLogin": {
      "type": "string"
    },
    "sqlAzureAdministratorSid": {
      "type": "string"
    },
    "secAlertRetentionDays": {
      "defaultValue": "14",
      "type": "string",
      "metadata": {
        "description": "Number of days to retain the security alerts for"
      }
    },
    "sqlAuditing": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlVulnerabilityAssessments": {
      "type": "bool",
      "defaultValue": true
    },

    "publicAppBasicAuth": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [
        "true",
        "false"
      ],
      "metadata": {
        "description": "Enables Basic Auth on the public application, the purpose of this is prevent accidential access to the application before it is publically avaliable (following GDS guidance)"
      }
    },
    "publicAppBasicAuthUsername": {
      "type": "string",
      "metadata": {
        "description": "Username protecting the public app, no requirement to be secret, the purpose of this is prevent accidential access to the application before it is publically avaliable (following GDS guidance)"
      }
    },
    "publicAppBasicAuthPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password protecting the public app, no requirement to be secret, the purpose of this is prevent accidential access to the application before it is publically avaliable (following GDS guidance)"
      }
    },
    "publicAppGATrackingId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Google Analytics tracking ID for the public app. Leave as empty string to disable Google Analytics"
      }
    },
    "publicAppHotjarId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Hotjar ID for the public app. Leave as empty string to disable Hotjar"
      }
    },

    "verificationEmailTemplateId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Gov UK Notify service template Id for verifing subscription"
      }
    },
    "publicationNotificationEmailTemplateId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Gov UK Notify service template Id for new release notification"
      }
    },
    "subscriptionConfirmationEmailTemplateId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Gov UK Notify service template Id for subscription confirmation"
      }
    },
    "notifyInviteTemplateId": {
      "type": "securestring",
      "defaultValue": ""
    },
    "notifyPublicationRoleTemplateId": {
      "type": "securestring",
      "defaultValue": ""
    },
    "notifyReleaseRoleTemplateId": {
      "type": "securestring",
      "defaultValue": ""
    },
    "notifyPreReleaseTemplateId": {
      "type": "securestring",
      "defaultValue": "change-me"
    },
    "teamEmailAddresses": {
      "type": "array",
      "defaultValue": [
        "dfeteam@hiveit.co.uk",
        "explore.statistics@education.gov.uk"
      ],
      "metadata": {
        "description": "Email addresses for receiving alerts"
      }
    },
    "departmentName": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the Department name tag value e.g. Data Directorate"
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - The name of the phase of the development lifecycle environment that the component will be used in e.g. Development / Test / Integration / Production"
      }
    },
    "subscriptionName": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the full name of the Azure subscription where this resource is located e.g. s101-datahub-development / s101-datahub-test / s101-datahub-production"
      }
    },
    "solutionName": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the solution name that the component is a part of e.g. EDAP, LDS, EES"
      }
    },
    "costCentre": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the cost centre identifying value provided by the Service Owner. Otherwise populate with Unknown."
      }
    },
    "serviceOwnerName": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the name of the Service or Application Owner in the SURNAME, Firstname format e.g. SINCLAIR, Paul / SHELBY, Laura"
      }
    },
    "dateProvisioned": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "metadata": {
        "description": "Tag Value - Enter the date that the component was created using the YYYYMMDD format e.g. 20190417. Use of the utcNow function will automatically populate this entry at creation time. Note: This only works when forced as a default value."
      }
    },
    "createdBy": {
      "type": "string",
      "defaultValue": "Unknown",
      "metadata": {
        "description": "Tag Value - Enter the name of the user who created these resources in the SURNAME, Firstname format e.g. RULER, Paul"
      }
    },
    "deploymentRepo": {
      "type": "string",
      "defaultValue": "N/A",
      "metadata": {
        "description": "Tag Value - Enter the name of the repo that the deployment script for the component name be found. If the component is deployed manually, the value should be N/A"
      }
    },
    "deploymentScript": {
      "type": "string",
      "defaultValue": "N/A",
      "metadata": {
        "description": "Tag Value - Enter the name of the main script (not the parameters file) used to deploy the component. If the component is deployed manually, the value should be N/A"
      }
    },

    "adminUri": {
      "type": "string"
    },

    "minTlsVersion": {
      "type": "string",
      "defaultValue": "1.2",
      "allowedValues": [
        "-1.0",
        "1.1",
        "1.2"
      ]
    },
    "useSubnets": {
      "type": "bool",
      "defaultValue": true
    },
    "deploySubnets": {
      "type": "bool",
      "defaultValue": true
    },

    "publishReleasesCronSchedule": {
      "type": "string",
      "defaultValue": "0 0 0 * * *",
      "metadata": {
        "description": "Cron string that is used to control the schedule of the Publish Releases Function in the Publisher App"
      }
    },

    "publishReleaseContentCronSchedule": {
      "type": "string",
      "defaultValue": "0 30 9 * * *",
      "metadata": {
        "description": "Cron string that is used to control the schedule of the Publish Release Content Function in the Publisher App"
      }
    },

    "publishReleaseDataFunctionDisabled": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Disable the Publish Release Data Function in the Publisher App which triggers the Datafactory pipeline"
      }
    },

    "preReleaseMinutesBeforeStart": {
      "type": "int",
      "defaultValue": 870,
      "metadata": {
        "description": "Prerelease start time as number of minutes before a release is scheduled to be published"
      }
    },
    "preReleaseMinutesBeforeEnd": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Prerelease end time as number of minutes before a release is scheduled to be published"
      }
    },

    "publisherClientId": {
      "type": "string",
      "metadata": {
        "description": "Publisher Active Directory Application Client Id used for authentication requests"
      }
    },

    "publisherClientSecret": {
      "type": "string",
      "metadata": {
        "description": "Publisher Active Directory Application Client secret used to prove its identity during authentication requests"
      }
    },

    "publisherPipelineName": {
      "type": "string",
      "defaultValue": "pl_release_statistics",
      "metadata": {
        "description": "Name of pipeline used by the Datafactory in the Publish Release Data Function in the Publisher App"
      }
    },
    "blobDeleteRetentionEnabled": {
      "defaultValue": true,
      "type": "bool",
      "metadata": {
        "description": "Retain blobs after delete"
      }
    },
    "blobDeleteRetentionDays": {
      "defaultValue": 90,
      "type": "int",
      "metadata": {
        "description": "Number of days to retain blobs after delete"
      }
    },
    "autoscalePublicApplication": {
      "type": "bool",
      "defaultValue": false
    },
    "devopsSPN": {
      "type": "string"
    },
    "storageAccountPrefix": {
      "type": "string",
      "defaultValue": "storage"
    },
    "detailedErrors": {
      "type": "bool",
      "defaultValue": false
    },
    "enableSwagger": {
      "type": "bool",
      "defaultValue": false
    },
    "timeZone": {
      "type": "string",
      "defaultValue": "GMT Standard Time"
    },
    "branch": {
      "type": "string",
      "defaultValue": "master",
      "allowedValues": [
        "master",
        "dev"
      ]
    },
    "minCapacityStatisticsDb": {
      "type": "string",
      "defaultValue": "0.75"
    },
    "maxCapacityStatisticsDb": {
      "type": "int",
      "defaultValue": 1
    },
    "autoPauseDelayStatisticsDb": {
      "type": "int",
      "defaultValue": -1
    },
    "minCapacityContentDb": {
      "type": "string",
      "defaultValue": "0.75"
    },
    "maxCapacityContentDb": {
      "type": "int",
      "defaultValue": 1
    },
    "autoPauseDelayContentDb": {
      "type": "int",
      "defaultValue": -1
    },
    "deploySlotName": {
      "type": "string",
      "defaultValue": "deploy"
    },
    "maxDbSizeBytes": {
      "type": "int",
      "defaultValue": 268435456000
    },
    "enableAlerts": {
      "type": "bool",
      "defaultValue": false
    },
    "slackWebhook": {
      "type": "string",
      "metadata": {
        "description": "Slack webhook URI for alerts"
      }
    }
  },
  "variables": {
    "dataAppName": "[concat(parameters('subscription'), '-as-', parameters('environment'), '-data')]",
    "dataPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-data')]",
    "dataAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-data')]",
    "contentAppName": "[concat(parameters('subscription'), '-as-', parameters('environment'), '-content')]",
    "contentPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-content')]",
    "contentAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-content')]",
    "adminAppName": "[concat(parameters('subscription'), '-as-', parameters('environment'), '-admin')]",
    "adminPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-admin')]",
    "adminAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-admin')]",
    "publicAppName": "[concat(parameters('subscription'), '-as-', parameters('environment'), '-public')]",
    "publicAppUrl": "[concat('https://', parameters('domain'))]",
    "publicPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-public')]",
    "publicAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-public')]",
    "coreStorageAccountName": "[concat(parameters('subscription'), parameters('storageAccountPrefix'), 'eescore')]",
    "coreStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('coreStorageAccountName'))]",
    "sqlserverName": "[concat(parameters('subscription'), '-sqlsvr-', parameters('environment'), '-01')]",
    "publicSqlServerName": "[concat(parameters('subscription'), '-sqlsvr-', parameters('environment'), '-02')]",
    "importerAppName": "[concat(parameters('subscription'), '-fa-', parameters('environment'), '-importer')]",
    "importerPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-importer')]",
    "importerAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-importer')]",
    "notificationsAppName": "[concat(parameters('subscription'), '-fa-', parameters('environment'), '-notify')]",
    "notificationsPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-notify')]",
    "notificationsAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-notify')]",
    "notificationsStorageAccountName": "[concat(parameters('subscription'), parameters('storageAccountPrefix'), 'eesnotify')]",
    "notificationsStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('notificationsStorageAccountName'))]",
    "publicStorageAccountName": "[concat(parameters('subscription'), 'saeespublic')]",
    "publicStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('publicStorageAccountName'))]",
    "publisherAppName": "[concat(parameters('subscription'), '-fa-', parameters('environment'), '-publisher')]",
    "publisherPlanName": "[concat(parameters('subscription'), '-asp-', parameters('environment'), '-publisher')]",
    "publisherAppInsights": "[concat(parameters('subscription'), '-ai-', parameters('environment'), '-publisher')]",
    "publisherStorageAccountName": "[concat(parameters('subscription'), 'saeespublisher')]",
    "publisherStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('publisherStorageAccountName'))]",
    "loggingStorageAccountName": "[concat(parameters('subscription'), 'saeeslogging')]",

    "logicAppSlackAlerts": "[concat(parameters('subscription'), '-la-', parameters('environment'), '-slackwebhook')]",
    "actionGroupAlerts": "[concat(parameters('subscription'), '-ag-', parameters('environment'), '-alertedusers')]",
    "metricAlerts": [
      //{
      //  "name": "[concat(parameters('subscription'),'AdminAppServiceHttpServiceErrors')]",
      //  "description": "Admin App Service - Http Service Errors",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('adminAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "Http5xx",
      //  "threshold": 0,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Total",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'DataAppServiceHttpServiceErrors')]",
      //  "description": "Data App Service - Http Service Errors",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('dataAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "Http5xx",
      //  "threshold": 5,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Total",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'ContentAppServiceHttpServiceErrors')]",
      //  "description": "Content App Service - Http Service Errors",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('contentAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "Http5xx",
      //  "threshold": 2,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Total",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'PublicAppServiceHttpServiceErrors')]",
      //  "description": "Public App Service - Http Service Errors",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('publicAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "Http5xx",
      //  "threshold": 15,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Total",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      {
        "name": "[concat(parameters('subscription'),'ImporterAppServiceHttpServiceErrors')]",
        "description": "Importer App Service - Http Service Errors",
        "resourceId": "[resourceId('Microsoft.Web/sites', variables('importerAppName'))]",
        "resourceType": "Microsoft.Web/sites",
        "metricName": "Http5xx",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'NotificationsAppServiceHttpServiceErrors')]",
        "description": "Notifications App Service - Http Service Errors",
        "resourceId": "[resourceId('Microsoft.Web/sites', variables('notificationsAppName'))]",
        "resourceType": "Microsoft.Web/sites",
        "metricName": "Http5xx",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PublisherAppServiceHttpServiceErrors')]",
        "description": "Publisher App Service - Http Service Errors",
        "resourceId": "[resourceId('Microsoft.Web/sites', variables('publisherAppName'))]",
        "resourceType": "Microsoft.Web/sites",
        "metricName": "Http5xx",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      //{
      //  "name": "[concat(parameters('subscription'),'AdminAppInsightsExceptions')]",
      //  "description": "Admin AppInsights - Exceptions",
      //  "resourceId": "[resourceId('Microsoft.Insights/components', variables('adminAppInsights'))]",
      //  "resourceType": "Microsoft.Insights/components",
      //  "metricName": "exceptions/count",
      //  "threshold": 10,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Count",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'DataAppInsightsExceptions')]",
      //  "description": "Data AppInsights - Exceptions",
      //  "resourceId": "[resourceId('Microsoft.Insights/components', variables('dataAppInsights'))]",
      //  "resourceType": "Microsoft.Insights/components",
      //  "metricName": "exceptions/count",
      //  "threshold": 5,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Count",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'ContentAppInsightsExceptions')]",
      //  "description": "Content AppInsights - Exceptions",
      //  "resourceId": "[resourceId('Microsoft.Insights/components', variables('contentAppInsights'))]",
      //  "resourceType": "Microsoft.Insights/components",
      //  "metricName": "exceptions/count",
      //  "threshold": 4,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Count",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'PublicAppInsightsExceptions')]",
      //  "description": "Content AppInsights - Exceptions",
      //  "resourceId": "[resourceId('Microsoft.Insights/components', variables('publicAppInsights'))]",
      //  "resourceType": "Microsoft.Insights/components",
      //  "metricName": "exceptions/count",
      //  "threshold": 15,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Count",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      {
        "name": "[concat(parameters('subscription'),'ImporterAppInsightsExceptions')]",
        "description": "Importer AppInsights - Exceptions",
        "resourceId": "[resourceId('Microsoft.Insights/components', variables('importerAppInsights'))]",
        "resourceType": "Microsoft.Insights/components",
        "metricName": "exceptions/count",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Count",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'NotificationsAppInsightsExceptions')]",
        "description": "Notifications AppInsights - Exceptions",
        "resourceId": "[resourceId('Microsoft.Insights/components', variables('notificationsAppInsights'))]",
        "resourceType": "Microsoft.Insights/components",
        "metricName": "exceptions/count",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Count",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PublisherAppInsightsExceptions')]",
        "description": "Publisher AppInsights - Exceptions",
        "resourceId": "[resourceId('Microsoft.Insights/components', variables('publisherAppInsights'))]",
        "resourceType": "Microsoft.Insights/components",
        "metricName": "exceptions/count",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Count",
        "criterionType": "StaticThresholdCriterion"
      },
      //{
      //  "name": "[concat(parameters('subscription'),'AdminAppServiceResponseTime')]",
      //  "description": "Admin App Service - Response Time",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('adminAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "HttpResponseTime",
      //  "threshold": 10,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Average",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'DataAppServiceResponseTime')]",
      //  "description": "Data App Service - Response Time",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('dataAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "HttpResponseTime",
      //  "threshold": 10,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Average",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      //{
      //  "name": "[concat(parameters('subscription'),'ContentAppServiceResponseTime')]",
      //  "description": "Content App Service - Response Time",
      //  "resourceId": "[resourceId('Microsoft.Web/sites', variables('contentAppName'))]",
      //  "resourceType": "Microsoft.Web/sites",
      //  "metricName": "HttpResponseTime",
      //  "threshold": 100,
      //  "operator": "GreaterThan",
      //  "timeAggregation": "Average",
      //  "criterionType": "StaticThresholdCriterion"
      //},
      {
        "name": "[concat(parameters('subscription'),'PublicAppServiceResponseTime')]",
        "description": "Public App Service - Response Time",
        "resourceId": "[resourceId('Microsoft.Web/sites', variables('publicAppName'))]",
        "resourceType": "Microsoft.Web/sites",
        "metricName": "HttpResponseTime",
        "threshold": 10,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBCpuPercent')]",
        "description": "Public Statistics DB CPU percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "cpu_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBDataIOPercent')]",
        "description": "Public Statistics DB Data IO Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "physical_data_read_percent",
        "threshold": 50,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBFailedConnections')]",
        "description": "Public Statistics DB Failed Connections",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "connection_failed",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBDeadlock')]",
        "description": "Public Statistics DB Deadlock",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "deadlock",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBDataSpaceUsedPercent')]",
        "description": "Public Statistics DB Data Space Used Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "storage_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Maximum",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'PubStatsDBBlockedByFirewall')]",
        "description": "Public Statistics DB Blocked By Firewall",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "blocked_by_firewall",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBCpuPercent')]",
        "description": "Statistics DB CPU percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "cpu_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBDataIOPercent')]",
        "description": "Statistics DB Data IO Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "physical_data_read_percent",
        "threshold": 50,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBFailedConnections')]",
        "description": "Statistics DB Failed Connections",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "connection_failed",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBDeadlock')]",
        "description": "Statistics DB Deadlock",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "deadlock",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBDataSpaceUsedPercent')]",
        "description": "Statistics DB Data Space Used Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "storage_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Maximum",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'StatsDBBlockedByFirewall')]",
        "description": "Statistics DB Blocked By Firewall",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'statistics')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "blocked_by_firewall",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBCpuPercent')]",
        "description": "Content DB CPU percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "cpu_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBDataIOPercent')]",
        "description": "Content DB Data IO Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "physical_data_read_percent",
        "threshold": 50,
        "operator": "GreaterThan",
        "timeAggregation": "Average",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBFailedConnections')]",
        "description": "Content DB Failed Connections",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "connection_failed",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBDeadlock')]",
        "description": "Content DB Deadlock",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "deadlock",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBDataSpaceUsedPercent')]",
        "description": "Content DB Data Space Used Percentage",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "storage_percent",
        "threshold": 75,
        "operator": "GreaterThan",
        "timeAggregation": "Maximum",
        "criterionType": "StaticThresholdCriterion"
      },
      {
        "name": "[concat(parameters('subscription'),'ContentDBBlockedByFirewall')]",
        "description": "Content DB Blocked By Firewall",
        "resourceId": "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), 'content')]",
        "resourceType": "microsoft.sql/servers/databases",
        "metricName": "blocked_by_firewall",
        "threshold": 0,
        "operator": "GreaterThan",
        "timeAggregation": "Total",
        "criterionType": "StaticThresholdCriterion"
      }
      // {
      //   "name": "[concat(parameters('subscription'),'DataFactoryPipelineFailures')]",
      //   "description": "Data Factory - Pipeline Failed Run",
      //   "resourceId": "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
      //   "resourceType": "Microsoft.DataFactory/factories",
      //   "metricName": "PipelineFailedRuns",
      //   "threshold": 0,
      //   "operator": "GreaterThan",
      //   "timeAggregation": "Total",
      //   "criterionType": "StaticThresholdCriterion"
      // }
    ],

    "vNetName": "[concat(parameters('subscription'), '-vnet-', parameters('environment'))]",
    "vNetRef": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]",
    "adminSubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-admin')]",
    "adminSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('adminSubnetName'))]",
    "importerSubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-importer')]",
    "importerSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('importerSubnetName'))]",
    "publisherSubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-publisher')]",
    "publisherSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('publisherSubnetName'))]",
    "notifySubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-notify')]",
    "notifySubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('notifySubnetName'))]",
    "contentSubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-content')]",
    "contentSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('contentSubnetName'))]",
    "dataSubnetName": "[concat(parameters('subscription'), '-snet-', parameters('environment'), '-data')]",
    "dataSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('dataSubnetName'))]",

    "sqlAllowedSubnets": [
      {
        "name": "admin",
        "id": "[variables('adminSubnetRef')]"
      },
      {
        "name": "importer",
        "id": "[variables('importerSubnetRef')]"
      },
      {
        "name": "publisher",
        "id": "[variables('publisherSubnetRef')]"
      },
      {
        "name": "content",
        "id": "[variables('contentSubnetRef')]"
      },
      {
        "name": "data",
        "id": "[variables('dataSubnetRef')]"
      }
    ],
    "publicSqlAllowedSubnets": [
      {
        "name": "content",
        "id": "[variables('contentSubnetRef')]"
      },
      {
        "name": "data",
        "id": "[variables('dataSubnetRef')]"
      },
      {
        "name": "publisher",
        "id": "[variables('publisherSubnetRef')]"
      }
    ],

    "dataFactoryName": "[concat(parameters('subscription'), '-df-', parameters('environment'), '-release')]",
    "keyVaultName": "[concat(parameters('subscription'), '-kv-', parameters('environment'), '-01')]",

    "ees-notify-apikey": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-notify-apikey')]",
    "ees-notify-apikey-admin": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-notify-apikey-admin')]",
    "ees-notify-token": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-notify-token')]",

    "ees-openidconnect-clientid": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-openidconnect-clientid')]",
    "ees-openidconnect-clientsecret": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-openidconnect-clientsecret')]",
    "ees-openidconnect-authority": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-openidconnect-authority')]",

    "ees-publisher-clientid": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-publisher-clientid')]",
    "ees-publisher-clientsecret": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-publisher-clientsecret')]",

    "ees-sql-admin-password": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-admin-password')]",
    "ees-sql-public-password": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-public-password')]",

    "ees-sql-password-admin": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-password-admin')]",
    "ees-sql-password-data": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-password-data')]",
    "ees-sql-password-importer": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-password-importer')]",
    "ees-sql-password-publisher": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-password-publisher')]",

    "ees-sql-user-admin": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-user-admin')]",
    "ees-sql-user-data": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-user-data')]",
    "ees-sql-user-importer": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-user-importer')]",
    "ees-sql-user-publisher": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-sql-user-publisher')]",

    "ees-storage-core": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-storage-core')]",
    "ees-storage-notifications": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-storage-notifications')]",
    "ees-storage-public": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-storage-public')]",
    "ees-storage-publisher": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'ees-storage-publisher')]",

    "ipWhiteList": {
      "copy": [
        {
          "name": "addresses",
          "count": "[length(parameters('adminFirewallRules'))]",
          "input": {
            "ipAddress": "[parameters('adminFirewallRules')[copyIndex('addresses')].Address]",
            "name": "[parameters('adminFirewallRules')[copyIndex('addresses')].Name]",
            "action": "Allow"
          }
        }
      ]
    },
    "templateBaseUrl": "[concat('https://raw.githubusercontent.com/dfe-analytical-services/explore-education-statistics/', parameters('branch'), '/infrastructure/templates/')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('dataAppName')]",
      "apiVersion": "2019-08-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('dataSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('dataAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "name": "[variables('dataAppName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('dataPlanName'))]",
        "hostingEnvironment": "",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
              "[concat('https://', parameters('domain'))]",
              "[concat('https://', variables('publicAppName'), '.azurewebsites.net')]",
              "https://localhost:3000",
              "http://localhost:3000",
              "http://127.0.0.1"
            ]
          },
          "connectionStrings": [
            {
              "name": "StatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('publicSqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'public-statistics', ';User Id=', parameters('sqlPublicDataApiUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('publicSqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlPublicDataApiPassword'), ';')]"
            },
            {
              "name": "ContentDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'content', ';User Id=', parameters('sqlDataApiUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlDataApiPassword'), ';')]"
            }
          ]
        }
      },

      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('dataPlanName'))]",
        "[resourceId('microsoft.insights/components/', variables('dataAppInsights'))]"
      ]
    },
    {
      "name": "[concat(variables('dataAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('dataAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-public')]"
      ],
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('dataAppInsights')), '2015-05-01').InstrumentationKey]",
        "WEBSITE_NODE_DEFAULT_VERSION": "6.9.1",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "PublicStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-public'), '2018-02-14').secretUriWithVersion, ')')]",
        "enableSwagger": "[parameters('enableSwagger')]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('dataAppName'), '/', parameters('deploySlotName'))]",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Web App",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('dataPlanName'))]",
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "AlwaysOn": false,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
              "[concat('https://', parameters('domain'))]",
              "[concat('https://', variables('publicAppName'), '.azurewebsites.net')]",
              "https://localhost:3000",
              "http://localhost:3000",
              "http://127.0.0.1"
            ]
          }
        }
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('dataSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/slots', variables('dataAppName'), parameters('deploySlotName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('dataAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "Tier": "[first(skip(split(parameters('skuData'), ' '), 1))]",
        "Name": "[first(split(parameters('skuData'), ' '))]"
      },
      "name": "[variables('dataPlanName')]",
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('dataPlanName')]",
        "workerSizeId": "0",
        "reserved": false,
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "name": "[variables('dataAppInsights')]",
      "apiVersion": "2014-04-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "applicationId": "[variables('dataAppName')]",
        "Request_Source": "AzureTfsExtensionAzureProject"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('contentAppName')]",
      "apiVersion": "2019-08-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('contentSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('contentAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "name": "[variables('contentAppName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('contentPlanName'))]",
        "hostingEnvironment": "",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
              "[concat('https://', parameters('domain'))]",
              "[concat('https://', variables('publicAppName'), '.azurewebsites.net')]",
              "https://localhost:3000",
              "http://localhost:3000",
              "http://127.0.0.1"
            ]
          },
          "connectionStrings": [
            {
              "name": "StatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('publicSqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'public-statistics', ';User Id=', parameters('sqlPublicContentApiUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('publicSqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlPublicContentApiPassword'), ';')]"
            },
            {
              "name": "ContentDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'content', ';User Id=', parameters('sqlContentApiUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlContentApiPassword'), ';')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('contentPlanName'))]",
        "[resourceId('microsoft.insights/components/', variables('contentAppInsights'))]"
      ]
    },
    {
      "name": "[concat(variables('contentAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('contentAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-public')]"
      ],
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('contentAppInsights')), '2015-05-01').InstrumentationKey]",
        "WEBSITE_NODE_DEFAULT_VERSION": "6.9.1",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "PublicStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-public'), '2018-02-14').secretUriWithVersion, ')')]",
        "enableSwagger": "[parameters('enableSwagger')]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('contentAppName'), '/', parameters('deploySlotName'))]",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Web App",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('contentPlanName'))]",
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "AlwaysOn": false,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
              "[concat('https://', parameters('domain'))]",
              "[concat('https://', variables('publicAppName'), '.azurewebsites.net')]",
              "https://localhost:3000",
              "http://localhost:3000",
              "http://127.0.0.1"
            ]
          }
        }
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('contentSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/slots', variables('contentAppName'), parameters('deploySlotName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('contentAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "Tier": "[first(skip(split(parameters('skuContent'), ' '), 1))]",
        "Name": "[first(split(parameters('skuContent'), ' '))]"
      },
      "name": "[variables('contentPlanName')]",
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('contentPlanName')]",
        "workerSizeId": "0",
        "reserved": false,
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "name": "[variables('contentAppInsights')]",
      "apiVersion": "2014-04-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "applicationId": "[variables('contentAppName')]",
        "Request_Source": "AzureTfsExtensionAzureProject"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('adminAppName')]",
      "apiVersion": "2019-08-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('adminSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('adminAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "name": "[variables('adminAppName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('adminPlanName'))]",
        "hostingEnvironment": "",
        "httpsOnly": true,
        "clientAffinityEnabled": true,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "use32BitWorkerProcess": false,
          "cors": {
            "allowedOrigins": [
              "https://localhost:3000",
              "http://localhost:3000"
            ]
          },
          "connectionStrings": [
            {
              "name": "StatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'statistics', ';User Id=', parameters('sqlAdminUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlAdminUserPassword'), ';')]"
            },
            {
              "name": "ContentDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'content', ';User Id=', parameters('sqlAdminUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlAdminUserPassword'), ';')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('adminPlanName'))]",
        "[resourceId('microsoft.insights/components/', variables('adminAppInsights'))]"
      ]
    },
    {
      "name": "[concat(variables('adminAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('adminAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-core')]",
        "[variables('ees-storage-public')]",
        "[variables('ees-storage-publisher')]"
      ],
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('adminAppInsights')), '2015-05-01').InstrumentationKey]",
        "AppInsights__InstrumentationKey": "[reference(resourceId('microsoft.insights/components/', variables('adminAppInsights')), '2015-05-01').InstrumentationKey]",
        "WEBSITE_NODE_DEFAULT_VERSION": "6.9.1",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "WEBSITE_LOAD_CERTIFICATES": "*",
        "ASPNETCORE_DETAILEDERRORS": "[parameters('detailedErrors')]",
        "NotifyApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-notify-apikey-admin'), '2018-02-14').secretUriWithVersion, ')')]",
        "NotifyInviteTemplateId": "[parameters('notifyInviteTemplateId')]",
        "NotifyPublicationRoleTemplateId": "[parameters('notifyPublicationRoleTemplateId')]",
        "NotifyReleaseRoleTemplateId": "[parameters('notifyReleaseRoleTemplateId')]",
        "NotifyPreReleaseTemplateId": "[parameters('notifyPreReleaseTemplateId')]",
        "AdminUri": "[parameters('adminUri')]",
        "PublicAppUrl": "[variables('publicAppUrl')]",
        "IdentityServer:IssuerUri": "[concat('urn=', parameters('adminUri'))]",
        "IdentityServer:Key:Name": "[concat('CN=', parameters('adminUri'))]",
        "OpenIdConnect:Authority": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-openidconnect-authority'), '2018-02-14').secretUriWithVersion, ')')]",
        "OpenIdConnect:ClientId": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-openidconnect-clientid'), '2018-02-14').secretUriWithVersion, ')')]",
        "OpenIdConnect:ClientSecret": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-openidconnect-clientsecret'), '2018-02-14').secretUriWithVersion, ')')]",
        "CoreStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-core'), '2018-02-14').secretUriWithVersion, ')')]",
        "PublicStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-public')).secretUriWithVersion, ')')]",
        "PublisherStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-publisher'), '2018-02-14').secretUriWithVersion, ')')]",
        "PreReleaseAccess:AccessWindow:MinutesBeforeReleaseTimeStart": "[parameters('preReleaseMinutesBeforeStart')]",
        "PreReleaseAccess:AccessWindow:MinutesBeforeReleaseTimeEnd": "[parameters('preReleaseMinutesBeforeEnd')]",
        "enableSwagger": "[parameters('enableSwagger')]"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('adminAppName'), '/', parameters('deploySlotName'))]",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Web App",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('adminPlanName'))]",
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "AlwaysOn": false,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "use32BitWorkerProcess": false,
          "cors": {
            "allowedOrigins": [
              "https://localhost:3000",
              "http://localhost:3000"
            ]
          }
        }
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('adminSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/slots', variables('adminAppName'), parameters('deploySlotName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('adminAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "Tier": "[first(skip(split(parameters('skuAdmin'), ' '), 1))]",
        "Name": "[first(split(parameters('skuAdmin'), ' '))]"
      },
      "name": "[variables('adminPlanName')]",
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('adminPlanName')]",
        "workerSizeId": "0",
        "reserved": false,
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "name": "[variables('adminAppInsights')]",
      "apiVersion": "2014-04-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "applicationId": "[variables('adminAppName')]",
        "Request_Source": "AzureTfsExtensionAzureProject"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('publicAppName')]",
      "apiVersion": "2019-08-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('publicAppName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('publicPlanName'))]",
        "hostingEnvironment": "",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('publicPlanName'))]",
        "[resourceId('microsoft.insights/components/', variables('publicAppInsights'))]"
      ]
    },
    {
      "name": "[concat(variables('publicAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('publicAppName'))]"
      ],
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('publicAppInsights')), '2015-05-01').InstrumentationKey]",
        "BASIC_AUTH": "[parameters('publicAppBasicAuth')]",
        "BASIC_AUTH_USERNAME": "[parameters('publicAppBasicAuthUsername')]",
        "BASIC_AUTH_PASSWORD": "[parameters('publicAppBasicAuthPassword')]",
        "CONTENT_API_BASE_URL": "[concat('https://', parameters('contentApiUrl'),'/api')]",
        "DATA_API_BASE_URL": "[concat('https://', parameters('dataApiUrl'),'/api')]",
        "NOTIFICATION_API_BASE_URL": "[concat('https://', variables('notificationsAppName'),'.azurewebsites.net/api')]",
        "HOTJAR_ID": "[parameters('publicAppHotjarId')]",
        "GA_TRACKING_ID": "[parameters('publicAppGATrackingId')]",
        "NODE_ENV": "production",
        "PUBLIC_URL": "[concat(variables('publicAppUrl'), '/')]",
        "WEBSITE_NODE_DEFAULT_VERSION": "12.13.0",
        "WEBSITE_RUN_FROM_PACKAGE": "1"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "Tier": "[first(skip(split(parameters('skuPublic'), ' '), 1))]",
        "Name": "[first(split(parameters('skuPublic'), ' '))]"
      },
      "name": "[variables('publicPlanName')]",
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('publicPlanName')]",
        "workerSizeId": "0",
        "reserved": false,
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "name": "[variables('publicAppInsights')]",
      "apiVersion": "2014-04-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "applicationId": "[variables('publicAppName')]",
        "Request_Source": "AzureTfsExtensionAzureProject"
      }
    },
    {
      "name": "[variables('coreStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "location": "westeurope",
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "condition": "[parameters('useSubnets')]",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "condition": "[parameters('useSubnets')]",
              "id": "[variables('adminSubnetRef')]",
              "action": "Allow"
            },
            {

              "condition": "[parameters('useSubnets')]",
              "id": "[variables('importerSubnetRef')]",
              "action": "Allow"
            },
            {
              "condition": "[parameters('useSubnets')]",
              "id": "[variables('publisherSubnetRef')]",
              "action": "Allow"
            }
          ],
          "ipRules": "[parameters('storageFirewallRules')]",
          "defaultAction": "Deny"
        }
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2019-04-01",
          "properties": {
            "deleteRetentionPolicy": {
              "enabled": "[parameters('blobDeleteRetentionEnabled')]",
              "days": "[parameters('blobDeleteRetentionDays')]"
            }
          },
          "dependsOn": [
            "[variables('coreStorageAccountName')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Storage account",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "dependsOn": [
        "[variables('vNetRef')]"
      ],
      "sku": {
        "name": "Standard_RAGRS"
      }
    },
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2019-06-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "databases",
          "name": "statistics",
          "location": "[resourceGroup().location]",
          "tags": {
            "Department": "[parameters('departmentName')]",
            "Solution": "[parameters('solutionName')]",
            "ServiceType": "SQL Database",
            "Environment": "[parameters('environmentName')]",
            "Subscription": "[parameters('subscriptionName')]",
            "CostCentre": "[parameters('costCentre')]",
            "ServiceOwner": "[parameters('serviceOwnerName')]",
            "DateProvisioned": "[parameters('dateProvisioned')]",
            "CreatedBy": "[parameters('createdBy')]",
            "DeploymentRepo": "[parameters('deploymentRepo')]",
            "DeploymentScript": "[parameters('deploymentScript')]"
          },
          "apiVersion": "2020-08-01-preview",
          "dependsOn": [
            "[variables('sqlserverName')]"
          ],
          "sku": {
            "name": "GP_S_Gen5",
            "tier": "GeneralPurpose",
            "family": "Gen5",
            "capacity": "[parameters('maxCapacityStatisticsDb')]"
          },
          "kind": "v12.0,user,vcore,serverless",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "[parameters('maxDbSizeBytes')]",
            "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
            "zoneRedundant": false,
            "readScale": "Disabled",
            "autoPauseDelay": "[parameters('autoPauseDelayStatisticsDb')]",
            "storageAccountType": "GRS",
            "minCapacity": "[parameters('minCapacityStatisticsDb')]"
          }
        },
        {
          "name": "content",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "tags": {
            "Department": "[parameters('departmentName')]",
            "Solution": "[parameters('solutionName')]",
            "ServiceType": "SQL Database",
            "Environment": "[parameters('environmentName')]",
            "Subscription": "[parameters('subscriptionName')]",
            "CostCentre": "[parameters('costCentre')]",
            "ServiceOwner": "[parameters('serviceOwnerName')]",
            "DateProvisioned": "[parameters('dateProvisioned')]",
            "CreatedBy": "[parameters('createdBy')]",
            "DeploymentRepo": "[parameters('deploymentRepo')]",
            "DeploymentScript": "[parameters('deploymentScript')]"
          },
          "apiVersion": "2020-08-01-preview",
          "dependsOn": [
            "[variables('sqlserverName')]"
          ],
          "sku": {
            "name": "GP_S_Gen5",
            "tier": "GeneralPurpose",
            "family": "Gen5",
            "capacity": "[parameters('maxCapacityContentDb')]"
          },
          "kind": "v12.0,user,vcore,serverless",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "1073741824",
            "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
            "zoneRedundant": false,
            "readScale": "Disabled",
            "autoPauseDelay": "[parameters('autoPauseDelayContentDb')]",
            "storageAccountType": "GRS",
            "minCapacity": "[parameters('minCapacityContentDb')]"
          }
        },
        {
          "name": "[concat(variables('sqlserverName'),'/activeDirectory')]",
          "type": "Microsoft.Sql/servers/administrators",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
          ],
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('sqlAzureAdministratorLogin')]",
            "sid": "[parameters('sqlAzureAdministratorSid')]",
            "tenantId": "[subscription().tenantId]"
          }
        },
        {
          "name": "[concat(string(variables('sqlserverName')), '/statistics/current')]",
          "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
          "apiVersion": "2014-04-01",
          "properties": {
            "status": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "[concat(resourceId('Microsoft.Sql/servers', variables('sqlserverName')), '/databases/statistics')]"
          ]
        },
        {
          "name": "[concat(string(variables('sqlserverName')), '/content/current')]",
          "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
          "apiVersion": "2014-04-01",
          "properties": {
            "status": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "[concat(resourceId('Microsoft.Sql/servers', variables('sqlserverName')), '/databases/content')]"
          ]
        },

        {
          "type": "securityAlertPolicies",
          "name": "Default",
          "apiVersion": "2017-03-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
          ],
          "properties": {
            "state": "Enabled",
            "disabledAlerts": "",
            "emailAddresses": "[parameters('teamEmailAddresses')]",
            "emailAccountAdmins": true
          }
        },
        {
          "condition": "[parameters('sqlVulnerabilityAssessments')]",
          "type": "vulnerabilityAssessments",
          "name": "Default",
          "apiVersion": "2018-06-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', variables('sqlserverName'), 'Default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName'))]"
          ],
          "properties": {
            "storageContainerPath": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'vulnerability-assessment')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "recurringScans": {
              "isEnabled": true,
              "emailSubscriptionAdmins": true,
              "emails": "[parameters('teamEmailAddresses')]"
            }
          }
        },

        {
          "condition": "[parameters('sqlAuditing')]",
          "type": "auditingSettings",
          "name": "DefaultAuditingSettings2",
          "apiVersion": "2017-03-01-preview",
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'auditing-settings')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "eventTypesToAudit": "All",
            "retentionDays": "[parameters('secAlertRetentionDays')]",
            "isAzureMonitorTargetEnabled": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
          ]
        },
        {
          "condition": "[parameters('sqlAuditing')]",
          "type": "extendedAuditingSettings",
          "name": "Default2",
          "apiVersion": "2017-03-01-preview",
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'auditing-settings')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "eventTypesToAudit": "All",
            "retentionDays": "[parameters('secAlertRetentionDays')]",
            "isAzureMonitorTargetEnabled": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "SQL Server",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "name": "[concat(variables('sqlserverName'), '/', parameters('sqlFirewallRules')[copyIndex()].IPRangeName)]",
      "apiVersion": "2015-05-01-preview",
      "scale": null,
      "properties": {
        "startIpAddress": "[parameters('sqlFirewallRules')[copyIndex()].IPRangeStart]",
        "endIpAddress": "[parameters('sqlFirewallRules')[copyIndex()].IPRangeEnd]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
      ],
      "copy": {
        "name": "firewallloop",
        "count": "[length(parameters('sqlFirewallRules'))]"
      }
    },
    {
      "condition": "[parameters('useSubnets')]",
      "name": "[concat(variables('sqlserverName'), '/', variables('sqlAllowedSubnets')[copyIndex()].name)]",
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "2015-05-01-preview",
      "properties": {
        "virtualNetworkSubnetId": "[variables('sqlAllowedSubnets')[copyIndex()].id]",
        "ignoreMissingVnetServiceEndpoint": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
        "[variables('vNetRef')]"
      ],
      "copy": {
        "name": "networkRuleLoop",
        "count":  "[length(variables('sqlAllowedSubnets'))]"
      }
    },
    {
      "name": "[variables('publicSqlServerName')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2019-06-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "databases",
          "name": "public-statistics",
          "location": "[resourceGroup().location]",
          "tags": {
            "Department": "[parameters('departmentName')]",
            "Solution": "[parameters('solutionName')]",
            "ServiceType": "SQL Database",
            "Environment": "[parameters('environmentName')]",
            "Subscription": "[parameters('subscriptionName')]",
            "CostCentre": "[parameters('costCentre')]",
            "ServiceOwner": "[parameters('serviceOwnerName')]",
            "DateProvisioned": "[parameters('dateProvisioned')]",
            "CreatedBy": "[parameters('createdBy')]",
            "DeploymentRepo": "[parameters('deploymentRepo')]",
            "DeploymentScript": "[parameters('deploymentScript')]"
          },
          "apiVersion": "2020-08-01-preview",
          "dependsOn": [
            "[variables('publicSqlServerName')]"
          ],
          "sku": {
            "name": "GP_S_Gen5",
            "tier": "GeneralPurpose",
            "family": "Gen5",
            "capacity": "[parameters('maxCapacityStatisticsDb')]"
          },
          "kind": "v12.0,user,vcore,serverless",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "[parameters('maxDbSizeBytes')]",
            "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
            "zoneRedundant": false,
            "readScale": "Disabled",
            "autoPauseDelay": "[parameters('autoPauseDelayStatisticsDb')]",
            "storageAccountType": "GRS",
            "minCapacity": "[parameters('minCapacityStatisticsDb')]"
          }
        },
        {
          "name": "[concat(variables('publicSqlServerName'),'/activeDirectory')]",
          "type": "Microsoft.Sql/servers/administrators",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]"
          ],
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('sqlAzureAdministratorLogin')]",
            "sid": "[parameters('sqlAzureAdministratorSid')]",
            "tenantId": "[subscription().tenantId]"
          }
        },
        {
          "name": "[concat(string(variables('publicSqlServerName')), '/public-statistics/current')]",
          "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
          "apiVersion": "2014-04-01",
          "properties": {
            "status": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
            "[concat(resourceId('Microsoft.Sql/servers', variables('publicSqlServerName')), '/databases/public-statistics')]"
          ]
        },

        {
          "type": "securityAlertPolicies",
          "name": "Default",
          "apiVersion": "2017-03-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]"
          ],
          "properties": {
            "state": "Enabled",
            "disabledAlerts": "",
            "emailAddresses": "[parameters('teamEmailAddresses')]",
            "emailAccountAdmins": true
          }
        },
        {
          "type": "vulnerabilityAssessments",
          "name": "Default",
          "apiVersion": "2018-06-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
            "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', variables('publicSqlServerName'), 'Default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName'))]"
          ],
          "properties": {
            "storageContainerPath": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'vulnerability-assessment')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "recurringScans": {
              "isEnabled": true,
              "emailSubscriptionAdmins": true,
              "emails": "[parameters('teamEmailAddresses')]"
            }
          }
        },
        {
          "condition": "[parameters('sqlAuditing')]",
          "type": "auditingSettings",
          "name": "DefaultAuditingSettings",
          "apiVersion": "2017-03-01-preview",
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'auditing-settings')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "eventTypesToAudit": "All",
            "retentionDays": "[parameters('secAlertRetentionDays')]",
            "isAzureMonitorTargetEnabled": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
            "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]"
          ]
        },
        {
          "condition": "[parameters('sqlAuditing')]",
          "type": "extendedAuditingSettings",
          "name": "Default",
          "apiVersion": "2017-03-01-preview",
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-07-01').primaryEndpoints.blob, 'auditing-settings')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('loggingStorageAccountName')), '2018-02-01').keys[0].value]",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "eventTypesToAudit": "All",
            "retentionDays": "[parameters('secAlertRetentionDays')]",
            "isAzureMonitorTargetEnabled": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
            "[resourceId('Microsoft.Sql/servers/databases', variables('publicSqlServerName'), 'public-statistics')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "SQL Server",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "name": "[concat(variables('publicSqlServerName'), '/', parameters('sqlFirewallRules')[copyIndex()].IPRangeName)]",
      "apiVersion": "2015-05-01-preview",
      "scale": null,
      "properties": {
        "startIpAddress": "[parameters('sqlFirewallRules')[copyIndex()].IPRangeStart]",
        "endIpAddress": "[parameters('sqlFirewallRules')[copyIndex()].IPRangeEnd]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]"
      ],
      "copy": {
        "name": "firewallloop",
        "count": "[length(parameters('sqlFirewallRules'))]"
      }
    },
    {
      "condition": "[parameters('useSubnets')]",
      "name": "[concat(variables('publicSqlserverName'), '/', variables('publicSqlAllowedSubnets')[copyIndex()].name)]",
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "2015-05-01-preview",
      "properties": {
        "virtualNetworkSubnetId": "[variables('publicSqlAllowedSubnets')[copyIndex()].id]",
        "ignoreMissingVnetServiceEndpoint": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
        "[variables('vNetRef')]"
      ],
      "copy": {
        "name": "networkRuleLoop",
        "count":  "[length(variables('publicSqlAllowedSubnets'))]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('notificationsstorageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "condition": "[parameters('useSubnets')]",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "condition": "[parameters('useSubnets')]",
              "id": "[variables('notifySubnetRef')]",
              "action": "Allow"
            },
            {
              "condition": "[parameters('useSubnets')]",
              "id": "[variables('publisherSubnetRef')]",
              "action": "Allow"
            }
          ],
          "ipRules": "[parameters('storageFirewallRules')]",
          "defaultAction": "Deny"
        }
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2019-04-01",
          "properties": {
            "deleteRetentionPolicy": {
              "enabled": "[parameters('blobDeleteRetentionEnabled')]",
              "days": "[parameters('blobDeleteRetentionDays')]"
            }
          },
          "dependsOn": [
            "[variables('notificationsstorageAccountName')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Storage account",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "name": "[variables('publicStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "condition": "[parameters('useSubnets')]",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "condition": "[parameters('useSubnets')]",
              "id": "[variables('adminSubnetRef')]",
              "action": "Allow"
            },
            {
              "id": "[variables('contentSubnetRef')]",
              "action": "Allow"
            },
            {
              "id": "[variables('dataSubnetRef')]",
              "action": "Allow"
            },
            {
              "id": "[variables('publisherSubnetRef')]",
              "action": "Allow"
            }
          ],
          "ipRules": "[parameters('storageFirewallRules')]",
          "defaultAction": "Deny"
        }
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2019-04-01",
          "properties": {
            "deleteRetentionPolicy": {
              "enabled": "[parameters('blobDeleteRetentionEnabled')]",
              "days": "[parameters('blobDeleteRetentionDays')]"
            }
          },
          "dependsOn": [
            "[variables('publicStorageAccountName')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Storage account",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('notificationsAppInsights')]",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('notificationsAppName')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('notificationsPlanName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "sku": {
        "Tier": "Standard",
        "Name": "S1"
      },
      "properties": {
        "name": "[variables('notificationsPlanName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "apiVersion": "2019-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('notificationsAppName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('notificationsPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('notificationsAppInsights'))]"
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('notifySubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('notificationsAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('notificationsPlanName'))]",
        "httpsOnly": true,
        "http20Enabled": true,
        "minTlsVersion": "[parameters('minTlsVersion')]",
        "ftpsState": "FtpsOnly",
        "webSocketsEnabled": false,
        "requestTracingEnabled": true,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": true,
        "detailedErrorLoggingEnabled": true,
        "cors": {
          "allowedOrigins": [
            "[concat('https://', parameters('domain'))]",
            "[concat('https://', variables('publicAppName'), '.azurewebsites.net')]",
            "https://localhost:3000",
            "http://localhost:3000",
            "http://127.0.0.1"
          ]
        }
      }
    },
    {
      "name": "[concat(variables('notificationsAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('notificationsAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-notifications')]"
      ],
      "properties": {
        "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-notifications')).secretUriWithVersion, ')')]",
        "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-notifications')).secretUriWithVersion, ')')]",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('notificationsAppInsights')), '2015-05-01').InstrumentationKey]",
        "BaseUrl": "[concat(concat('https://', variables('notificationsAppName')), '.azurewebsites.net/api/publication/')]",
        "WebApplicationBaseUrl": "[concat(variables('publicAppUrl'), '/')]",
        "NotifyApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-notify-apikey'), '2018-02-14').secretUriWithVersion, ')')]",
        "TokenSecretKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-notify-token'), '2018-02-14').secretUriWithVersion, ')')]",
        "VerificationEmailTemplateId": "[parameters('verificationEmailTemplateId')]",
        "PublicationNotificationEmailTemplateId": "[parameters('publicationNotificationEmailTemplateId')]",
        "SubscriptionConfirmationEmailTemplateId": "[parameters('subscriptionConfirmationEmailTemplateId')]",
        "TableStorageConnString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-notifications')).secretUriWithVersion, ')')]"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('importerAppInsights')]",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('importerAppName')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": {
        "Tier": "[first(skip(split(parameters('skuImporter'), ' '), 1))]",
        "Name": "[first(split(parameters('skuImporter'), ' '))]"
      },
      "name": "[variables('importerPlanName')]",
      "apiVersion": "2018-11-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "name": "[variables('importerPlanName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "apiVersion": "2019-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('importerAppName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('importerPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('importerAppInsights'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('coreStorageAccountName'))]"
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('importerSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('importerAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('importerPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
            ]
          },
          "connectionStrings": [
            {
              "name": "StatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'statistics', ';User Id=', parameters('sqlImporterUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlImporterUserPassword'), ';')]"
            },
            {
              "name": "ContentDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'content', ';User Id=', parameters('sqlImporterUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlImporterUserPassword'), ';')]"
            }
          ],
          "use32BitWorkerProcess": false
        }
      }
    },
    {
      "name": "[concat(variables('importerAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('importerAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-core')]"
      ],
      "properties": {
        "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-core')).secretUriWithVersion, ')')]",
        "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-core')).secretUriWithVersion, ')')]",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('importerAppInsights')), '2015-05-01').InstrumentationKey]",
        "RowsPerBatch": "3000",
        "CoreStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-core')).secretUriWithVersion, ')')]"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('publisherAppInsights')]",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Application Insights",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('publisherAppName')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-11-01",
      "name": "[variables('publisherPlanName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service plan",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "sku": {
        "Tier": "Standard",
        "Name": "S1"
      },
      "properties": {
        "name": "[variables('publisherPlanName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "hostingEnvironment": ""
      }
    },
    {
      "apiVersion": "2019-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('publisherAppName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('publisherPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('publisherAppInsights'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('coreStorageAccountName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('publicStorageAccountName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('publisherStorageAccountName'))]"
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "App Service",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "resources": [
        {
          "condition": "[parameters('useSubnets')]",
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2018-11-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "subnetResourceId": "[variables('publisherSubnetRef')]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('publisherAppName'))]",
            "[variables('vNetRef')]"
          ]
        }
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('publisherPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "http20Enabled": true,
          "minTlsVersion": "[parameters('minTlsVersion')]",
          "ftpsState": "FtpsOnly",
          "phpVersion": "off",
          "netFrameworkVersion": "v4.7",
          "AlwaysOn": true,
          "webSocketsEnabled": false,
          "remoteDebuggingEnabled": false,
          "httpLoggingEnabled": true,
          "detailedErrorLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
            ]
          },
          "connectionStrings": [
            {
              "name": "ContentDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'content', ';User Id=', parameters('sqlPublisherUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlPublisherUserPassword'), ';')]"
            },
            {
              "name": "StatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'statistics', ';User Id=', parameters('sqlPublisherUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlPublisherUserPassword'), ';')]"
            },
            {
              "name": "PublicStatisticsDb",
              "type": "SQLAzure",
              "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('publicSqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', 'public-statistics', ';User Id=', parameters('sqlPublisherUser'), '@', reference(concat('Microsoft.Sql/servers/', variables('publicSqlServerName'))).fullyQualifiedDomainName, ';Password=', parameters('sqlPublisherUserPassword'), ';')]"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('publisherAppName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('publisherAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[variables('ees-storage-core')]",
        "[variables('ees-storage-public')]",
        "[variables('ees-storage-notifications')]",
        "[variables('ees-storage-publisher')]"
      ],
      "properties": {
        "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-publisher')).secretUriWithVersion, ')')]",
        "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-publisher')).secretUriWithVersion, ')')]",
        "AzureWebJobs.PublishReleaseData.Disabled": "[parameters('publishReleaseDataFunctionDisabled')]",
        "PublishReleasesCronSchedule": "[parameters('publishReleasesCronSchedule')]",
        "PublishReleaseContentCronSchedule": "[parameters('publishReleaseContentCronSchedule')]",
        "ClientId": "[parameters('publisherClientId')]",
        "ClientSecret": "[parameters('publisherClientSecret')]",
        "DataFactoryName": "[variables('dataFactoryName')]",
        "PipelineName": "[parameters('publisherPipelineName')]",
        "ResourceGroupName": "[resourceGroup().name]",
        "SubscriptionId": "[subscription().subscriptionId]",
        "TenantId": "[subscription().tenantId]",
        "WEBSITE_TIME_ZONE": "[parameters('timeZone')]",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('microsoft.insights/components/', variables('publisherAppInsights')), '2015-05-01').InstrumentationKey]",
        "CoreStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-core')).secretUriWithVersion, ')')]",
        "NotificationStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-notifications')).secretUriWithVersion, ')')]",
        "PublicStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-public')).secretUriWithVersion, ')')]",
        "PublisherStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('ees-storage-publisher')).secretUriWithVersion, ')')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('publisherStorageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GZRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "condition": "[parameters('useSubnets')]",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[variables('adminSubnetRef')]",
              "action": "Allow"
            },
            {
              "id": "[variables('publisherSubnetRef')]",
              "action": "Allow"
            }
          ],
          "ipRules": "[parameters('storageFirewallRules')]",
          "defaultAction": "Deny"
        }
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2019-04-01",
          "properties": {
            "deleteRetentionPolicy": {
              "enabled": "[parameters('blobDeleteRetentionEnabled')]",
              "days": "[parameters('blobDeleteRetentionDays')]"
            }
          },
          "dependsOn": [
            "[variables('publisherStorageAccountName')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Storage account V2",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('loggingStorageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GZRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2019-04-01",
          "properties": {
            "deleteRetentionPolicy": {
              "enabled": "[parameters('blobDeleteRetentionEnabled')]",
              "days": "[parameters('blobDeleteRetentionDays')]"
            }
          },
          "dependsOn": [
            "[variables('loggingStorageAccountName')]"
          ]
        }
      ],
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Storage account V2",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      }
    },
    {
      "condition": "[parameters('deploySubnets')]",
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Virtual network",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('adminSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('importerSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('publisherSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('notifySubnetName')]",
            "properties": {
              "addressPrefix": "10.0.3.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('contentSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.4.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('dataSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.5.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "webapp",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms",
                    "actions": [
                      "Microsoft.Network/virtualNetworks/subnets/action"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "datafactory",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[concat(variables('templateBaseUrl'), 'datafactory/template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "subscription": {
            "value": "[parameters('subscription')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "publisherAppName": {
            "value": "[variables('publisherAppName')]"
          },
          "dataFactoryName": {
            "value": "[variables('dataFactoryName')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "branch": {
            "value": "[parameters('branch')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('publicSqlServerName'))]",
        "[resourceId('Microsoft.Web/sites', variables('publisherAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
      ]
    },
    {
      "name": "[variables('keyVaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "Department": "[parameters('departmentName')]",
        "Solution": "[parameters('solutionName')]",
        "ServiceType": "Key Vault",
        "Environment": "[parameters('environmentName')]",
        "Subscription": "[parameters('subscriptionName')]",
        "CostCentre": "[parameters('costCentre')]",
        "ServiceOwner": "[parameters('serviceOwnerName')]",
        "DateProvisioned": "[parameters('dateProvisioned')]",
        "CreatedBy": "[parameters('createdBy')]",
        "DeploymentRepo": "[parameters('deploymentRepo')]",
        "DeploymentScript": "[parameters('deploymentScript')]"
      },
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('adminAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('adminAppName'), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('publisherAppName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('notificationsAppName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('importerAppName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('contentAppName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('dataAppName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },
          {
            "tenantId": "9c7d9dd3-840c-4b3f-818e-552865082e16",
            "objectId": "[parameters('devopsSPN')]", // Devops SPN
            "permissions": {
              "keys": [
              ],
              "secrets": [
                "Get",
                "List"
              ],
              "certificates": [
              ]
            }
          },

          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "a2d80c7b-fa56-4145-9a11-8aa3f9a4a8fe", // EES Admin Group ID
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "976855ee-57b9-438c-bace-b4dfe141bb7e", // EDAP Team
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Decrypt",
                "Encrypt",
                "UnwrapKey",
                "WrapKey",
                "Verify",
                "Sign"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "name": "ees-storage-core",
          "apiVersion": "2016-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('coreStorageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('coreStorageAccountName'), ';AccountKey=', listKeys(variables('coreStorageAccountId'),'2015-05-01-preview').key1)]"
          }
        },
        {
          "type": "secrets",
          "name": "ees-storage-notifications",
          "apiVersion": "2016-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('notificationsStorageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('notificationsStorageAccountName'), ';AccountKey=', listKeys(variables('notificationsStorageAccountId'),'2015-05-01-preview').key1)]"
          }
        },
        {
          "type": "secrets",
          "name": "ees-storage-public",
          "apiVersion": "2016-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('publicStorageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('publicStorageAccountName'), ';AccountKey=', listKeys(variables('publicStorageAccountId'),'2015-05-01-preview').key1)]"
          }
        },
        {
          "type": "secrets",
          "name": "ees-storage-publisher",
          "apiVersion": "2016-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('publisherStorageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('publisherStorageAccountName'), ';AccountKey=', listKeys(variables('publisherStorageAccountId'),'2015-05-01-preview').key1)]"
          }
        }
      ]
    },
    {
      "name": "[concat(variables('dataAppName'), '-autoscale')]",
      "apiVersion": "2014-04-01",
      "type": "Microsoft.Insights/autoscaleSettings",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "properties": {
        "name": "[concat(variables('dataAppName'), '-autoscale')]",
        "enabled": "[parameters('autoscalePublicApplication')]",
        "targetResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('dataPlanName'))]",
        "profiles": [
          {
            "name": "Auto created scale condition",
            "capacity": {
              "minimum": 2,
              "maximum": 10,
              "default": 2
            },
            "rules": [
              {
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('dataPlanName'))]",
                  "operator": "GreaterThan",
                  "statistic": "Average",
                  "threshold": 70,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              },
              {
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('dataPlanName'))]",
                  "operator": "LessThan",
                  "statistic": "Average",
                  "threshold": 30,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              }
            ]
          }
        ],
        "notifications": [
        ],
        "targetResourceLocation": ""
      }
    },
    {
      "name": "[concat(variables('contentAppName'), '-autoscale')]",
      "apiVersion": "2014-04-01",
      "type": "Microsoft.Insights/autoscaleSettings",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "properties": {
        "name": "[concat(variables('contentAppName'), '-autoscale')]",
        "enabled": "[parameters('autoscalePublicApplication')]",
        "targetResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('contentPlanName'))]",
        "profiles": [
          {
            "name": "Auto created scale condition",
            "capacity": {
              "minimum": 2,
              "maximum": 10,
              "default": 2
            },
            "rules": [
              {
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('contentPlanName'))]",
                  "operator": "GreaterThan",
                  "statistic": "Average",
                  "threshold": 70,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              },
              {
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('contentPlanName'))]",
                  "operator": "LessThan",
                  "statistic": "Average",
                  "threshold": 30,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              }
            ]
          }
        ],
        "notifications": [
        ],
        "targetResourceLocation": ""
      }
    },
    {
      "name": "[concat(variables('publicAppName'), '-autoscale')]",
      "apiVersion": "2014-04-01",
      "type": "Microsoft.Insights/autoscaleSettings",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "properties": {
        "name": "[concat(variables('publicAppName'), '-autoscale')]",
        "enabled": "[parameters('autoscalePublicApplication')]",
        "targetResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('publicPlanName'))]",
        "profiles": [
          {
            "name": "Auto created scale condition",
            "capacity": {
              "minimum": 2,
              "maximum": 10,
              "default": 2
            },
            "rules": [
              {
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('publicPlanName'))]",
                  "operator": "GreaterThan",
                  "statistic": "Average",
                  "threshold": 70,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              },
              {
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "microsoft.web/serverfarms",
                  "metricResourceUri": "[resourceId(subscription().subscriptionId, resourceGroup().name,'Microsoft.Web/serverfarms', variables('publicPlanName'))]",
                  "operator": "LessThan",
                  "statistic": "Average",
                  "threshold": 30,
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M",
                  "Dimensions": [
                  ],
                  "dividePerInstance": false
                }
              }
            ]
          }
        ],
        "notifications": [
        ],
        "targetResourceLocation": ""
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('logicAppSlackAlerts')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "alertContext": {
                          "properties": {},
                          "type": "object"
                        },
                        "essentials": {
                          "properties": {
                            "alertContextVersion": {
                              "type": "string"
                            },
                            "alertId": {
                              "type": "string"
                            },
                            "alertRule": {
                              "type": "string"
                            },
                            "alertTargetIDs": {
                              "items": {
                                  "type": "string"
                              },
                              "type": "array"
                            },
                            "description": {
                              "type": "string"
                            },
                            "essentialsVersion": {
                              "type": "string"
                            },
                            "firedDateTime": {
                              "type": "string"
                            },
                            "monitorCondition": {
                              "type": "string"
                            },
                            "monitoringService": {
                              "type": "string"
                            },
                            "originAlertId": {
                              "type": "string"
                            },
                            "resolvedDateTime": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string"
                            },
                            "signalType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "schemaId": {
                        "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "HTTP_Webhook": {
              "runAfter": {},
              "type": "HttpWebhook",
              "inputs": {
                "subscribe": {
                  "body": {
                    "username": "Alertbot",
                    "icon_emoji": ":face_with_monocle",
                    "channel": "#alerts",
                    "text": "Alert @{triggerBody()?['data']?['essentials']?['monitorCondition']}!\n@{triggerBody()?['data']?['essentials']?['alertRule']}\n@{triggerBody()?['data']?['essentials']?['description']}"
                  },
                  "method": "POST",
                  "uri": "[parameters('slackWebhook')]"
                },
                "unsubscribe": {}
              }
            }
          },
          "outputs": {}
        },
        "parameters": {}
      }
    },
    {
      "type": "microsoft.insights/actionGroups",
      "apiVersion": "2019-06-01",
      "name": "[variables('actionGroupAlerts')]",
      "location": "global",
      "properties": {
        "groupShortName": "alertAG",
        "enabled": "[parameters('enableAlerts')]",
        "logicAppReceivers": [
          {
            "name": "[variables('logicAppSlackAlerts')]",
            "resourceId": "[resourceId('Microsoft.Logic/workflows', variables('logicAppSlackAlerts'))]",
            "callbackUrl": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppSlackAlerts')), '/triggers/manual'), '2017-07-01').value]",
            "useCommonAlertSchema": true
          }
        ]
      }
    },
    {
      "type": "microsoft.insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[variables('metricAlerts')[copyIndex()].name]",
      "location": "global",
      "dependsOn": [
        "[variables('metricAlerts')[copyIndex()].resourceId]",
        "[resourceId('microsoft.insights/actionGroups', variables('actionGroupAlerts'))]"
      ],
      "copy": {
        "name": "metricAlertsCopy",
        "count": "[length(variables('metricAlerts'))]"
      },
      "properties": {
        "description": "[variables('metricAlerts')[copyIndex()].description]",
        "severity": 3,
        "enabled": "[parameters('enableAlerts')]",
        "scopes": [
          "[variables('metricAlerts')[copyIndex()].resourceId]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "threshold": "[variables('metricAlerts')[copyIndex()].threshold]",
              "name": "Metric1",
              "metricNamespace": "[variables('metricAlerts')[copyIndex()].resourceType]",
              "metricName": "[variables('metricAlerts')[copyIndex()].metricName]",
              "operator": "[variables('metricAlerts')[copyIndex()].operator]",
              "timeAggregation": "[variables('metricAlerts')[copyIndex()].timeAggregation]",
              "criterionType": "[variables('metricAlerts')[copyIndex()].criterionType]"
            }
          ],
          "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
        },
        "autoMitigate": true,
        "targetResourceType": "[variables('metricAlerts')[copyIndex()].resourceType]",
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('actionGroupAlerts'))]"
          }
        ]
      }
    }
  ]
}
