{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string"
    },
    "slackAlertsChannel": {
      "type": "string"
    },
    "slackAppToken": {
      "type": "securestring"
    },
    "subscription": {
      "type": "string"
    },
    "resourceGroup": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('logicAppName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "state": "Enabled",
        "parameters": {
          "subscription": {
              "type": "String",
              "value": "[parameters('subscription')]"
          },
          "resourceGroup": {
              "type": "String",
              "value": "[parameters('resourceGroup')]"
          }
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
                 "type": "Object",
                "defaultValue": {}
            },
            "subscription": {
              "type": "string",
              "defaultValue": ""
            },
            "resourceGroup": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "alertContext": {
                          "properties": {
                            "condition": {
                              "properties": {
                                "allOf": {
                                  "properties": {
                                    "metricName": {
                                      "type": "string"
                                    },
                                    "timeAggregation": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "threshold": {
                                      "type": "string"
                                    },
                                    "metricValue": {
                                      "type": "number"
                                    },
                                    "type": "object"
                                  }
                                },
                                "windowStartTime": "string",
                                "windowEndTime": "string",
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "essentials": {
                          "properties": {
                            "alertId": {
                              "type": "string"
                            },
                            "alertRule": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string"
                            },
                            "signalType": {
                              "type": "string"
                            },
                            "monitorCondition": {
                              "type": "string"
                            },
                            "monitoringService": {
                              "type": "string"
                            },
                            "alertTargetIDs": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                            },
                            "originAlertId": {
                              "type": "string"
                            },
                            "firedDateTime": {
                              "type": "string"
                            },
                            "resolvedDateTime": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "essentialsVersion": {
                              "type": "string"
                            },
                            "alertContextVersion": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "schemaId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Initialize severity variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "severity",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['essentials']?['severity']}"
                  }
                ]
              }
            },
            "Initialize operator variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "operator",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['alertContext']?['condition']?['allOf']?[0]?['operator']}"
                  }
                ]
              }
            },
            "Initialize metricName variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "metricName",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['alertContext']?['condition']?['allOf']?[0]?['metricName']}"
                  }
                ]
              }
            },
            "Initialize timeAggregation variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "timeAggregation",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['alertContext']?['condition']?['allOf']?[0]?['timeAggregation']}"
                  }
                ]
              }
            },
            "Initialize metricValue variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "metricValue",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['alertContext']?['condition']?['allOf']?[0]?['metricValue']}"
                  }
                ]
              }
            },
            "Initialize threshold variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "threshold",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['alertContext']?['condition']?['allOf']?[0]?['threshold']}"
                  }
                ]
              }
            },
            "Initialize monitorCondition variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "monitorCondition",
                    "type": "string",
                    "value": "@{triggerBody()?['data']?['essentials']?['monitorCondition']}"
                  }
                ]
              }
            },
            "Initialize outsideThresholdMessage variable": {
              "runAfter": {
                "Initialize operator variable": [
                  "Succeeded"
                ],
                "Initialize metricName variable": [
                  "Succeeded"
                ],
                "Initialize timeAggregation variable": [
                  "Succeeded"
                ],
                "Initialize metricValue variable": [
                  "Succeeded"
                ],
                "Initialize threshold variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "outsideThresholdMessage",
                    "type": "string",
                    "value": "The @{variables('timeAggregation')} of @{variables('metricName')} is at @{variables('metricValue')}, which is @{variables('operator')} the threshold of @{variables('threshold')}"
                  }
                ]
              }
            },
            "Initialize withinThresholdMessage variable": {
              "runAfter": {
                "Initialize operator variable": [
                  "Succeeded"
                ],
                "Initialize metricName variable": [
                  "Succeeded"
                ],
                "Initialize timeAggregation variable": [
                  "Succeeded"
                ],
                "Initialize metricValue variable": [
                  "Succeeded"
                ],
                "Initialize threshold variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "withinThresholdMessage",
                    "type": "string",
                    "value": "The @{variables('timeAggregation')} of @{variables('metricName')} is at @{if(empty(variables('metricValue')), 'an acceptable value', variables('metricValue'))}, and is no longer @{variables('operator')} the @{if(empty(variables('threshold')), 'dynamic', variables('threshold')) } threshold"
                  }
                ]
              }
            },
            "Initialize severityDisplay variable": {
              "runAfter": {
                "Initialize severity variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "severityDisplay",
                    "type": "string",
                    "value": "@{if(equals(variables('severity'), 'Sev0'), 'CRITICAL!', '')}@{if(equals(variables('severity'), 'Sev1'), 'Error!', '')}@{if(equals(variables('severity'), 'Sev2'), 'Warning', '')}@{if(equals(variables('severity'), 'Sev3'), 'Information', '')}@{if(equals(variables('severity'), 'Sev4'), 'Verbose', '')}"
                  }
                ]
              }
            },
            "Initialize severityColour variable": {
              "runAfter": {
                "Initialize severity variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "severityColour",
                    "type": "string",
                    "value": "@{if(equals(variables('severity'), 'Sev0'), 'danger', '')}@{if(equals(variables('severity'), 'Sev1'), 'danger', '')}@{if(equals(variables('severity'), 'Sev2'), 'warning', '')}@{if(equals(variables('severity'), 'Sev3'), 'good', '')}@{if(equals(variables('severity'), 'Sev4'), 'good', '')}"
                  }
                ]
              }
            },
            "HTTP_Webhook": {
              "runAfter": {
                "Initialize monitorCondition variable": [
                  "Succeeded"
                ],
                "Initialize severityColour variable": [
                  "Succeeded"
                ],
                "Initialize severityDisplay variable": [
                  "Succeeded"
                ],
                "Initialize withinThresholdMessage variable": [
                  "Succeeded"
                ],
                "Initialize outsideThresholdMessage variable": [
                  "Succeeded"
                ]
              },
              "type": "HttpWebhook",
              "inputs": {
                "subscribe": {
                  "method": "POST",
                  "uri": "https://slack.com/api/chat.postMessage",
                  "body": {
                    "channel": "[parameters('slackAlertsChannel')]",
                    "text": "*Alert @{variables('monitorCondition')}!*\n@{triggerBody()?['data']?['essentials']?['alertRule']}\n@{if(equals(variables('monitorCondition'), 'Resolved'), '', concat(triggerBody()?['data']?['essentials']?['description'], '\n'))}\n@{if(equals(variables('monitorCondition'), 'Resolved'), variables('withinThresholdMessage'), variables('outsideThresholdMessage'))}\n<https://portal.azure.com/#@platform.education.gov.uk/resource/subscriptions/@parameters('subscription')/resourceGroups/@parameters('resourceGroup')/providers/Microsoft.Insights/metricalerts/@{triggerBody()?['data']?['essentials']?['alertRule']}/ViewAlertRuleHistory|Link to alert>\n<https://portal.azure.com/#@platform.education.gov.uk/resource@{triggerBody()?['data']?['essentials']?['alertTargetIDs'][0]}|Link to resource>",
                    "attachments": [
                      {
                        "color": "@{if(equals(variables('monitorCondition'), 'Resolved'), 'good', variables('severityColour'))}",
                        "fields": [
                          {
                            "title": "Alert",
                            "value": "@{triggerBody()?['data']?['essentials']?['alertRule']}",
                            "short": true
                          },
                          {
                            "title": "Severity",
                            "value": "@{if(equals(variables('monitorCondition'), 'Resolved'), 'Resolved', variables('severityDisplay'))}",
                            "short": true
                          },
                          {
                            "title": "@{variables('monitorCondition')} at",
                            "value": "@{if(equals(variables('monitorCondition'), 'Resolved'), formatDateTime(triggerBody()?['data']?['essentials']?['resolvedDateTime'], 'dd/MM/yyyy h:mm:sstt'), formatDateTime(triggerBody()?['data']?['essentials']?['firedDateTime'], 'dd/MM/yyyy h:mm:sstt'))}",
                            "short": false
                          },
                          {
                            "title": "Window start",
                            "value": "@{if(equals(triggerBody()?['data']?['alertContext']?['condition']?['windowStartTime'], null), '', formatDateTime(triggerBody()?['data']?['alertContext']?['condition']?['windowStartTime'], 'dd/MM/yyyy h:mm:sstt'))}",
                            "short": true
                          },
                          {
                              "title": "Window end",
                              "value": "@{if(equals(triggerBody()?['data']?['alertContext']?['condition']?['windowEndTime'], null), '', formatDateTime(triggerBody()?['data']?['alertContext']?['condition']?['windowEndTime'], 'dd/MM/yyyy h:mm:sstt'))}",
                              "short": true
                          }
                        ]
                      }
                    ]
                  },
                  "headers": {
                    "Content-Type": "application/json",
                    "Authorization": "[concat('Bearer ', parameters('slackAppToken'))]"
                  }
                },
                "unsubscribe": {}
              }
            }
          },
          "outputs": {}
        }
      }
    }
  ]
}
